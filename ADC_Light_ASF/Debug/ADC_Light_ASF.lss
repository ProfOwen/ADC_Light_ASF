
ADC_Light_ASF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007cd4  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00007cd4  00007cd4  0000fcd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000008c4  20000000  00007cdc  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000120  200008c4  000085a0  000108c4  2**2
                  ALLOC
  4 .stack        00002004  200009e4  000086c0  000108c4  2**0
                  ALLOC
  5 .ARM.attributes 00000028  00000000  00000000  000108c4  2**0
                  CONTENTS, READONLY
  6 .comment      00000071  00000000  00000000  000108ec  2**0
                  CONTENTS, READONLY
  7 .debug_info   00028588  00000000  00000000  0001095d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000055d4  00000000  00000000  00038ee5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000cba9  00000000  00000000  0003e4b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000810  00000000  00000000  0004b068  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000005f0  00000000  00000000  0004b878  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000571b  00000000  00000000  0004be68  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000fc8c  00000000  00000000  00051583  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0005b997  00000000  00000000  0006120f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001540  00000000  00000000  000bcba8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	200029e8 	.word	0x200029e8
       4:	00001499 	.word	0x00001499
       8:	00001495 	.word	0x00001495
       c:	0000146d 	.word	0x0000146d
	...
      2c:	00001495 	.word	0x00001495
	...
      38:	00001495 	.word	0x00001495
      3c:	0000184d 	.word	0x0000184d
      40:	00001495 	.word	0x00001495
      44:	00001495 	.word	0x00001495
      48:	00001495 	.word	0x00001495
      4c:	00001495 	.word	0x00001495
      50:	00001495 	.word	0x00001495
      54:	00001495 	.word	0x00001495
      58:	00001495 	.word	0x00001495
      5c:	00000d95 	.word	0x00000d95
      60:	00000da5 	.word	0x00000da5
      64:	00000db5 	.word	0x00000db5
      68:	00000dc5 	.word	0x00000dc5
      6c:	00000dd5 	.word	0x00000dd5
      70:	00000de5 	.word	0x00000de5
      74:	000008b5 	.word	0x000008b5
      78:	000008c5 	.word	0x000008c5
      7c:	000008d5 	.word	0x000008d5
      80:	000008e5 	.word	0x000008e5
      84:	000008f5 	.word	0x000008f5
      88:	00000905 	.word	0x00000905
      8c:	00000915 	.word	0x00000915
      90:	00000925 	.word	0x00000925
      94:	00000df5 	.word	0x00000df5
      98:	00001495 	.word	0x00001495
      9c:	00001495 	.word	0x00001495
      a0:	00001495 	.word	0x00001495

000000a4 <deregister_tm_clones>:
      a4:	b508      	push	{r3, lr}
      a6:	4b06      	ldr	r3, [pc, #24]	; (c0 <deregister_tm_clones+0x1c>)
      a8:	4806      	ldr	r0, [pc, #24]	; (c4 <deregister_tm_clones+0x20>)
      aa:	3303      	adds	r3, #3
      ac:	1a1b      	subs	r3, r3, r0
      ae:	2b06      	cmp	r3, #6
      b0:	d800      	bhi.n	b4 <deregister_tm_clones+0x10>
      b2:	bd08      	pop	{r3, pc}
      b4:	4b04      	ldr	r3, [pc, #16]	; (c8 <deregister_tm_clones+0x24>)
      b6:	2b00      	cmp	r3, #0
      b8:	d0fb      	beq.n	b2 <deregister_tm_clones+0xe>
      ba:	4798      	blx	r3
      bc:	e7f9      	b.n	b2 <deregister_tm_clones+0xe>
      be:	46c0      	nop			; (mov r8, r8)
      c0:	00007cdc 	.word	0x00007cdc
      c4:	00007cdc 	.word	0x00007cdc
      c8:	00000000 	.word	0x00000000

000000cc <register_tm_clones>:
      cc:	b508      	push	{r3, lr}
      ce:	4807      	ldr	r0, [pc, #28]	; (ec <register_tm_clones+0x20>)
      d0:	4b07      	ldr	r3, [pc, #28]	; (f0 <register_tm_clones+0x24>)
      d2:	1a1b      	subs	r3, r3, r0
      d4:	109b      	asrs	r3, r3, #2
      d6:	0fda      	lsrs	r2, r3, #31
      d8:	18d3      	adds	r3, r2, r3
      da:	1059      	asrs	r1, r3, #1
      dc:	d100      	bne.n	e0 <register_tm_clones+0x14>
      de:	bd08      	pop	{r3, pc}
      e0:	4a04      	ldr	r2, [pc, #16]	; (f4 <register_tm_clones+0x28>)
      e2:	2a00      	cmp	r2, #0
      e4:	d0fb      	beq.n	de <register_tm_clones+0x12>
      e6:	4790      	blx	r2
      e8:	e7f9      	b.n	de <register_tm_clones+0x12>
      ea:	46c0      	nop			; (mov r8, r8)
      ec:	00007cdc 	.word	0x00007cdc
      f0:	00007cdc 	.word	0x00007cdc
      f4:	00000000 	.word	0x00000000

000000f8 <__do_global_dtors_aux>:
      f8:	b510      	push	{r4, lr}
      fa:	4c07      	ldr	r4, [pc, #28]	; (118 <__do_global_dtors_aux+0x20>)
      fc:	7823      	ldrb	r3, [r4, #0]
      fe:	2b00      	cmp	r3, #0
     100:	d109      	bne.n	116 <__do_global_dtors_aux+0x1e>
     102:	f7ff ffcf 	bl	a4 <deregister_tm_clones>
     106:	4b05      	ldr	r3, [pc, #20]	; (11c <__do_global_dtors_aux+0x24>)
     108:	2b00      	cmp	r3, #0
     10a:	d002      	beq.n	112 <__do_global_dtors_aux+0x1a>
     10c:	4804      	ldr	r0, [pc, #16]	; (120 <__do_global_dtors_aux+0x28>)
     10e:	e000      	b.n	112 <__do_global_dtors_aux+0x1a>
     110:	bf00      	nop
     112:	2301      	movs	r3, #1
     114:	7023      	strb	r3, [r4, #0]
     116:	bd10      	pop	{r4, pc}
     118:	200008c4 	.word	0x200008c4
     11c:	00000000 	.word	0x00000000
     120:	00007cdc 	.word	0x00007cdc

00000124 <frame_dummy>:
     124:	b508      	push	{r3, lr}
     126:	4b09      	ldr	r3, [pc, #36]	; (14c <frame_dummy+0x28>)
     128:	2b00      	cmp	r3, #0
     12a:	d003      	beq.n	134 <frame_dummy+0x10>
     12c:	4808      	ldr	r0, [pc, #32]	; (150 <frame_dummy+0x2c>)
     12e:	4909      	ldr	r1, [pc, #36]	; (154 <frame_dummy+0x30>)
     130:	e000      	b.n	134 <frame_dummy+0x10>
     132:	bf00      	nop
     134:	4808      	ldr	r0, [pc, #32]	; (158 <frame_dummy+0x34>)
     136:	6803      	ldr	r3, [r0, #0]
     138:	2b00      	cmp	r3, #0
     13a:	d003      	beq.n	144 <frame_dummy+0x20>
     13c:	4b07      	ldr	r3, [pc, #28]	; (15c <frame_dummy+0x38>)
     13e:	2b00      	cmp	r3, #0
     140:	d000      	beq.n	144 <frame_dummy+0x20>
     142:	4798      	blx	r3
     144:	f7ff ffc2 	bl	cc <register_tm_clones>
     148:	bd08      	pop	{r3, pc}
     14a:	46c0      	nop			; (mov r8, r8)
     14c:	00000000 	.word	0x00000000
     150:	00007cdc 	.word	0x00007cdc
     154:	200008c8 	.word	0x200008c8
     158:	00007cdc 	.word	0x00007cdc
     15c:	00000000 	.word	0x00000000

00000160 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     160:	b5f0      	push	{r4, r5, r6, r7, lr}
     162:	465f      	mov	r7, fp
     164:	4656      	mov	r6, sl
     166:	464d      	mov	r5, r9
     168:	4644      	mov	r4, r8
     16a:	b4f0      	push	{r4, r5, r6, r7}
     16c:	b099      	sub	sp, #100	; 0x64
     16e:	1c06      	adds	r6, r0, #0
     170:	1c14      	adds	r4, r2, #0
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     172:	6001      	str	r1, [r0, #0]
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     174:	4bc8      	ldr	r3, [pc, #800]	; (498 <adc_init+0x338>)
     176:	6a18      	ldr	r0, [r3, #32]
     178:	2280      	movs	r2, #128	; 0x80
     17a:	0252      	lsls	r2, r2, #9
     17c:	4302      	orrs	r2, r0
     17e:	621a      	str	r2, [r3, #32]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     180:	680b      	ldr	r3, [r1, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     182:	2005      	movs	r0, #5
	module_inst->hw = hw;

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_ADC);

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     184:	07da      	lsls	r2, r3, #31
     186:	d500      	bpl.n	18a <adc_init+0x2a>
     188:	e1fb      	b.n	582 <adc_init+0x422>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     18a:	680b      	ldr	r3, [r1, #0]
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
     18c:	201c      	movs	r0, #28
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
	}

	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     18e:	079d      	lsls	r5, r3, #30
     190:	d500      	bpl.n	194 <adc_init+0x34>
     192:	e1f6      	b.n	582 <adc_init+0x422>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
	}

	/* Store the selected reference for later use */
	module_inst->reference = config->reference;
     194:	7863      	ldrb	r3, [r4, #1]
     196:	7133      	strb	r3, [r6, #4]

#if ADC_CALLBACK_MODE == true
	for (uint8_t i = 0; i < ADC_CALLBACK_N; i++) {
		module_inst->callback[i] = NULL;
     198:	2300      	movs	r3, #0
     19a:	60b3      	str	r3, [r6, #8]
     19c:	60f3      	str	r3, [r6, #12]
     19e:	6133      	str	r3, [r6, #16]
	};

	module_inst->registered_callback_mask = 0;
     1a0:	76b3      	strb	r3, [r6, #26]
	module_inst->enabled_callback_mask = 0;
     1a2:	76f3      	strb	r3, [r6, #27]
	module_inst->remaining_conversions = 0;
     1a4:	8333      	strh	r3, [r6, #24]
	module_inst->job_status = STATUS_OK;
     1a6:	7733      	strb	r3, [r6, #28]

	_adc_instances[0] = module_inst;
     1a8:	4bbc      	ldr	r3, [pc, #752]	; (49c <adc_init+0x33c>)
     1aa:	601e      	str	r6, [r3, #0]

	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     1ac:	232a      	movs	r3, #42	; 0x2a
     1ae:	5ce3      	ldrb	r3, [r4, r3]
     1b0:	2b00      	cmp	r3, #0
     1b2:	d105      	bne.n	1c0 <adc_init+0x60>
     1b4:	7d23      	ldrb	r3, [r4, #20]
     1b6:	2b00      	cmp	r3, #0
     1b8:	d102      	bne.n	1c0 <adc_init+0x60>
			!config->freerunning) {
		module_inst->software_trigger = true;
     1ba:	2301      	movs	r3, #1
     1bc:	7773      	strb	r3, [r6, #29]
     1be:	e001      	b.n	1c4 <adc_init+0x64>
	} else {
		module_inst->software_trigger = false;
     1c0:	2300      	movs	r3, #0
     1c2:	7773      	strb	r3, [r6, #29]
{
	uint8_t adjres = 0;
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
#if SAMD20
	uint8_t revision_num = ((REG_DSU_DID & DSU_DID_DIE_Msk) >> DSU_DID_DIE_Pos);
     1c4:	4bb6      	ldr	r3, [pc, #728]	; (4a0 <adc_init+0x340>)
     1c6:	681b      	ldr	r3, [r3, #0]
     1c8:	041b      	lsls	r3, r3, #16
     1ca:	0f1b      	lsrs	r3, r3, #28
     1cc:	9301      	str	r3, [sp, #4]
#endif

	/* Get the hardware module pointer */
	Adc *const adc_module = module_inst->hw;
     1ce:	6835      	ldr	r5, [r6, #0]
     1d0:	9500      	str	r5, [sp, #0]

	/* Configure GCLK channel and enable clock */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->clock_source;
     1d2:	7823      	ldrb	r3, [r4, #0]
     1d4:	4668      	mov	r0, sp
     1d6:	7203      	strb	r3, [r0, #8]
	system_gclk_chan_set_config(ADC_GCLK_ID, &gclk_chan_conf);
     1d8:	2017      	movs	r0, #23
     1da:	a902      	add	r1, sp, #8
     1dc:	4bb1      	ldr	r3, [pc, #708]	; (4a4 <adc_init+0x344>)
     1de:	4798      	blx	r3
	system_gclk_chan_enable(ADC_GCLK_ID);
     1e0:	2017      	movs	r0, #23
     1e2:	4bb1      	ldr	r3, [pc, #708]	; (4a8 <adc_init+0x348>)
     1e4:	4798      	blx	r3

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
     1e6:	232c      	movs	r3, #44	; 0x2c
     1e8:	5ce3      	ldrb	r3, [r4, r3]
     1ea:	2b00      	cmp	r3, #0
     1ec:	d049      	beq.n	282 <adc_init+0x122>
		uint8_t offset = config->pin_scan.offset_start_scan;
     1ee:	222b      	movs	r2, #43	; 0x2b
     1f0:	5ca5      	ldrb	r5, [r4, r2]
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
     1f2:	7b21      	ldrb	r1, [r4, #12]
	system_gclk_chan_enable(ADC_GCLK_ID);

	/* Setup pinmuxing for analog inputs */
	if (config->pin_scan.inputs_to_scan != 0) {
		uint8_t offset = config->pin_scan.offset_start_scan;
		uint8_t start_pin =
     1f4:	194a      	adds	r2, r1, r5
     1f6:	b2d2      	uxtb	r2, r2
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
     1f8:	18d3      	adds	r3, r2, r3
     1fa:	b2db      	uxtb	r3, r3
     1fc:	4699      	mov	r9, r3
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
     1fe:	429a      	cmp	r2, r3
     200:	d229      	bcs.n	256 <adc_init+0xf6>
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     202:	4aaa      	ldr	r2, [pc, #680]	; (4ac <adc_init+0x34c>)
     204:	4693      	mov	fp, r2
     206:	4baa      	ldr	r3, [pc, #680]	; (4b0 <adc_init+0x350>)
     208:	469a      	mov	sl, r3

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
		config.mux_position = 1;

		system_pinmux_pin_set_config(pin_map_result, &config);
     20a:	1c33      	adds	r3, r6, #0
     20c:	464e      	mov	r6, r9
     20e:	1c22      	adds	r2, r4, #0
     210:	1c0c      	adds	r4, r1, #0
     212:	4690      	mov	r8, r2
     214:	4699      	mov	r9, r3
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
     216:	270f      	movs	r7, #15
     218:	402f      	ands	r7, r5
     21a:	4640      	mov	r0, r8
     21c:	7b03      	ldrb	r3, [r0, #12]
     21e:	18ff      	adds	r7, r7, r3
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     220:	a804      	add	r0, sp, #16
     222:	4659      	mov	r1, fp
     224:	2250      	movs	r2, #80	; 0x50
     226:	47d0      	blx	sl
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
     228:	2f13      	cmp	r7, #19
     22a:	d80c      	bhi.n	246 <adc_init+0xe6>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     22c:	00bf      	lsls	r7, r7, #2
     22e:	ab04      	add	r3, sp, #16
     230:	58f8      	ldr	r0, [r7, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     232:	a903      	add	r1, sp, #12
     234:	2300      	movs	r3, #0
     236:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     238:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     23a:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     23c:	2301      	movs	r3, #1
     23e:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     240:	b2c0      	uxtb	r0, r0
     242:	4a9c      	ldr	r2, [pc, #624]	; (4b4 <adc_init+0x354>)
     244:	4790      	blx	r2
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
			start_pin++;
			offset++;
     246:	3501      	adds	r5, #1
     248:	b2ed      	uxtb	r5, r5
     24a:	1963      	adds	r3, r4, r5
		uint8_t start_pin =
				offset +(uint8_t)config->positive_input;
		uint8_t end_pin =
				start_pin + config->pin_scan.inputs_to_scan;

		while (start_pin < end_pin) {
     24c:	b2db      	uxtb	r3, r3
     24e:	429e      	cmp	r6, r3
     250:	d8e1      	bhi.n	216 <adc_init+0xb6>
     252:	464e      	mov	r6, r9
     254:	4644      	mov	r4, r8
			_adc_configure_ain_pin((offset % 16)+(uint8_t)config->positive_input);
			start_pin++;
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
     256:	89e5      	ldrh	r5, [r4, #14]
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     258:	a804      	add	r0, sp, #16
     25a:	4994      	ldr	r1, [pc, #592]	; (4ac <adc_init+0x34c>)
     25c:	2250      	movs	r2, #80	; 0x50
     25e:	4b94      	ldr	r3, [pc, #592]	; (4b0 <adc_init+0x350>)
     260:	4798      	blx	r3
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
     262:	2d13      	cmp	r5, #19
     264:	d837      	bhi.n	2d6 <adc_init+0x176>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     266:	00ad      	lsls	r5, r5, #2
     268:	ab04      	add	r3, sp, #16
     26a:	58e8      	ldr	r0, [r5, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     26c:	a903      	add	r1, sp, #12
     26e:	2300      	movs	r3, #0
     270:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     272:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     274:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     276:	2301      	movs	r3, #1
     278:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     27a:	b2c0      	uxtb	r0, r0
     27c:	4b8d      	ldr	r3, [pc, #564]	; (4b4 <adc_init+0x354>)
     27e:	4798      	blx	r3
     280:	e029      	b.n	2d6 <adc_init+0x176>
			start_pin++;
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
	} else {
		_adc_configure_ain_pin(config->positive_input);
     282:	7b25      	ldrb	r5, [r4, #12]
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     284:	a804      	add	r0, sp, #16
     286:	4989      	ldr	r1, [pc, #548]	; (4ac <adc_init+0x34c>)
     288:	2250      	movs	r2, #80	; 0x50
     28a:	4b89      	ldr	r3, [pc, #548]	; (4b0 <adc_init+0x350>)
     28c:	4798      	blx	r3
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
     28e:	2d13      	cmp	r5, #19
     290:	d80c      	bhi.n	2ac <adc_init+0x14c>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     292:	00ad      	lsls	r5, r5, #2
     294:	ab04      	add	r3, sp, #16
     296:	58e8      	ldr	r0, [r5, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     298:	a903      	add	r1, sp, #12
     29a:	2300      	movs	r3, #0
     29c:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     29e:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     2a0:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     2a2:	2301      	movs	r3, #1
     2a4:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     2a6:	b2c0      	uxtb	r0, r0
     2a8:	4b82      	ldr	r3, [pc, #520]	; (4b4 <adc_init+0x354>)
     2aa:	4798      	blx	r3
			offset++;
		}
		_adc_configure_ain_pin(config->negative_input);
	} else {
		_adc_configure_ain_pin(config->positive_input);
		_adc_configure_ain_pin(config->negative_input);
     2ac:	89e5      	ldrh	r5, [r4, #14]
static inline void _adc_configure_ain_pin(uint32_t pin)
{
#define PIN_INVALID_ADC_AIN    0xFFFFUL

	/* Pinmapping table for AINxx -> GPIO pin number */
	const uint32_t pinmapping[] = {
     2ae:	a804      	add	r0, sp, #16
     2b0:	497e      	ldr	r1, [pc, #504]	; (4ac <adc_init+0x34c>)
     2b2:	2250      	movs	r2, #80	; 0x50
     2b4:	4b7e      	ldr	r3, [pc, #504]	; (4b0 <adc_init+0x350>)
     2b6:	4798      	blx	r3
#endif
		};

	uint32_t pin_map_result = PIN_INVALID_ADC_AIN;

	if (pin <= ADC_EXTCHANNEL_MSB) {
     2b8:	2d13      	cmp	r5, #19
     2ba:	d80c      	bhi.n	2d6 <adc_init+0x176>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     2bc:	00ad      	lsls	r5, r5, #2
     2be:	ab04      	add	r3, sp, #16
     2c0:	58e8      	ldr	r0, [r5, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     2c2:	a903      	add	r1, sp, #12
     2c4:	2300      	movs	r3, #0
     2c6:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     2c8:	70cb      	strb	r3, [r1, #3]

		struct system_pinmux_config config;
		system_pinmux_get_config_defaults(&config);

		/* Analog functions are all on MUX setting B */
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     2ca:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     2cc:	2301      	movs	r3, #1
     2ce:	700b      	strb	r3, [r1, #0]

		system_pinmux_pin_set_config(pin_map_result, &config);
     2d0:	b2c0      	uxtb	r0, r0
     2d2:	4b78      	ldr	r3, [pc, #480]	; (4b4 <adc_init+0x354>)
     2d4:	4798      	blx	r3
		_adc_configure_ain_pin(config->positive_input);
		_adc_configure_ain_pin(config->negative_input);
	}

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);
     2d6:	7d63      	ldrb	r3, [r4, #21]
     2d8:	009b      	lsls	r3, r3, #2
     2da:	b2db      	uxtb	r3, r3
     2dc:	9d00      	ldr	r5, [sp, #0]
     2de:	702b      	strb	r3, [r5, #0]

	/* Configure reference */
	adc_module->REFCTRL.reg =
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
     2e0:	7da3      	ldrb	r3, [r4, #22]
     2e2:	01db      	lsls	r3, r3, #7

	/* Configure run in standby */
	adc_module->CTRLA.reg = (config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos);

	/* Configure reference */
	adc_module->REFCTRL.reg =
     2e4:	7862      	ldrb	r2, [r4, #1]
     2e6:	4313      	orrs	r3, r2
     2e8:	b2db      	uxtb	r3, r3
     2ea:	706b      	strb	r3, [r5, #1]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos) |
			(config->reference);

	/* Set adjusting result and number of samples */
	switch (config->resolution) {
     2ec:	7923      	ldrb	r3, [r4, #4]
     2ee:	2b34      	cmp	r3, #52	; 0x34
     2f0:	d900      	bls.n	2f4 <adc_init+0x194>
     2f2:	e145      	b.n	580 <adc_init+0x420>
     2f4:	009b      	lsls	r3, r3, #2
     2f6:	4a70      	ldr	r2, [pc, #448]	; (4b8 <adc_init+0x358>)
     2f8:	58d3      	ldr	r3, [r2, r3]
     2fa:	469f      	mov	pc, r3
		break;

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     2fc:	2202      	movs	r2, #2
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     2fe:	2510      	movs	r5, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_13BIT:
		/* Increase resolution by 1 bit */
		adjres = ADC_DIVIDE_RESULT_2;
     300:	2301      	movs	r3, #1
     302:	e028      	b.n	356 <adc_init+0x1f6>

	/* Set adjusting result and number of samples */
	switch (config->resolution) {

	case ADC_RESOLUTION_CUSTOM:
		adjres = config->divide_result;
     304:	7c63      	ldrb	r3, [r4, #17]
		accumulate = config->accumulate_samples;
     306:	7c22      	ldrb	r2, [r4, #16]
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     308:	2510      	movs	r5, #16
     30a:	e024      	b.n	356 <adc_init+0x1f6>
#if SAMD20
	/* Please see $35.1.8 for ADC errata of SAM D20.
	   The revisions before D have this issue.*/
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		if(revision_num < REVISON_D_NUM) {
     30c:	9d01      	ldr	r5, [sp, #4]
     30e:	2d02      	cmp	r5, #2
     310:	d81a      	bhi.n	348 <adc_init+0x1e8>
			adjres = ADC_DIVIDE_RESULT_8;
		} else {
			adjres = ADC_DIVIDE_RESULT_2;
		}
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     312:	2206      	movs	r2, #6
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     314:	2510      	movs	r5, #16
	/* Please see $35.1.8 for ADC errata of SAM D20.
	   The revisions before D have this issue.*/
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		if(revision_num < REVISON_D_NUM) {
			adjres = ADC_DIVIDE_RESULT_8;
     316:	2303      	movs	r3, #3
     318:	e01d      	b.n	356 <adc_init+0x1f6>
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_16BIT:
		if(revision_num < REVISON_D_NUM) {
     31a:	9d01      	ldr	r5, [sp, #4]
     31c:	2d02      	cmp	r5, #2
     31e:	d817      	bhi.n	350 <adc_init+0x1f0>
			/* Increase resolution by 4 bit */
			adjres = ADC_DIVIDE_RESULT_16;
		} else {
			adjres = ADC_DIVIDE_RESULT_DISABLE;
		}
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     320:	2208      	movs	r2, #8
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     322:	2510      	movs	r5, #16
		break;

	case ADC_RESOLUTION_16BIT:
		if(revision_num < REVISON_D_NUM) {
			/* Increase resolution by 4 bit */
			adjres = ADC_DIVIDE_RESULT_16;
     324:	2304      	movs	r3, #4
     326:	e016      	b.n	356 <adc_init+0x1f6>
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     328:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_16BIT;
		break;
#endif
	case ADC_RESOLUTION_8BIT:
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
     32a:	2530      	movs	r5, #48	; 0x30
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
     32c:	2300      	movs	r3, #0
     32e:	e012      	b.n	356 <adc_init+0x1f6>
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     330:	2200      	movs	r2, #0
		/* 8-bit result register */
		resolution = ADC_RESOLUTION_8BIT;
		break;
	case ADC_RESOLUTION_10BIT:
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
     332:	2520      	movs	r5, #32
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
     334:	2300      	movs	r3, #0
     336:	e00e      	b.n	356 <adc_init+0x1f6>
	uint32_t resolution = ADC_RESOLUTION_16BIT;
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     338:	2200      	movs	r2, #0
		/* 10-bit result register */
		resolution = ADC_RESOLUTION_10BIT;
		break;
	case ADC_RESOLUTION_12BIT:
		/* 12-bit result register */
		resolution = ADC_RESOLUTION_12BIT;
     33a:	2500      	movs	r5, #0
 */
static enum status_code _adc_set_config(
		struct adc_module *const module_inst,
		struct adc_config *const config)
{
	uint8_t adjres = 0;
     33c:	2300      	movs	r3, #0
     33e:	e00a      	b.n	356 <adc_init+0x1f6>
		break;

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     340:	2204      	movs	r2, #4
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     342:	2510      	movs	r5, #16
		resolution = ADC_RESOLUTION_16BIT;
		break;

	case ADC_RESOLUTION_14BIT:
		/* Increase resolution by 2 bit */
		adjres = ADC_DIVIDE_RESULT_4;
     344:	2302      	movs	r3, #2
     346:	e006      	b.n	356 <adc_init+0x1f6>
		if(revision_num < REVISON_D_NUM) {
			adjres = ADC_DIVIDE_RESULT_8;
		} else {
			adjres = ADC_DIVIDE_RESULT_2;
		}
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     348:	2206      	movs	r2, #6
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     34a:	2510      	movs	r5, #16
	case ADC_RESOLUTION_15BIT:
		/* Increase resolution by 3 bit */
		if(revision_num < REVISON_D_NUM) {
			adjres = ADC_DIVIDE_RESULT_8;
		} else {
			adjres = ADC_DIVIDE_RESULT_2;
     34c:	2301      	movs	r3, #1
     34e:	e002      	b.n	356 <adc_init+0x1f6>
			/* Increase resolution by 4 bit */
			adjres = ADC_DIVIDE_RESULT_16;
		} else {
			adjres = ADC_DIVIDE_RESULT_DISABLE;
		}
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     350:	2208      	movs	r2, #8
		/* 16-bit result register */
		resolution = ADC_RESOLUTION_16BIT;
     352:	2510      	movs	r5, #16
	case ADC_RESOLUTION_16BIT:
		if(revision_num < REVISON_D_NUM) {
			/* Increase resolution by 4 bit */
			adjres = ADC_DIVIDE_RESULT_16;
		} else {
			adjres = ADC_DIVIDE_RESULT_DISABLE;
     354:	2300      	movs	r3, #0
	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     356:	011b      	lsls	r3, r3, #4
     358:	2170      	movs	r1, #112	; 0x70
     35a:	400b      	ands	r3, r1
     35c:	4313      	orrs	r3, r2
     35e:	9800      	ldr	r0, [sp, #0]
     360:	7083      	strb	r3, [r0, #2]

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
     362:	7de3      	ldrb	r3, [r4, #23]
		return STATUS_ERR_INVALID_ARG;
     364:	2017      	movs	r0, #23
	}

	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;

	/* Check validity of sample length value */
	if (config->sample_length > 63) {
     366:	2b3f      	cmp	r3, #63	; 0x3f
     368:	d900      	bls.n	36c <adc_init+0x20c>
     36a:	e10a      	b.n	582 <adc_init+0x422>
		return STATUS_ERR_INVALID_ARG;
	} else {
		/* Configure sample length */
		adc_module->SAMPCTRL.reg =
     36c:	9900      	ldr	r1, [sp, #0]
     36e:	70cb      	strb	r3, [r1, #3]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     370:	6832      	ldr	r2, [r6, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     372:	6993      	ldr	r3, [r2, #24]
				(config->sample_length << ADC_SAMPCTRL_SAMPLEN_Pos);
	}

	while (adc_is_syncing(module_inst)) {
     374:	0418      	lsls	r0, r3, #16
     376:	d4fc      	bmi.n	372 <adc_init+0x212>
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     378:	7ce2      	ldrb	r2, [r4, #19]
     37a:	8863      	ldrh	r3, [r4, #2]
     37c:	4313      	orrs	r3, r2
			config->clock_prescaler |
			resolution |
			(config->correction.correction_enable << ADC_CTRLB_CORREN_Pos) |
     37e:	2224      	movs	r2, #36	; 0x24
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure CTRLB */
	adc_module->CTRLB.reg =
     380:	5ca2      	ldrb	r2, [r4, r2]
     382:	00d2      	lsls	r2, r2, #3
     384:	4313      	orrs	r3, r2
     386:	7d22      	ldrb	r2, [r4, #20]
     388:	0092      	lsls	r2, r2, #2
     38a:	4313      	orrs	r3, r2
     38c:	7ca2      	ldrb	r2, [r4, #18]
     38e:	0052      	lsls	r2, r2, #1
     390:	4313      	orrs	r3, r2
     392:	432b      	orrs	r3, r5
     394:	9900      	ldr	r1, [sp, #0]
     396:	808b      	strh	r3, [r1, #4]
			(config->freerunning << ADC_CTRLB_FREERUN_Pos) |
			(config->left_adjust << ADC_CTRLB_LEFTADJ_Pos) |
			(config->differential_mode << ADC_CTRLB_DIFFMODE_Pos);

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     398:	7e23      	ldrb	r3, [r4, #24]
     39a:	2b00      	cmp	r3, #0
     39c:	d101      	bne.n	3a2 <adc_init+0x242>
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     39e:	6831      	ldr	r1, [r6, #0]
     3a0:	e094      	b.n	4cc <adc_init+0x36c>
		switch (resolution) {
     3a2:	2d10      	cmp	r5, #16
     3a4:	d05a      	beq.n	45c <adc_init+0x2fc>
     3a6:	d802      	bhi.n	3ae <adc_init+0x24e>
     3a8:	2d00      	cmp	r5, #0
     3aa:	d038      	beq.n	41e <adc_init+0x2be>
     3ac:	e7f7      	b.n	39e <adc_init+0x23e>
     3ae:	2d20      	cmp	r5, #32
     3b0:	d019      	beq.n	3e6 <adc_init+0x286>
     3b2:	2d30      	cmp	r5, #48	; 0x30
     3b4:	d1f3      	bne.n	39e <adc_init+0x23e>
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     3b6:	7ce2      	ldrb	r2, [r4, #19]
     3b8:	2a00      	cmp	r2, #0
     3ba:	d00a      	beq.n	3d2 <adc_init+0x272>
					(config->window.window_lower_value > 127 ||
     3bc:	69e2      	ldr	r2, [r4, #28]
     3be:	3280      	adds	r2, #128	; 0x80
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     3c0:	2017      	movs	r0, #23

	/* Check validity of window thresholds */
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
		switch (resolution) {
		case ADC_RESOLUTION_8BIT:
			if (config->differential_mode &&
     3c2:	2aff      	cmp	r2, #255	; 0xff
     3c4:	d900      	bls.n	3c8 <adc_init+0x268>
     3c6:	e0dc      	b.n	582 <adc_init+0x422>
					(config->window.window_lower_value > 127 ||
					config->window.window_lower_value < -128 ||
     3c8:	6a22      	ldr	r2, [r4, #32]
     3ca:	3280      	adds	r2, #128	; 0x80
     3cc:	2aff      	cmp	r2, #255	; 0xff
     3ce:	d900      	bls.n	3d2 <adc_init+0x272>
     3d0:	e0d7      	b.n	582 <adc_init+0x422>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
					config->window.window_upper_value > 255){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     3d2:	2017      	movs	r0, #23
					config->window.window_lower_value < -128 ||
					config->window.window_upper_value > 127 ||
					config->window.window_upper_value < -128)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 255 ||
     3d4:	69e2      	ldr	r2, [r4, #28]
     3d6:	2aff      	cmp	r2, #255	; 0xff
     3d8:	dd00      	ble.n	3dc <adc_init+0x27c>
     3da:	e0d2      	b.n	582 <adc_init+0x422>
     3dc:	6a25      	ldr	r5, [r4, #32]
     3de:	2dff      	cmp	r5, #255	; 0xff
     3e0:	dd00      	ble.n	3e4 <adc_init+0x284>
     3e2:	e0ce      	b.n	582 <adc_init+0x422>
     3e4:	e7db      	b.n	39e <adc_init+0x23e>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     3e6:	7ce2      	ldrb	r2, [r4, #19]
     3e8:	2a00      	cmp	r2, #0
     3ea:	d00d      	beq.n	408 <adc_init+0x2a8>
					(config->window.window_lower_value > 511 ||
     3ec:	69e0      	ldr	r0, [r4, #28]
     3ee:	2280      	movs	r2, #128	; 0x80
     3f0:	0092      	lsls	r2, r2, #2
     3f2:	1881      	adds	r1, r0, r2
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value > -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     3f4:	2017      	movs	r0, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_10BIT:
			if (config->differential_mode &&
     3f6:	4a31      	ldr	r2, [pc, #196]	; (4bc <adc_init+0x35c>)
     3f8:	4291      	cmp	r1, r2
     3fa:	d900      	bls.n	3fe <adc_init+0x29e>
     3fc:	e0c1      	b.n	582 <adc_init+0x422>
					(config->window.window_lower_value > 511 ||
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
     3fe:	4a30      	ldr	r2, [pc, #192]	; (4c0 <adc_init+0x360>)
     400:	6a25      	ldr	r5, [r4, #32]
     402:	4295      	cmp	r5, r2
     404:	db00      	blt.n	408 <adc_init+0x2a8>
     406:	e0bc      	b.n	582 <adc_init+0x422>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
					config->window.window_upper_value > 1023){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     408:	2017      	movs	r0, #23
					config->window.window_lower_value < -512 ||
					config->window.window_upper_value > 511 ||
					config->window.window_upper_value > -512)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 1023 ||
     40a:	4a2c      	ldr	r2, [pc, #176]	; (4bc <adc_init+0x35c>)
     40c:	69e1      	ldr	r1, [r4, #28]
     40e:	4291      	cmp	r1, r2
     410:	dd00      	ble.n	414 <adc_init+0x2b4>
     412:	e0b6      	b.n	582 <adc_init+0x422>
     414:	6a25      	ldr	r5, [r4, #32]
     416:	4295      	cmp	r5, r2
     418:	dd00      	ble.n	41c <adc_init+0x2bc>
     41a:	e0b2      	b.n	582 <adc_init+0x422>
     41c:	e7bf      	b.n	39e <adc_init+0x23e>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     41e:	7ce2      	ldrb	r2, [r4, #19]
     420:	2a00      	cmp	r2, #0
     422:	d010      	beq.n	446 <adc_init+0x2e6>
					(config->window.window_lower_value > 2047 ||
     424:	69e0      	ldr	r0, [r4, #28]
     426:	2280      	movs	r2, #128	; 0x80
     428:	0112      	lsls	r2, r2, #4
     42a:	1881      	adds	r1, r0, r2
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     42c:	2017      	movs	r0, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
     42e:	4a25      	ldr	r2, [pc, #148]	; (4c4 <adc_init+0x364>)
     430:	4291      	cmp	r1, r2
     432:	d900      	bls.n	436 <adc_init+0x2d6>
     434:	e0a5      	b.n	582 <adc_init+0x422>
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
     436:	6a25      	ldr	r5, [r4, #32]
     438:	2080      	movs	r0, #128	; 0x80
     43a:	0100      	lsls	r0, r0, #4
     43c:	1829      	adds	r1, r5, r0
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     43e:	2017      	movs	r0, #23
			}
			break;
		case ADC_RESOLUTION_12BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 2047 ||
					config->window.window_lower_value < -2048 ||
     440:	4291      	cmp	r1, r2
     442:	d900      	bls.n	446 <adc_init+0x2e6>
     444:	e09d      	b.n	582 <adc_init+0x422>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
					config->window.window_upper_value > 4095){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     446:	2017      	movs	r0, #23
					config->window.window_lower_value < -2048 ||
					config->window.window_upper_value > 2047 ||
					config->window.window_upper_value < -2048)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 4095 ||
     448:	4a1e      	ldr	r2, [pc, #120]	; (4c4 <adc_init+0x364>)
     44a:	69e1      	ldr	r1, [r4, #28]
     44c:	4291      	cmp	r1, r2
     44e:	dd00      	ble.n	452 <adc_init+0x2f2>
     450:	e097      	b.n	582 <adc_init+0x422>
     452:	6a25      	ldr	r5, [r4, #32]
     454:	4295      	cmp	r5, r2
     456:	dd00      	ble.n	45a <adc_init+0x2fa>
     458:	e093      	b.n	582 <adc_init+0x422>
     45a:	e7a0      	b.n	39e <adc_init+0x23e>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
     45c:	7ce2      	ldrb	r2, [r4, #19]
     45e:	2a00      	cmp	r2, #0
     460:	d010      	beq.n	484 <adc_init+0x324>
					(config->window.window_lower_value > 32767 ||
     462:	69e0      	ldr	r0, [r4, #28]
     464:	2280      	movs	r2, #128	; 0x80
     466:	0212      	lsls	r2, r2, #8
     468:	1881      	adds	r1, r0, r2
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     46a:	2017      	movs	r0, #23
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
     46c:	4a16      	ldr	r2, [pc, #88]	; (4c8 <adc_init+0x368>)
     46e:	4291      	cmp	r1, r2
     470:	d900      	bls.n	474 <adc_init+0x314>
     472:	e086      	b.n	582 <adc_init+0x422>
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
     474:	6a25      	ldr	r5, [r4, #32]
     476:	2080      	movs	r0, #128	; 0x80
     478:	0200      	lsls	r0, r0, #8
     47a:	1829      	adds	r1, r5, r0
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     47c:	2017      	movs	r0, #23
			}
			break;
		case ADC_RESOLUTION_16BIT:
			if (config->differential_mode &&
					(config->window.window_lower_value > 32767 ||
					config->window.window_lower_value < -32768 ||
     47e:	4291      	cmp	r1, r2
     480:	d900      	bls.n	484 <adc_init+0x324>
     482:	e07e      	b.n	582 <adc_init+0x422>
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
					config->window.window_upper_value > 65535){
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
     484:	2017      	movs	r0, #23
					config->window.window_lower_value < -32768 ||
					config->window.window_upper_value > 32767 ||
					config->window.window_upper_value < -32768)) {
				/* Invalid value */
				return STATUS_ERR_INVALID_ARG;
			} else if (config->window.window_lower_value > 65535 ||
     486:	4a10      	ldr	r2, [pc, #64]	; (4c8 <adc_init+0x368>)
     488:	69e1      	ldr	r1, [r4, #28]
     48a:	4291      	cmp	r1, r2
     48c:	dd00      	ble.n	490 <adc_init+0x330>
     48e:	e078      	b.n	582 <adc_init+0x422>
     490:	6a25      	ldr	r5, [r4, #32]
     492:	4295      	cmp	r5, r2
     494:	dc75      	bgt.n	582 <adc_init+0x422>
     496:	e782      	b.n	39e <adc_init+0x23e>
     498:	40000400 	.word	0x40000400
     49c:	20000990 	.word	0x20000990
     4a0:	41002018 	.word	0x41002018
     4a4:	00001361 	.word	0x00001361
     4a8:	000012d1 	.word	0x000012d1
     4ac:	00007980 	.word	0x00007980
     4b0:	000021dd 	.word	0x000021dd
     4b4:	0000143d 	.word	0x0000143d
     4b8:	000078ac 	.word	0x000078ac
     4bc:	000003ff 	.word	0x000003ff
     4c0:	fffffe01 	.word	0xfffffe01
     4c4:	00000fff 	.word	0x00000fff
     4c8:	0000ffff 	.word	0x0000ffff

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     4cc:	698a      	ldr	r2, [r1, #24]
			}
			break;
		}
	}

	while (adc_is_syncing(module_inst)) {
     4ce:	0410      	lsls	r0, r2, #16
     4d0:	d4fc      	bmi.n	4cc <adc_init+0x36c>
		/* Wait for synchronization */
	}

	/* Configure window mode */
	adc_module->WINCTRL.reg = config->window.window_mode;
     4d2:	9d00      	ldr	r5, [sp, #0]
     4d4:	722b      	strb	r3, [r5, #8]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     4d6:	6832      	ldr	r2, [r6, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     4d8:	6993      	ldr	r3, [r2, #24]

	while (adc_is_syncing(module_inst)) {
     4da:	0418      	lsls	r0, r3, #16
     4dc:	d4fc      	bmi.n	4d8 <adc_init+0x378>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINLT.reg =
     4de:	8ba3      	ldrh	r3, [r4, #28]
     4e0:	9d00      	ldr	r5, [sp, #0]
     4e2:	83ab      	strh	r3, [r5, #28]
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     4e4:	6832      	ldr	r2, [r6, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     4e6:	6993      	ldr	r3, [r2, #24]
			config->window.window_lower_value << ADC_WINLT_WINLT_Pos;

	while (adc_is_syncing(module_inst)) {
     4e8:	0418      	lsls	r0, r3, #16
     4ea:	d4fc      	bmi.n	4e6 <adc_init+0x386>
		/* Wait for synchronization */
	}

	/* Configure lower threshold */
	adc_module->WINUT.reg = config->window.window_upper_value <<
     4ec:	8c23      	ldrh	r3, [r4, #32]
     4ee:	9d00      	ldr	r5, [sp, #0]
     4f0:	842b      	strh	r3, [r5, #32]
			ADC_WINUT_WINUT_Pos;

	uint8_t inputs_to_scan = config->pin_scan.inputs_to_scan;
     4f2:	232c      	movs	r3, #44	; 0x2c
     4f4:	5ce3      	ldrb	r3, [r4, r3]
	if (inputs_to_scan > 0) {
     4f6:	2b00      	cmp	r3, #0
     4f8:	d004      	beq.n	504 <adc_init+0x3a4>
		/*
		* Number of input sources included is the value written to INPUTSCAN
		* plus 1.
		*/
		inputs_to_scan--;
     4fa:	3b01      	subs	r3, #1
     4fc:	b2db      	uxtb	r3, r3
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
     4fe:	2017      	movs	r0, #23
		* plus 1.
		*/
		inputs_to_scan--;
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     500:	2b0f      	cmp	r3, #15
     502:	d83e      	bhi.n	582 <adc_init+0x422>
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
     504:	222b      	movs	r2, #43	; 0x2b
     506:	5ca2      	ldrb	r2, [r4, r2]
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
     508:	2017      	movs	r0, #23
		* plus 1.
		*/
		inputs_to_scan--;
	}

	if (inputs_to_scan > (ADC_INPUTCTRL_INPUTSCAN_Msk >> ADC_INPUTCTRL_INPUTSCAN_Pos) ||
     50a:	2a0f      	cmp	r2, #15
     50c:	d839      	bhi.n	582 <adc_init+0x422>
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     50e:	6831      	ldr	r1, [r6, #0]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     510:	6988      	ldr	r0, [r1, #24]
			config->pin_scan.offset_start_scan > (ADC_INPUTCTRL_INPUTOFFSET_Msk >> ADC_INPUTCTRL_INPUTOFFSET_Pos)) {
		/* Invalid number of input pins or input offset */
		return STATUS_ERR_INVALID_ARG;
	}

	while (adc_is_syncing(module_inst)) {
     512:	0405      	lsls	r5, r0, #16
     514:	d4fc      	bmi.n	510 <adc_init+0x3b0>
	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     516:	89e0      	ldrh	r0, [r4, #14]
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
     518:	7b21      	ldrb	r1, [r4, #12]
			config->gain_factor |
     51a:	4301      	orrs	r1, r0
			(config->pin_scan.offset_start_scan <<
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
     51c:	68a0      	ldr	r0, [r4, #8]
     51e:	4301      	orrs	r1, r0
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
			config->gain_factor |
			(config->pin_scan.offset_start_scan <<
     520:	0512      	lsls	r2, r2, #20
			ADC_INPUTCTRL_INPUTOFFSET_Pos) |
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
     522:	430a      	orrs	r2, r1
     524:	041b      	lsls	r3, r3, #16
			config->negative_input |
     526:	4313      	orrs	r3, r2
	while (adc_is_syncing(module_inst)) {
		/* Wait for synchronization */
	}

	/* Configure pin scan mode and positive and negative input pins */
	adc_module->INPUTCTRL.reg =
     528:	9d00      	ldr	r5, [sp, #0]
     52a:	612b      	str	r3, [r5, #16]
			(inputs_to_scan << ADC_INPUTCTRL_INPUTSCAN_Pos) |
			config->negative_input |
			config->positive_input;

	/* Configure events */
	adc_module->EVCTRL.reg = config->event_action;
     52c:	232a      	movs	r3, #42	; 0x2a
     52e:	5ce3      	ldrb	r3, [r4, r3]
     530:	752b      	strb	r3, [r5, #20]

	/* Disable all interrupts */
	adc_module->INTENCLR.reg =
     532:	230f      	movs	r3, #15
     534:	75ab      	strb	r3, [r5, #22]
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
     536:	2324      	movs	r3, #36	; 0x24
     538:	5ce3      	ldrb	r3, [r4, r3]
     53a:	2b00      	cmp	r3, #0
     53c:	d00e      	beq.n	55c <adc_init+0x3fc>
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     53e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
			return STATUS_ERR_INVALID_ARG;
     540:	2017      	movs	r0, #23
			(1 << ADC_INTENCLR_SYNCRDY_Pos) | (1 << ADC_INTENCLR_WINMON_Pos) |
			(1 << ADC_INTENCLR_OVERRUN_Pos) | (1 << ADC_INTENCLR_RESRDY_Pos);

	if (config->correction.correction_enable){
		/* Make sure gain_correction value is valid */
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     542:	4a13      	ldr	r2, [pc, #76]	; (590 <adc_init+0x430>)
     544:	4293      	cmp	r3, r2
     546:	d81c      	bhi.n	582 <adc_init+0x422>
			return STATUS_ERR_INVALID_ARG;
		} else {
			/* Set gain correction value */
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     548:	84ab      	strh	r3, [r5, #36]	; 0x24
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
     54a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     54c:	2080      	movs	r0, #128	; 0x80
     54e:	0100      	lsls	r0, r0, #4
     550:	1819      	adds	r1, r3, r0
     552:	b289      	uxth	r1, r1
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
     554:	2017      	movs	r0, #23
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
					ADC_GAINCORR_GAINCORR_Pos;
		}

		/* Make sure offset correction value is valid */
		if (config->correction.offset_correction > 2047 ||
     556:	4291      	cmp	r1, r2
     558:	d813      	bhi.n	582 <adc_init+0x422>
				config->correction.offset_correction < -2048) {
			return STATUS_ERR_INVALID_ARG;
		} else {
			/* Set offset correction value */
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     55a:	84eb      	strh	r3, [r5, #38]	; 0x26
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
			ADC_CALIB_BIAS_CAL(
     55c:	4b0d      	ldr	r3, [pc, #52]	; (594 <adc_init+0x434>)
     55e:	681a      	ldr	r2, [r3, #0]
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
     560:	0152      	lsls	r2, r2, #5
     562:	23e0      	movs	r3, #224	; 0xe0
     564:	00db      	lsls	r3, r3, #3
     566:	401a      	ands	r2, r3
			ADC_CALIB_BIAS_CAL(
				(*(uint32_t *)ADC_FUSES_BIASCAL_ADDR >> ADC_FUSES_BIASCAL_Pos)
			) |
			ADC_CALIB_LINEARITY_CAL(
     568:	4b0b      	ldr	r3, [pc, #44]	; (598 <adc_init+0x438>)
     56a:	6858      	ldr	r0, [r3, #4]
     56c:	0141      	lsls	r1, r0, #5
     56e:	681b      	ldr	r3, [r3, #0]
     570:	0edb      	lsrs	r3, r3, #27
     572:	430b      	orrs	r3, r1
					ADC_OFFSETCORR_OFFSETCORR_Pos;
		}
	}

	/* Load in the fixed device ADC calibration constants */
	adc_module->CALIB.reg =
     574:	b2db      	uxtb	r3, r3
     576:	4313      	orrs	r3, r2
     578:	9d00      	ldr	r5, [sp, #0]
     57a:	852b      	strh	r3, [r5, #40]	; 0x28
			) |
			ADC_CALIB_LINEARITY_CAL(
				(*(uint64_t *)ADC_FUSES_LINEARITY_0_ADDR >> ADC_FUSES_LINEARITY_0_Pos)
			);

	return STATUS_OK;
     57c:	2000      	movs	r0, #0
     57e:	e000      	b.n	582 <adc_init+0x422>
		resolution = ADC_RESOLUTION_12BIT;
		break;

	default:
		/* Unknown. Abort. */
		return STATUS_ERR_INVALID_ARG;
     580:	2017      	movs	r0, #23
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(module_inst, config);
}
     582:	b019      	add	sp, #100	; 0x64
     584:	bc3c      	pop	{r2, r3, r4, r5}
     586:	4690      	mov	r8, r2
     588:	4699      	mov	r9, r3
     58a:	46a2      	mov	sl, r4
     58c:	46ab      	mov	fp, r5
     58e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     590:	00000fff 	.word	0x00000fff
     594:	00806024 	.word	0x00806024
     598:	00806020 	.word	0x00806020

0000059c <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     59c:	b538      	push	{r3, r4, r5, lr}
     59e:	1c15      	adds	r5, r2, #0
	/* Baud value variable */
	uint16_t baud_calculated = 0;

	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     5a0:	084c      	lsrs	r4, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     5a2:	2340      	movs	r3, #64	; 0x40
{
	/* Baud value variable */
	uint16_t baud_calculated = 0;

	/* Check if baudrate is outside of valid range. */
	if (baudrate > (external_clock / 2)) {
     5a4:	4284      	cmp	r4, r0
     5a6:	d30b      	bcc.n	5c0 <_sercom_get_sync_baud_val+0x24>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	baud_calculated = (external_clock / (2 * baudrate)) - 1;
     5a8:	0043      	lsls	r3, r0, #1
     5aa:	1c08      	adds	r0, r1, #0
     5ac:	1c19      	adds	r1, r3, #0
     5ae:	4b05      	ldr	r3, [pc, #20]	; (5c4 <_sercom_get_sync_baud_val+0x28>)
     5b0:	4798      	blx	r3
     5b2:	3801      	subs	r0, #1
     5b4:	b280      	uxth	r0, r0

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     5b6:	2340      	movs	r3, #64	; 0x40
	/* Calculate BAUD value from clock frequency and baudrate */
	baud_calculated = (external_clock / (2 * baudrate)) - 1;

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
     5b8:	28ff      	cmp	r0, #255	; 0xff
     5ba:	d801      	bhi.n	5c0 <_sercom_get_sync_baud_val+0x24>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
     5bc:	8028      	strh	r0, [r5, #0]
		return STATUS_OK;
     5be:	2300      	movs	r3, #0
	}
}
     5c0:	1c18      	adds	r0, r3, #0
     5c2:	bd38      	pop	{r3, r4, r5, pc}
     5c4:	0000185d 	.word	0x0000185d

000005c8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     5ca:	1c07      	adds	r7, r0, #0
     5cc:	1c0d      	adds	r5, r1, #0
     5ce:	1c16      	adds	r6, r2, #0
     5d0:	aa06      	add	r2, sp, #24
     5d2:	7810      	ldrb	r0, [r2, #0]
	uint64_t baud_calculated = 0;
	uint8_t baud_fp;
	uint32_t baud_int;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) >= peripheral_clock) {
     5d4:	1c3a      	adds	r2, r7, #0
     5d6:	4342      	muls	r2, r0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     5d8:	2440      	movs	r4, #64	; 0x40
	uint64_t baud_calculated = 0;
	uint8_t baud_fp;
	uint32_t baud_int;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) >= peripheral_clock) {
     5da:	428a      	cmp	r2, r1
     5dc:	d240      	bcs.n	660 <_sercom_get_async_baud_val+0x98>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     5de:	2b00      	cmp	r3, #0
     5e0:	d113      	bne.n	60a <_sercom_get_async_baud_val+0x42>
		/* Calculate the BAUD value */
		ratio = ((sample_num * (uint64_t)baudrate) << SHIFT) / peripheral_clock;
     5e2:	2100      	movs	r1, #0
     5e4:	1c3a      	adds	r2, r7, #0
     5e6:	4c22      	ldr	r4, [pc, #136]	; (670 <_sercom_get_async_baud_val+0xa8>)
     5e8:	47a0      	blx	r4
     5ea:	1c01      	adds	r1, r0, #0
     5ec:	2000      	movs	r0, #0
     5ee:	1c2a      	adds	r2, r5, #0
     5f0:	2300      	movs	r3, #0
     5f2:	4c20      	ldr	r4, [pc, #128]	; (674 <_sercom_get_async_baud_val+0xac>)
     5f4:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     5f6:	4d1d      	ldr	r5, [pc, #116]	; (66c <_sercom_get_async_baud_val+0xa4>)
     5f8:	4c1b      	ldr	r4, [pc, #108]	; (668 <_sercom_get_async_baud_val+0xa0>)
     5fa:	1c22      	adds	r2, r4, #0
     5fc:	1c2b      	adds	r3, r5, #0
     5fe:	1a12      	subs	r2, r2, r0
     600:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     602:	0c12      	lsrs	r2, r2, #16
     604:	041b      	lsls	r3, r3, #16
     606:	431a      	orrs	r2, r3
     608:	e026      	b.n	658 <_sercom_get_async_baud_val+0x90>
		enum sercom_asynchronous_sample_num sample_num)
{
	/* Temporary variables  */
	uint64_t ratio = 0;
	uint64_t scale = 0;
	uint64_t baud_calculated = 0;
     60a:	2200      	movs	r2, #0
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
		/* Calculate the BAUD value */
		ratio = ((sample_num * (uint64_t)baudrate) << SHIFT) / peripheral_clock;
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     60c:	2b01      	cmp	r3, #1
     60e:	d123      	bne.n	658 <_sercom_get_async_baud_val+0x90>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			baud_int = BAUD_FP_MAX * (uint64_t)peripheral_clock / ((uint64_t)baudrate * sample_num)  - baud_fp;
     610:	0f4c      	lsrs	r4, r1, #29
     612:	00cd      	lsls	r5, r1, #3
     614:	2100      	movs	r1, #0
     616:	1c3a      	adds	r2, r7, #0
     618:	2300      	movs	r3, #0
     61a:	4f15      	ldr	r7, [pc, #84]	; (670 <_sercom_get_async_baud_val+0xa8>)
     61c:	47b8      	blx	r7
     61e:	1c02      	adds	r2, r0, #0
     620:	1c0b      	adds	r3, r1, #0
     622:	1c28      	adds	r0, r5, #0
     624:	1c21      	adds	r1, r4, #0
     626:	4c13      	ldr	r4, [pc, #76]	; (674 <_sercom_get_async_baud_val+0xac>)
     628:	47a0      	blx	r4
			baud_int = baud_int / BAUD_FP_MAX;
     62a:	08c2      	lsrs	r2, r0, #3
			if(baud_int < BAUD_INT_MAX) {
     62c:	4b12      	ldr	r3, [pc, #72]	; (678 <_sercom_get_async_baud_val+0xb0>)
     62e:	429a      	cmp	r2, r3
     630:	d90f      	bls.n	652 <_sercom_get_async_baud_val+0x8a>
     632:	3801      	subs	r0, #1
		/* Calculate the BAUD value */
		ratio = ((sample_num * (uint64_t)baudrate) << SHIFT) / peripheral_clock;
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     634:	2301      	movs	r3, #1
			baud_int = BAUD_FP_MAX * (uint64_t)peripheral_clock / ((uint64_t)baudrate * sample_num)  - baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     636:	4910      	ldr	r1, [pc, #64]	; (678 <_sercom_get_async_baud_val+0xb0>)
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			baud_int = BAUD_FP_MAX * (uint64_t)peripheral_clock / ((uint64_t)baudrate * sample_num)  - baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
     638:	08c2      	lsrs	r2, r0, #3
			if(baud_int < BAUD_INT_MAX) {
     63a:	428a      	cmp	r2, r1
     63c:	d905      	bls.n	64a <_sercom_get_async_baud_val+0x82>
		/* Calculate the BAUD value */
		ratio = ((sample_num * (uint64_t)baudrate) << SHIFT) / peripheral_clock;
		scale = ((uint64_t)1 << SHIFT) - ratio;
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     63e:	3301      	adds	r3, #1
     640:	b2db      	uxtb	r3, r3
     642:	3801      	subs	r0, #1
     644:	2b08      	cmp	r3, #8
     646:	d1f7      	bne.n	638 <_sercom_get_async_baud_val+0x70>
     648:	e009      	b.n	65e <_sercom_get_async_baud_val+0x96>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     64a:	2440      	movs	r4, #64	; 0x40
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
     64c:	2b08      	cmp	r3, #8
     64e:	d101      	bne.n	654 <_sercom_get_async_baud_val+0x8c>
     650:	e006      	b.n	660 <_sercom_get_async_baud_val+0x98>
		baud_calculated = (65536 * scale) >> SHIFT;
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
			baud_int = BAUD_FP_MAX * (uint64_t)peripheral_clock / ((uint64_t)baudrate * sample_num)  - baud_fp;
			baud_int = baud_int / BAUD_FP_MAX;
			if(baud_int < BAUD_INT_MAX) {
     652:	2300      	movs	r3, #0
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
		}
		baud_calculated = baud_int | (baud_fp << 13);
     654:	035b      	lsls	r3, r3, #13
     656:	431a      	orrs	r2, r3
	}

	*baudval = baud_calculated;
     658:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     65a:	2400      	movs	r4, #0
     65c:	e000      	b.n	660 <_sercom_get_async_baud_val+0x98>
			if(baud_int < BAUD_INT_MAX) {
				break;
			}
		}
		if(baud_fp == BAUD_FP_MAX) {
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     65e:	2440      	movs	r4, #64	; 0x40
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     660:	1c20      	adds	r0, r4, #0
     662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     664:	46c0      	nop			; (mov r8, r8)
     666:	46c0      	nop			; (mov r8, r8)
     668:	00000000 	.word	0x00000000
     66c:	00000001 	.word	0x00000001
     670:	0000193d 	.word	0x0000193d
     674:	000018fd 	.word	0x000018fd
     678:	00001fff 	.word	0x00001fff
     67c:	46c0      	nop			; (mov r8, r8)
     67e:	46c0      	nop			; (mov r8, r8)

00000680 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     680:	b510      	push	{r4, lr}
     682:	b082      	sub	sp, #8
     684:	1c04      	adds	r4, r0, #0
	/* Check if valid option. */
	if (!_sercom_config.generator_is_set || force_change) {
     686:	4b0f      	ldr	r3, [pc, #60]	; (6c4 <sercom_set_gclk_generator+0x44>)
     688:	781b      	ldrb	r3, [r3, #0]
     68a:	2b00      	cmp	r3, #0
     68c:	d001      	beq.n	692 <sercom_set_gclk_generator+0x12>
     68e:	2900      	cmp	r1, #0
     690:	d00d      	beq.n	6ae <sercom_set_gclk_generator+0x2e>
		/* Create and fill a GCLK configuration structure for the new config. */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
     692:	a901      	add	r1, sp, #4
     694:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     696:	200c      	movs	r0, #12
     698:	4b0b      	ldr	r3, [pc, #44]	; (6c8 <sercom_set_gclk_generator+0x48>)
     69a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     69c:	200c      	movs	r0, #12
     69e:	4b0b      	ldr	r3, [pc, #44]	; (6cc <sercom_set_gclk_generator+0x4c>)
     6a0:	4798      	blx	r3

		/* Save config. */
		_sercom_config.generator_source = generator_source;
     6a2:	4b08      	ldr	r3, [pc, #32]	; (6c4 <sercom_set_gclk_generator+0x44>)
     6a4:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     6a6:	2201      	movs	r2, #1
     6a8:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
     6aa:	2000      	movs	r0, #0
     6ac:	e007      	b.n	6be <sercom_set_gclk_generator+0x3e>
	} else if (generator_source == _sercom_config.generator_source) {
     6ae:	4b05      	ldr	r3, [pc, #20]	; (6c4 <sercom_set_gclk_generator+0x44>)
     6b0:	785a      	ldrb	r2, [r3, #1]
		/* Return status OK if same config. */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
     6b2:	201d      	movs	r0, #29
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
		/* Return status OK if same config. */
		return STATUS_OK;
     6b4:	1b14      	subs	r4, r2, r4
     6b6:	1e62      	subs	r2, r4, #1
     6b8:	4194      	sbcs	r4, r2
     6ba:	4264      	negs	r4, r4
     6bc:	4020      	ands	r0, r4
	}

	/* Return invalid config to already initialized GCLK. */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
     6be:	b002      	add	sp, #8
     6c0:	bd10      	pop	{r4, pc}
     6c2:	46c0      	nop			; (mov r8, r8)
     6c4:	200008e0 	.word	0x200008e0
     6c8:	00001361 	.word	0x00001361
     6cc:	000012d1 	.word	0x000012d1

000006d0 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     6d0:	4b44      	ldr	r3, [pc, #272]	; (7e4 <_sercom_get_default_pad+0x114>)
     6d2:	4298      	cmp	r0, r3
     6d4:	d033      	beq.n	73e <_sercom_get_default_pad+0x6e>
     6d6:	d806      	bhi.n	6e6 <_sercom_get_default_pad+0x16>
     6d8:	4b43      	ldr	r3, [pc, #268]	; (7e8 <_sercom_get_default_pad+0x118>)
     6da:	4298      	cmp	r0, r3
     6dc:	d00d      	beq.n	6fa <_sercom_get_default_pad+0x2a>
     6de:	4b43      	ldr	r3, [pc, #268]	; (7ec <_sercom_get_default_pad+0x11c>)
     6e0:	4298      	cmp	r0, r3
     6e2:	d01b      	beq.n	71c <_sercom_get_default_pad+0x4c>
     6e4:	e06f      	b.n	7c6 <_sercom_get_default_pad+0xf6>
     6e6:	4b42      	ldr	r3, [pc, #264]	; (7f0 <_sercom_get_default_pad+0x120>)
     6e8:	4298      	cmp	r0, r3
     6ea:	d04a      	beq.n	782 <_sercom_get_default_pad+0xb2>
     6ec:	4b41      	ldr	r3, [pc, #260]	; (7f4 <_sercom_get_default_pad+0x124>)
     6ee:	4298      	cmp	r0, r3
     6f0:	d058      	beq.n	7a4 <_sercom_get_default_pad+0xd4>
     6f2:	4b41      	ldr	r3, [pc, #260]	; (7f8 <_sercom_get_default_pad+0x128>)
     6f4:	4298      	cmp	r0, r3
     6f6:	d166      	bne.n	7c6 <_sercom_get_default_pad+0xf6>
     6f8:	e032      	b.n	760 <_sercom_get_default_pad+0x90>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     6fa:	2901      	cmp	r1, #1
     6fc:	d065      	beq.n	7ca <_sercom_get_default_pad+0xfa>
     6fe:	2900      	cmp	r1, #0
     700:	d004      	beq.n	70c <_sercom_get_default_pad+0x3c>
     702:	2902      	cmp	r1, #2
     704:	d006      	beq.n	714 <_sercom_get_default_pad+0x44>
     706:	2903      	cmp	r1, #3
     708:	d006      	beq.n	718 <_sercom_get_default_pad+0x48>
     70a:	e001      	b.n	710 <_sercom_get_default_pad+0x40>
     70c:	483b      	ldr	r0, [pc, #236]	; (7fc <_sercom_get_default_pad+0x12c>)
     70e:	e067      	b.n	7e0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     710:	2000      	movs	r0, #0
     712:	e065      	b.n	7e0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     714:	483a      	ldr	r0, [pc, #232]	; (800 <_sercom_get_default_pad+0x130>)
     716:	e063      	b.n	7e0 <_sercom_get_default_pad+0x110>
     718:	483a      	ldr	r0, [pc, #232]	; (804 <_sercom_get_default_pad+0x134>)
     71a:	e061      	b.n	7e0 <_sercom_get_default_pad+0x110>
     71c:	2901      	cmp	r1, #1
     71e:	d056      	beq.n	7ce <_sercom_get_default_pad+0xfe>
     720:	2900      	cmp	r1, #0
     722:	d004      	beq.n	72e <_sercom_get_default_pad+0x5e>
     724:	2902      	cmp	r1, #2
     726:	d006      	beq.n	736 <_sercom_get_default_pad+0x66>
     728:	2903      	cmp	r1, #3
     72a:	d006      	beq.n	73a <_sercom_get_default_pad+0x6a>
     72c:	e001      	b.n	732 <_sercom_get_default_pad+0x62>
     72e:	2003      	movs	r0, #3
     730:	e056      	b.n	7e0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     732:	2000      	movs	r0, #0
     734:	e054      	b.n	7e0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     736:	4834      	ldr	r0, [pc, #208]	; (808 <_sercom_get_default_pad+0x138>)
     738:	e052      	b.n	7e0 <_sercom_get_default_pad+0x110>
     73a:	4834      	ldr	r0, [pc, #208]	; (80c <_sercom_get_default_pad+0x13c>)
     73c:	e050      	b.n	7e0 <_sercom_get_default_pad+0x110>
     73e:	2901      	cmp	r1, #1
     740:	d047      	beq.n	7d2 <_sercom_get_default_pad+0x102>
     742:	2900      	cmp	r1, #0
     744:	d004      	beq.n	750 <_sercom_get_default_pad+0x80>
     746:	2902      	cmp	r1, #2
     748:	d006      	beq.n	758 <_sercom_get_default_pad+0x88>
     74a:	2903      	cmp	r1, #3
     74c:	d006      	beq.n	75c <_sercom_get_default_pad+0x8c>
     74e:	e001      	b.n	754 <_sercom_get_default_pad+0x84>
     750:	482f      	ldr	r0, [pc, #188]	; (810 <_sercom_get_default_pad+0x140>)
     752:	e045      	b.n	7e0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     754:	2000      	movs	r0, #0
     756:	e043      	b.n	7e0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     758:	482e      	ldr	r0, [pc, #184]	; (814 <_sercom_get_default_pad+0x144>)
     75a:	e041      	b.n	7e0 <_sercom_get_default_pad+0x110>
     75c:	482e      	ldr	r0, [pc, #184]	; (818 <_sercom_get_default_pad+0x148>)
     75e:	e03f      	b.n	7e0 <_sercom_get_default_pad+0x110>
     760:	2901      	cmp	r1, #1
     762:	d038      	beq.n	7d6 <_sercom_get_default_pad+0x106>
     764:	2900      	cmp	r1, #0
     766:	d004      	beq.n	772 <_sercom_get_default_pad+0xa2>
     768:	2902      	cmp	r1, #2
     76a:	d006      	beq.n	77a <_sercom_get_default_pad+0xaa>
     76c:	2903      	cmp	r1, #3
     76e:	d006      	beq.n	77e <_sercom_get_default_pad+0xae>
     770:	e001      	b.n	776 <_sercom_get_default_pad+0xa6>
     772:	482a      	ldr	r0, [pc, #168]	; (81c <_sercom_get_default_pad+0x14c>)
     774:	e034      	b.n	7e0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     776:	2000      	movs	r0, #0
     778:	e032      	b.n	7e0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     77a:	4829      	ldr	r0, [pc, #164]	; (820 <_sercom_get_default_pad+0x150>)
     77c:	e030      	b.n	7e0 <_sercom_get_default_pad+0x110>
     77e:	4829      	ldr	r0, [pc, #164]	; (824 <_sercom_get_default_pad+0x154>)
     780:	e02e      	b.n	7e0 <_sercom_get_default_pad+0x110>
     782:	2901      	cmp	r1, #1
     784:	d029      	beq.n	7da <_sercom_get_default_pad+0x10a>
     786:	2900      	cmp	r1, #0
     788:	d004      	beq.n	794 <_sercom_get_default_pad+0xc4>
     78a:	2902      	cmp	r1, #2
     78c:	d006      	beq.n	79c <_sercom_get_default_pad+0xcc>
     78e:	2903      	cmp	r1, #3
     790:	d006      	beq.n	7a0 <_sercom_get_default_pad+0xd0>
     792:	e001      	b.n	798 <_sercom_get_default_pad+0xc8>
     794:	4824      	ldr	r0, [pc, #144]	; (828 <_sercom_get_default_pad+0x158>)
     796:	e023      	b.n	7e0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     798:	2000      	movs	r0, #0
     79a:	e021      	b.n	7e0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     79c:	4823      	ldr	r0, [pc, #140]	; (82c <_sercom_get_default_pad+0x15c>)
     79e:	e01f      	b.n	7e0 <_sercom_get_default_pad+0x110>
     7a0:	4823      	ldr	r0, [pc, #140]	; (830 <_sercom_get_default_pad+0x160>)
     7a2:	e01d      	b.n	7e0 <_sercom_get_default_pad+0x110>
     7a4:	2901      	cmp	r1, #1
     7a6:	d01a      	beq.n	7de <_sercom_get_default_pad+0x10e>
     7a8:	2900      	cmp	r1, #0
     7aa:	d004      	beq.n	7b6 <_sercom_get_default_pad+0xe6>
     7ac:	2902      	cmp	r1, #2
     7ae:	d006      	beq.n	7be <_sercom_get_default_pad+0xee>
     7b0:	2903      	cmp	r1, #3
     7b2:	d006      	beq.n	7c2 <_sercom_get_default_pad+0xf2>
     7b4:	e001      	b.n	7ba <_sercom_get_default_pad+0xea>
     7b6:	481f      	ldr	r0, [pc, #124]	; (834 <_sercom_get_default_pad+0x164>)
     7b8:	e012      	b.n	7e0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     7ba:	2000      	movs	r0, #0
     7bc:	e010      	b.n	7e0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     7be:	481e      	ldr	r0, [pc, #120]	; (838 <_sercom_get_default_pad+0x168>)
     7c0:	e00e      	b.n	7e0 <_sercom_get_default_pad+0x110>
     7c2:	481e      	ldr	r0, [pc, #120]	; (83c <_sercom_get_default_pad+0x16c>)
     7c4:	e00c      	b.n	7e0 <_sercom_get_default_pad+0x110>
	}

	Assert(false);
	return 0;
     7c6:	2000      	movs	r0, #0
     7c8:	e00a      	b.n	7e0 <_sercom_get_default_pad+0x110>
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     7ca:	481d      	ldr	r0, [pc, #116]	; (840 <_sercom_get_default_pad+0x170>)
     7cc:	e008      	b.n	7e0 <_sercom_get_default_pad+0x110>
     7ce:	481d      	ldr	r0, [pc, #116]	; (844 <_sercom_get_default_pad+0x174>)
     7d0:	e006      	b.n	7e0 <_sercom_get_default_pad+0x110>
     7d2:	481d      	ldr	r0, [pc, #116]	; (848 <_sercom_get_default_pad+0x178>)
     7d4:	e004      	b.n	7e0 <_sercom_get_default_pad+0x110>
     7d6:	481d      	ldr	r0, [pc, #116]	; (84c <_sercom_get_default_pad+0x17c>)
     7d8:	e002      	b.n	7e0 <_sercom_get_default_pad+0x110>
     7da:	481d      	ldr	r0, [pc, #116]	; (850 <_sercom_get_default_pad+0x180>)
     7dc:	e000      	b.n	7e0 <_sercom_get_default_pad+0x110>
     7de:	481d      	ldr	r0, [pc, #116]	; (854 <_sercom_get_default_pad+0x184>)
	}

	Assert(false);
	return 0;
}
     7e0:	4770      	bx	lr
     7e2:	46c0      	nop			; (mov r8, r8)
     7e4:	42001000 	.word	0x42001000
     7e8:	42000800 	.word	0x42000800
     7ec:	42000c00 	.word	0x42000c00
     7f0:	42001800 	.word	0x42001800
     7f4:	42001c00 	.word	0x42001c00
     7f8:	42001400 	.word	0x42001400
     7fc:	00040003 	.word	0x00040003
     800:	00060003 	.word	0x00060003
     804:	00070003 	.word	0x00070003
     808:	001e0003 	.word	0x001e0003
     80c:	001f0003 	.word	0x001f0003
     810:	00080003 	.word	0x00080003
     814:	000a0003 	.word	0x000a0003
     818:	000b0003 	.word	0x000b0003
     81c:	00100003 	.word	0x00100003
     820:	00120003 	.word	0x00120003
     824:	00130003 	.word	0x00130003
     828:	000c0003 	.word	0x000c0003
     82c:	000e0003 	.word	0x000e0003
     830:	000f0003 	.word	0x000f0003
     834:	00160003 	.word	0x00160003
     838:	00180003 	.word	0x00180003
     83c:	00190003 	.word	0x00190003
     840:	00050003 	.word	0x00050003
     844:	00010003 	.word	0x00010003
     848:	00090003 	.word	0x00090003
     84c:	00110003 	.word	0x00110003
     850:	000d0003 	.word	0x000d0003
     854:	00170003 	.word	0x00170003

00000858 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler.
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     858:	b538      	push	{r3, r4, r5, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
     85a:	0080      	lsls	r0, r0, #2
     85c:	4b14      	ldr	r3, [pc, #80]	; (8b0 <_tc_interrupt_handler+0x58>)
     85e:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     860:	6823      	ldr	r3, [r4, #0]
     862:	68dd      	ldr	r5, [r3, #12]
     864:	0c2d      	lsrs	r5, r5, #16
     866:	7e23      	ldrb	r3, [r4, #24]
     868:	401d      	ands	r5, r3
     86a:	7e63      	ldrb	r3, [r4, #25]
     86c:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     86e:	07ea      	lsls	r2, r5, #31
     870:	d505      	bpl.n	87e <_tc_interrupt_handler+0x26>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     872:	1c20      	adds	r0, r4, #0
     874:	68a3      	ldr	r3, [r4, #8]
     876:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     878:	2301      	movs	r3, #1
     87a:	6822      	ldr	r2, [r4, #0]
     87c:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     87e:	07ab      	lsls	r3, r5, #30
     880:	d505      	bpl.n	88e <_tc_interrupt_handler+0x36>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
     882:	1c20      	adds	r0, r4, #0
     884:	68e2      	ldr	r2, [r4, #12]
     886:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     888:	2302      	movs	r3, #2
     88a:	6822      	ldr	r2, [r4, #0]
     88c:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     88e:	06eb      	lsls	r3, r5, #27
     890:	d505      	bpl.n	89e <_tc_interrupt_handler+0x46>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     892:	1c20      	adds	r0, r4, #0
     894:	6922      	ldr	r2, [r4, #16]
     896:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     898:	2310      	movs	r3, #16
     89a:	6822      	ldr	r2, [r4, #0]
     89c:	7393      	strb	r3, [r2, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     89e:	06ab      	lsls	r3, r5, #26
     8a0:	d505      	bpl.n	8ae <_tc_interrupt_handler+0x56>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     8a2:	1c20      	adds	r0, r4, #0
     8a4:	6962      	ldr	r2, [r4, #20]
     8a6:	4790      	blx	r2
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     8a8:	6823      	ldr	r3, [r4, #0]
     8aa:	2220      	movs	r2, #32
     8ac:	739a      	strb	r2, [r3, #14]
	}
}
     8ae:	bd38      	pop	{r3, r4, r5, pc}
     8b0:	20000958 	.word	0x20000958

000008b4 <TC0_Handler>:
		void TC##n##_Handler(void) \
		{ \
			_tc_interrupt_handler(m); \
		}

MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     8b4:	b508      	push	{r3, lr}
     8b6:	2000      	movs	r0, #0
     8b8:	4b01      	ldr	r3, [pc, #4]	; (8c0 <TC0_Handler+0xc>)
     8ba:	4798      	blx	r3
     8bc:	bd08      	pop	{r3, pc}
     8be:	46c0      	nop			; (mov r8, r8)
     8c0:	00000859 	.word	0x00000859

000008c4 <TC1_Handler>:
     8c4:	b508      	push	{r3, lr}
     8c6:	2001      	movs	r0, #1
     8c8:	4b01      	ldr	r3, [pc, #4]	; (8d0 <TC1_Handler+0xc>)
     8ca:	4798      	blx	r3
     8cc:	bd08      	pop	{r3, pc}
     8ce:	46c0      	nop			; (mov r8, r8)
     8d0:	00000859 	.word	0x00000859

000008d4 <TC2_Handler>:
     8d4:	b508      	push	{r3, lr}
     8d6:	2002      	movs	r0, #2
     8d8:	4b01      	ldr	r3, [pc, #4]	; (8e0 <TC2_Handler+0xc>)
     8da:	4798      	blx	r3
     8dc:	bd08      	pop	{r3, pc}
     8de:	46c0      	nop			; (mov r8, r8)
     8e0:	00000859 	.word	0x00000859

000008e4 <TC3_Handler>:
     8e4:	b508      	push	{r3, lr}
     8e6:	2003      	movs	r0, #3
     8e8:	4b01      	ldr	r3, [pc, #4]	; (8f0 <TC3_Handler+0xc>)
     8ea:	4798      	blx	r3
     8ec:	bd08      	pop	{r3, pc}
     8ee:	46c0      	nop			; (mov r8, r8)
     8f0:	00000859 	.word	0x00000859

000008f4 <TC4_Handler>:
     8f4:	b508      	push	{r3, lr}
     8f6:	2004      	movs	r0, #4
     8f8:	4b01      	ldr	r3, [pc, #4]	; (900 <TC4_Handler+0xc>)
     8fa:	4798      	blx	r3
     8fc:	bd08      	pop	{r3, pc}
     8fe:	46c0      	nop			; (mov r8, r8)
     900:	00000859 	.word	0x00000859

00000904 <TC5_Handler>:
     904:	b508      	push	{r3, lr}
     906:	2005      	movs	r0, #5
     908:	4b01      	ldr	r3, [pc, #4]	; (910 <TC5_Handler+0xc>)
     90a:	4798      	blx	r3
     90c:	bd08      	pop	{r3, pc}
     90e:	46c0      	nop			; (mov r8, r8)
     910:	00000859 	.word	0x00000859

00000914 <TC6_Handler>:
     914:	b508      	push	{r3, lr}
     916:	2006      	movs	r0, #6
     918:	4b01      	ldr	r3, [pc, #4]	; (920 <TC6_Handler+0xc>)
     91a:	4798      	blx	r3
     91c:	bd08      	pop	{r3, pc}
     91e:	46c0      	nop			; (mov r8, r8)
     920:	00000859 	.word	0x00000859

00000924 <TC7_Handler>:
     924:	b508      	push	{r3, lr}
     926:	2007      	movs	r0, #7
     928:	4b01      	ldr	r3, [pc, #4]	; (930 <TC7_Handler+0xc>)
     92a:	4798      	blx	r3
     92c:	bd08      	pop	{r3, pc}
     92e:	46c0      	nop			; (mov r8, r8)
     930:	00000859 	.word	0x00000859

00000934 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     934:	b5f0      	push	{r4, r5, r6, r7, lr}
     936:	465f      	mov	r7, fp
     938:	4656      	mov	r6, sl
     93a:	464d      	mov	r5, r9
     93c:	4644      	mov	r4, r8
     93e:	b4f0      	push	{r4, r5, r6, r7}
     940:	b08d      	sub	sp, #52	; 0x34
     942:	1c05      	adds	r5, r0, #0
     944:	1c0c      	adds	r4, r1, #0
     946:	1c16      	adds	r6, r2, #0
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     948:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     94a:	1c08      	adds	r0, r1, #0
     94c:	4b79      	ldr	r3, [pc, #484]	; (b34 <usart_init+0x200>)
     94e:	4798      	blx	r3
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     950:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     952:	2305      	movs	r3, #5

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     954:	07ca      	lsls	r2, r1, #31
     956:	d500      	bpl.n	95a <usart_init+0x26>
     958:	e0e3      	b.n	b22 <usart_init+0x1ee>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     95a:	6822      	ldr	r2, [r4, #0]
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
     95c:	231c      	movs	r3, #28
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
		/* The module is busy resetting itself */
		return STATUS_BUSY;
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     95e:	0797      	lsls	r7, r2, #30
     960:	d500      	bpl.n	964 <usart_init+0x30>
     962:	e0de      	b.n	b22 <usart_init+0x1ee>
     964:	4b74      	ldr	r3, [pc, #464]	; (b38 <usart_init+0x204>)
     966:	6a19      	ldr	r1, [r3, #32]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     968:	1c82      	adds	r2, r0, #2
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
	}

	/* Turn on module in PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     96a:	2701      	movs	r7, #1
     96c:	4097      	lsls	r7, r2
     96e:	1c3a      	adds	r2, r7, #0
     970:	430a      	orrs	r2, r1
     972:	621a      	str	r2, [r3, #32]

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
     974:	a90b      	add	r1, sp, #44	; 0x2c
     976:	7f73      	ldrb	r3, [r6, #29]
     978:	700b      	strb	r3, [r1, #0]
	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
	uint32_t pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     97a:	300d      	adds	r0, #13

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     97c:	b2c7      	uxtb	r7, r0
     97e:	1c38      	adds	r0, r7, #0
     980:	4b6e      	ldr	r3, [pc, #440]	; (b3c <usart_init+0x208>)
     982:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     984:	1c38      	adds	r0, r7, #0
     986:	4b6e      	ldr	r3, [pc, #440]	; (b40 <usart_init+0x20c>)
     988:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     98a:	7f70      	ldrb	r0, [r6, #29]
     98c:	2100      	movs	r1, #0
     98e:	4b6d      	ldr	r3, [pc, #436]	; (b44 <usart_init+0x210>)
     990:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
     992:	7af3      	ldrb	r3, [r6, #11]
     994:	716b      	strb	r3, [r5, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
     996:	7d33      	ldrb	r3, [r6, #20]
     998:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     99a:	7d73      	ldrb	r3, [r6, #21]
     99c:	71eb      	strb	r3, [r5, #7]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     99e:	682f      	ldr	r7, [r5, #0]
     9a0:	9703      	str	r7, [sp, #12]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     9a2:	1c38      	adds	r0, r7, #0
     9a4:	4b63      	ldr	r3, [pc, #396]	; (b34 <usart_init+0x200>)
     9a6:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     9a8:	300d      	adds	r0, #13

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
	uint32_t ctrlb = 0;
	uint16_t baud  = 0;
     9aa:	2200      	movs	r2, #0
     9ac:	466b      	mov	r3, sp
     9ae:	82da      	strh	r2, [r3, #22]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     9b0:	6831      	ldr	r1, [r6, #0]
     9b2:	4689      	mov	r9, r1
		(uint32_t)config->mux_setting |
     9b4:	68f2      	ldr	r2, [r6, #12]
     9b6:	4692      	mov	sl, r2
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     9b8:	7db3      	ldrb	r3, [r6, #22]
     9ba:	4698      	mov	r8, r3

	enum status_code status_code = STATUS_OK;

	/* Get baud value from mode and clock */
	switch (config->transfer_mode)
     9bc:	6873      	ldr	r3, [r6, #4]
     9be:	2b00      	cmp	r3, #0
     9c0:	d013      	beq.n	9ea <usart_init+0xb6>
     9c2:	2280      	movs	r2, #128	; 0x80
     9c4:	0552      	lsls	r2, r2, #21
     9c6:	4293      	cmp	r3, r2
     9c8:	d12b      	bne.n	a22 <usart_init+0xee>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
     9ca:	7df3      	ldrb	r3, [r6, #23]
     9cc:	2b00      	cmp	r3, #0
     9ce:	d001      	beq.n	9d4 <usart_init+0xa0>
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     9d0:	682a      	ldr	r2, [r5, #0]
     9d2:	e02a      	b.n	a2a <usart_init+0xf6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     9d4:	6937      	ldr	r7, [r6, #16]
     9d6:	b2c0      	uxtb	r0, r0
     9d8:	4b5b      	ldr	r3, [pc, #364]	; (b48 <usart_init+0x214>)
     9da:	4798      	blx	r3
     9dc:	1c01      	adds	r1, r0, #0
     9de:	1c38      	adds	r0, r7, #0
     9e0:	466a      	mov	r2, sp
     9e2:	3216      	adds	r2, #22
     9e4:	4b59      	ldr	r3, [pc, #356]	; (b4c <usart_init+0x218>)
     9e6:	4798      	blx	r3
     9e8:	e01c      	b.n	a24 <usart_init+0xf0>
			}

			break;

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
     9ea:	7df3      	ldrb	r3, [r6, #23]
     9ec:	2b00      	cmp	r3, #0
     9ee:	d009      	beq.n	a04 <usart_init+0xd0>
				status_code =
     9f0:	2310      	movs	r3, #16
     9f2:	9300      	str	r3, [sp, #0]
     9f4:	6930      	ldr	r0, [r6, #16]
     9f6:	69b1      	ldr	r1, [r6, #24]
     9f8:	466a      	mov	r2, sp
     9fa:	3216      	adds	r2, #22
     9fc:	2300      	movs	r3, #0
     9fe:	4f54      	ldr	r7, [pc, #336]	; (b50 <usart_init+0x21c>)
     a00:	47b8      	blx	r7
     a02:	e00f      	b.n	a24 <usart_init+0xf0>
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
     a04:	6931      	ldr	r1, [r6, #16]
     a06:	468b      	mov	fp, r1
     a08:	b2c0      	uxtb	r0, r0
     a0a:	4b4f      	ldr	r3, [pc, #316]	; (b48 <usart_init+0x214>)
     a0c:	4798      	blx	r3
     a0e:	1c01      	adds	r1, r0, #0
			if (config->use_external_clock) {
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							config->ext_clock_freq, &baud, mode, sample_num);
			} else {
				status_code =
     a10:	2310      	movs	r3, #16
     a12:	9300      	str	r3, [sp, #0]
     a14:	4658      	mov	r0, fp
     a16:	466a      	mov	r2, sp
     a18:	3216      	adds	r2, #22
     a1a:	2300      	movs	r3, #0
     a1c:	4f4c      	ldr	r7, [pc, #304]	; (b50 <usart_init+0x21c>)
     a1e:	47b8      	blx	r7
     a20:	e000      	b.n	a24 <usart_init+0xf0>
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);

	enum status_code status_code = STATUS_OK;
     a22:	2000      	movs	r0, #0
     a24:	1e03      	subs	r3, r0, #0

			break;
	}

	/* Check if calculating the baud rate failed */
	if (status_code != STATUS_OK) {
     a26:	d17c      	bne.n	b22 <usart_init+0x1ee>
     a28:	e7d2      	b.n	9d0 <usart_init+0x9c>

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     a2a:	6913      	ldr	r3, [r2, #16]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     a2c:	0418      	lsls	r0, r3, #16
     a2e:	d4fc      	bmi.n	a2a <usart_init+0xf6>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
     a30:	466b      	mov	r3, sp
     a32:	3316      	adds	r3, #22
     a34:	881b      	ldrh	r3, [r3, #0]
     a36:	9f03      	ldr	r7, [sp, #12]
     a38:	817b      	strh	r3, [r7, #10]
			break;
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
     a3a:	4651      	mov	r1, sl
     a3c:	4648      	mov	r0, r9
     a3e:	4301      	orrs	r1, r0
     a40:	6872      	ldr	r2, [r6, #4]
     a42:	4311      	orrs	r1, r2
		config->sample_rate |
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     a44:	4647      	mov	r7, r8
     a46:	077b      	lsls	r3, r7, #29

	/*Set baud val */
	usart_hw->BAUD.reg = baud;

	/* Set sample mode */
	ctrla |= config->transfer_mode;
     a48:	4319      	orrs	r1, r3

	if (config->use_external_clock == false) {
     a4a:	7df3      	ldrb	r3, [r6, #23]
     a4c:	2b00      	cmp	r3, #0
     a4e:	d101      	bne.n	a54 <usart_init+0x120>
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_INT_CLK;
     a50:	2304      	movs	r3, #4
     a52:	4319      	orrs	r1, r3
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     a54:	7d30      	ldrb	r0, [r6, #20]
     a56:	0440      	lsls	r0, r0, #17
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     a58:	7d73      	ldrb	r3, [r6, #21]
     a5a:	041b      	lsls	r3, r3, #16
	else {
		ctrla |= SERCOM_USART_CTRLA_MODE_USART_EXT_CLK;
	}

	/* Set stopbits, character size and enable transceivers */
	ctrlb = (uint32_t)config->stopbits | (uint32_t)config->character_size |
     a5c:	4318      	orrs	r0, r3
     a5e:	7af2      	ldrb	r2, [r6, #11]
     a60:	7ab3      	ldrb	r3, [r6, #10]
     a62:	4313      	orrs	r3, r2
     a64:	4318      	orrs	r0, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);

	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
     a66:	8933      	ldrh	r3, [r6, #8]
     a68:	2bff      	cmp	r3, #255	; 0xff
     a6a:	d003      	beq.n	a74 <usart_init+0x140>
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
			ctrla |= SERCOM_USART_CTRLA_FORM(0x5);
		}
#else
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     a6c:	2280      	movs	r2, #128	; 0x80
     a6e:	0452      	lsls	r2, r2, #17
     a70:	4311      	orrs	r1, r2
#endif
		ctrlb |= config->parity;
     a72:	4318      	orrs	r0, r3
		ctrla |= SERCOM_USART_CTRLA_FORM(0);
#endif
	}

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
     a74:	7f33      	ldrb	r3, [r6, #28]
     a76:	2b00      	cmp	r3, #0
     a78:	d103      	bne.n	a82 <usart_init+0x14e>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     a7a:	4b36      	ldr	r3, [pc, #216]	; (b54 <usart_init+0x220>)
     a7c:	681b      	ldr	r3, [r3, #0]
     a7e:	039a      	lsls	r2, r3, #14
     a80:	d501      	bpl.n	a86 <usart_init+0x152>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     a82:	2380      	movs	r3, #128	; 0x80
     a84:	4319      	orrs	r1, r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     a86:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     a88:	6913      	ldr	r3, [r2, #16]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     a8a:	041f      	lsls	r7, r3, #16
     a8c:	d4fc      	bmi.n	a88 <usart_init+0x154>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
     a8e:	9f03      	ldr	r7, [sp, #12]
     a90:	6078      	str	r0, [r7, #4]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     a92:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     a94:	6913      	ldr	r3, [r2, #16]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     a96:	0418      	lsls	r0, r3, #16
     a98:	d4fc      	bmi.n	a94 <usart_init+0x160>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
     a9a:	9f03      	ldr	r7, [sp, #12]
     a9c:	6039      	str	r1, [r7, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     a9e:	ab0a      	add	r3, sp, #40	; 0x28
     aa0:	2280      	movs	r2, #128	; 0x80
     aa2:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     aa4:	2200      	movs	r2, #0
     aa6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     aa8:	2101      	movs	r1, #1
     aaa:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
     aac:	70da      	strb	r2, [r3, #3]

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;

	uint32_t pad_pinmuxes[] = {
     aae:	6a30      	ldr	r0, [r6, #32]
     ab0:	9006      	str	r0, [sp, #24]
     ab2:	6a71      	ldr	r1, [r6, #36]	; 0x24
     ab4:	9107      	str	r1, [sp, #28]
     ab6:	6ab2      	ldr	r2, [r6, #40]	; 0x28
     ab8:	9208      	str	r2, [sp, #32]
     aba:	6af6      	ldr	r6, [r6, #44]	; 0x2c
     abc:	9609      	str	r6, [sp, #36]	; 0x24
     abe:	2700      	movs	r7, #0
		if (current_pinmux == PINMUX_DEFAULT) {
			current_pinmux = _sercom_get_default_pad(hw, pad);
		}

		if (current_pinmux != PINMUX_UNUSED) {
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     ac0:	1c1e      	adds	r6, r3, #0
     ac2:	b2f9      	uxtb	r1, r7
     ac4:	00bb      	lsls	r3, r7, #2
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
		uint32_t current_pinmux = pad_pinmuxes[pad];
     ac6:	aa06      	add	r2, sp, #24
     ac8:	5898      	ldr	r0, [r3, r2]

		if (current_pinmux == PINMUX_DEFAULT) {
     aca:	2800      	cmp	r0, #0
     acc:	d102      	bne.n	ad4 <usart_init+0x1a0>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     ace:	1c20      	adds	r0, r4, #0
     ad0:	4b21      	ldr	r3, [pc, #132]	; (b58 <usart_init+0x224>)
     ad2:	4798      	blx	r3
		}

		if (current_pinmux != PINMUX_UNUSED) {
     ad4:	1c41      	adds	r1, r0, #1
     ad6:	d005      	beq.n	ae4 <usart_init+0x1b0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     ad8:	7030      	strb	r0, [r6, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     ada:	0c00      	lsrs	r0, r0, #16
     adc:	b2c0      	uxtb	r0, r0
     ade:	1c31      	adds	r1, r6, #0
     ae0:	4a1e      	ldr	r2, [pc, #120]	; (b5c <usart_init+0x228>)
     ae2:	4790      	blx	r2
     ae4:	3701      	adds	r7, #1
			config->pinmux_pad0, config->pinmux_pad1,
			config->pinmux_pad2, config->pinmux_pad3
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
     ae6:	2f04      	cmp	r7, #4
     ae8:	d1eb      	bne.n	ac2 <usart_init+0x18e>
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
		module->callback[i]            = NULL;
     aea:	2300      	movs	r3, #0
     aec:	60ab      	str	r3, [r5, #8]
     aee:	60eb      	str	r3, [r5, #12]
     af0:	612b      	str	r3, [r5, #16]
	}

	module->tx_buffer_ptr              = NULL;
     af2:	61ab      	str	r3, [r5, #24]
	module->rx_buffer_ptr              = NULL;
     af4:	616b      	str	r3, [r5, #20]
	module->remaining_tx_buffer_length = 0x0000;
     af6:	2200      	movs	r2, #0
     af8:	83eb      	strh	r3, [r5, #30]
	module->remaining_rx_buffer_length = 0x0000;
     afa:	83ab      	strh	r3, [r5, #28]
	module->callback_reg_mask          = 0x00;
     afc:	2320      	movs	r3, #32
     afe:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     b00:	2321      	movs	r3, #33	; 0x21
     b02:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     b04:	2322      	movs	r3, #34	; 0x22
     b06:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     b08:	2323      	movs	r3, #35	; 0x23
     b0a:	54ea      	strb	r2, [r5, r3]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     b0c:	6828      	ldr	r0, [r5, #0]
     b0e:	4b09      	ldr	r3, [pc, #36]	; (b34 <usart_init+0x200>)
     b10:	4798      	blx	r3
     b12:	1c04      	adds	r4, r0, #0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     b14:	4912      	ldr	r1, [pc, #72]	; (b60 <usart_init+0x22c>)
     b16:	4b13      	ldr	r3, [pc, #76]	; (b64 <usart_init+0x230>)
     b18:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     b1a:	00a4      	lsls	r4, r4, #2
     b1c:	4b12      	ldr	r3, [pc, #72]	; (b68 <usart_init+0x234>)
     b1e:	50e5      	str	r5, [r4, r3]
#endif

	return status_code;
     b20:	2300      	movs	r3, #0
}
     b22:	1c18      	adds	r0, r3, #0
     b24:	b00d      	add	sp, #52	; 0x34
     b26:	bc3c      	pop	{r2, r3, r4, r5}
     b28:	4690      	mov	r8, r2
     b2a:	4699      	mov	r9, r3
     b2c:	46a2      	mov	sl, r4
     b2e:	46ab      	mov	fp, r5
     b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b32:	46c0      	nop			; (mov r8, r8)
     b34:	00000cf1 	.word	0x00000cf1
     b38:	40000400 	.word	0x40000400
     b3c:	00001361 	.word	0x00001361
     b40:	000012d1 	.word	0x000012d1
     b44:	00000681 	.word	0x00000681
     b48:	0000137d 	.word	0x0000137d
     b4c:	0000059d 	.word	0x0000059d
     b50:	000005c9 	.word	0x000005c9
     b54:	41002000 	.word	0x41002000
     b58:	000006d1 	.word	0x000006d1
     b5c:	0000143d 	.word	0x0000143d
     b60:	00000bb5 	.word	0x00000bb5
     b64:	00000d2d 	.word	0x00000d2d
     b68:	20000978 	.word	0x20000978

00000b6c <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     b6c:	1c93      	adds	r3, r2, #2
     b6e:	009b      	lsls	r3, r3, #2
     b70:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
     b72:	2301      	movs	r3, #1
     b74:	4093      	lsls	r3, r2
     b76:	1c1a      	adds	r2, r3, #0
     b78:	2320      	movs	r3, #32
     b7a:	5cc1      	ldrb	r1, [r0, r3]
     b7c:	430a      	orrs	r2, r1
     b7e:	54c2      	strb	r2, [r0, r3]
}
     b80:	4770      	bx	lr
     b82:	46c0      	nop			; (mov r8, r8)

00000b84 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
     b84:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     b86:	2317      	movs	r3, #23
		uint16_t length)
{
	/* Sanity check arguments */
	Assert(module);

	if (length == 0) {
     b88:	2a00      	cmp	r2, #0
     b8a:	d011      	beq.n	bb0 <usart_write_buffer_job+0x2c>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
     b8c:	69c4      	ldr	r4, [r0, #28]
     b8e:	0c24      	lsrs	r4, r4, #16
		return STATUS_BUSY;
     b90:	2305      	movs	r3, #5
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
     b92:	2c00      	cmp	r4, #0
     b94:	d10c      	bne.n	bb0 <usart_write_buffer_job+0x2c>
		return STATUS_BUSY;
	}

	/* Check that the receiver is enabled */
	if (!(module->transmitter_enabled)) {
     b96:	79c4      	ldrb	r4, [r0, #7]
		return STATUS_ERR_DENIED;
     b98:	231c      	movs	r3, #28
	if (module->remaining_tx_buffer_length > 0) {
		return STATUS_BUSY;
	}

	/* Check that the receiver is enabled */
	if (!(module->transmitter_enabled)) {
     b9a:	2c00      	cmp	r4, #0
     b9c:	d008      	beq.n	bb0 <usart_write_buffer_job+0x2c>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     b9e:	6803      	ldr	r3, [r0, #0]

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
     ba0:	83c2      	strh	r2, [r0, #30]
	module->tx_buffer_ptr              = tx_data;
     ba2:	6181      	str	r1, [r0, #24]
	module->tx_status                  = STATUS_BUSY;
     ba4:	2105      	movs	r1, #5
     ba6:	2223      	movs	r2, #35	; 0x23
     ba8:	5481      	strb	r1, [r0, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
     baa:	2201      	movs	r2, #1
     bac:	735a      	strb	r2, [r3, #13]
	}

	/* Issue internal asynchronous write */
	_usart_write_buffer(module, tx_data, length);

	return STATUS_OK;
     bae:	2300      	movs	r3, #0
}
     bb0:	1c18      	adds	r0, r3, #0
     bb2:	bd10      	pop	{r4, pc}

00000bb4 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     bb6:	0080      	lsls	r0, r0, #2
     bb8:	4b4b      	ldr	r3, [pc, #300]	; (ce8 <_usart_interrupt_handler+0x134>)
     bba:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     bbc:	682c      	ldr	r4, [r5, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     bbe:	6923      	ldr	r3, [r4, #16]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
     bc0:	0419      	lsls	r1, r3, #16
     bc2:	d4fc      	bmi.n	bbe <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     bc4:	68e6      	ldr	r6, [r4, #12]
     bc6:	0c36      	lsrs	r6, r6, #16
	interrupt_status &= usart_hw->INTENSET.reg;
     bc8:	68e3      	ldr	r3, [r4, #12]
     bca:	041b      	lsls	r3, r3, #16
     bcc:	0e1b      	lsrs	r3, r3, #24
     bce:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
			module->callback_enable_mask;
     bd0:	2321      	movs	r3, #33	; 0x21
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
	interrupt_status &= usart_hw->INTENSET.reg;
	callback_status = module->callback_reg_mask &
     bd2:	5ceb      	ldrb	r3, [r5, r3]
     bd4:	2220      	movs	r2, #32
     bd6:	5caa      	ldrb	r2, [r5, r2]
     bd8:	1c17      	adds	r7, r2, #0
     bda:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     bdc:	07f2      	lsls	r2, r6, #31
     bde:	d520      	bpl.n	c22 <_usart_interrupt_handler+0x6e>
		if (module->remaining_tx_buffer_length) {
     be0:	69eb      	ldr	r3, [r5, #28]
     be2:	0c1b      	lsrs	r3, r3, #16
     be4:	d01b      	beq.n	c1e <_usart_interrupt_handler+0x6a>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     be6:	69ab      	ldr	r3, [r5, #24]
     be8:	781a      	ldrb	r2, [r3, #0]
     bea:	b2d2      	uxtb	r2, r2
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     bec:	1c59      	adds	r1, r3, #1
     bee:	61a9      	str	r1, [r5, #24]

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     bf0:	7969      	ldrb	r1, [r5, #5]
     bf2:	2901      	cmp	r1, #1
     bf4:	d104      	bne.n	c00 <_usart_interrupt_handler+0x4c>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     bf6:	7859      	ldrb	r1, [r3, #1]
     bf8:	0209      	lsls	r1, r1, #8
     bfa:	430a      	orrs	r2, r1
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
     bfc:	3302      	adds	r3, #2
     bfe:	61ab      	str	r3, [r5, #24]
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     c00:	05d3      	lsls	r3, r2, #23
     c02:	0ddb      	lsrs	r3, r3, #23
     c04:	8323      	strh	r3, [r4, #24]

			if (--(module->remaining_tx_buffer_length) == 0) {
     c06:	69eb      	ldr	r3, [r5, #28]
     c08:	0c1b      	lsrs	r3, r3, #16
     c0a:	3b01      	subs	r3, #1
     c0c:	b29b      	uxth	r3, r3
     c0e:	83eb      	strh	r3, [r5, #30]
     c10:	2b00      	cmp	r3, #0
     c12:	d106      	bne.n	c22 <_usart_interrupt_handler+0x6e>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     c14:	2301      	movs	r3, #1
     c16:	7323      	strb	r3, [r4, #12]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     c18:	2302      	movs	r3, #2
     c1a:	7363      	strb	r3, [r4, #13]
     c1c:	e001      	b.n	c22 <_usart_interrupt_handler+0x6e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     c1e:	2301      	movs	r3, #1
     c20:	7323      	strb	r3, [r4, #12]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     c22:	07b3      	lsls	r3, r6, #30
     c24:	d509      	bpl.n	c3a <_usart_interrupt_handler+0x86>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     c26:	2302      	movs	r3, #2
     c28:	7323      	strb	r3, [r4, #12]
		module->tx_status = STATUS_OK;
     c2a:	2200      	movs	r2, #0
     c2c:	2323      	movs	r3, #35	; 0x23
     c2e:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     c30:	07f9      	lsls	r1, r7, #31
     c32:	d502      	bpl.n	c3a <_usart_interrupt_handler+0x86>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     c34:	1c28      	adds	r0, r5, #0
     c36:	68aa      	ldr	r2, [r5, #8]
     c38:	4790      	blx	r2

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     c3a:	0773      	lsls	r3, r6, #29
     c3c:	d552      	bpl.n	ce4 <_usart_interrupt_handler+0x130>

		if (module->remaining_rx_buffer_length) {
     c3e:	69eb      	ldr	r3, [r5, #28]
     c40:	b29b      	uxth	r3, r3
     c42:	2b00      	cmp	r3, #0
     c44:	d04c      	beq.n	ce0 <_usart_interrupt_handler+0x12c>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     c46:	6923      	ldr	r3, [r4, #16]
     c48:	b2db      	uxtb	r3, r3

			/* Check if an error has occurred during the receiving */
			if (error_code) {
     c4a:	0759      	lsls	r1, r3, #29
     c4c:	d025      	beq.n	c9a <_usart_interrupt_handler+0xe6>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     c4e:	079a      	lsls	r2, r3, #30
     c50:	d508      	bpl.n	c64 <_usart_interrupt_handler+0xb0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     c52:	221a      	movs	r2, #26
     c54:	2322      	movs	r3, #34	; 0x22
     c56:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_FERR;
     c58:	6922      	ldr	r2, [r4, #16]
     c5a:	b292      	uxth	r2, r2
     c5c:	2302      	movs	r3, #2
     c5e:	4313      	orrs	r3, r2
     c60:	8223      	strh	r3, [r4, #16]
     c62:	e014      	b.n	c8e <_usart_interrupt_handler+0xda>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     c64:	0759      	lsls	r1, r3, #29
     c66:	d508      	bpl.n	c7a <_usart_interrupt_handler+0xc6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
     c68:	221e      	movs	r2, #30
     c6a:	2322      	movs	r3, #34	; 0x22
     c6c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_BUFOVF;
     c6e:	6922      	ldr	r2, [r4, #16]
     c70:	b292      	uxth	r2, r2
     c72:	2304      	movs	r3, #4
     c74:	4313      	orrs	r3, r2
     c76:	8223      	strh	r3, [r4, #16]
     c78:	e009      	b.n	c8e <_usart_interrupt_handler+0xda>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     c7a:	07da      	lsls	r2, r3, #31
     c7c:	d507      	bpl.n	c8e <_usart_interrupt_handler+0xda>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
     c7e:	2213      	movs	r2, #19
     c80:	2322      	movs	r3, #34	; 0x22
     c82:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_PERR;
     c84:	6922      	ldr	r2, [r4, #16]
     c86:	b292      	uxth	r2, r2
     c88:	2301      	movs	r3, #1
     c8a:	4313      	orrs	r3, r2
     c8c:	8223      	strh	r3, [r4, #16]
					usart_hw->STATUS.reg |= SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     c8e:	077b      	lsls	r3, r7, #29
     c90:	d528      	bpl.n	ce4 <_usart_interrupt_handler+0x130>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     c92:	692b      	ldr	r3, [r5, #16]
     c94:	1c28      	adds	r0, r5, #0
     c96:	4798      	blx	r3
     c98:	e024      	b.n	ce4 <_usart_interrupt_handler+0x130>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     c9a:	69a2      	ldr	r2, [r4, #24]
     c9c:	05d2      	lsls	r2, r2, #23
     c9e:	0dd2      	lsrs	r2, r2, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     ca0:	b2d3      	uxtb	r3, r2
     ca2:	6969      	ldr	r1, [r5, #20]
     ca4:	700b      	strb	r3, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     ca6:	696b      	ldr	r3, [r5, #20]
     ca8:	1c59      	adds	r1, r3, #1
     caa:	6169      	str	r1, [r5, #20]

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     cac:	7969      	ldrb	r1, [r5, #5]
     cae:	2901      	cmp	r1, #1
     cb0:	d104      	bne.n	cbc <_usart_interrupt_handler+0x108>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
     cb2:	0a12      	lsrs	r2, r2, #8
     cb4:	705a      	strb	r2, [r3, #1]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
     cb6:	696b      	ldr	r3, [r5, #20]
     cb8:	3301      	adds	r3, #1
     cba:	616b      	str	r3, [r5, #20]
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     cbc:	69eb      	ldr	r3, [r5, #28]
     cbe:	b29b      	uxth	r3, r3
     cc0:	3b01      	subs	r3, #1
     cc2:	b29b      	uxth	r3, r3
     cc4:	83ab      	strh	r3, [r5, #28]
     cc6:	2b00      	cmp	r3, #0
     cc8:	d10c      	bne.n	ce4 <_usart_interrupt_handler+0x130>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     cca:	2304      	movs	r3, #4
     ccc:	7323      	strb	r3, [r4, #12]
					module->rx_status = STATUS_OK;
     cce:	2200      	movs	r2, #0
     cd0:	2322      	movs	r3, #34	; 0x22
     cd2:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     cd4:	07ba      	lsls	r2, r7, #30
     cd6:	d505      	bpl.n	ce4 <_usart_interrupt_handler+0x130>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     cd8:	68eb      	ldr	r3, [r5, #12]
     cda:	1c28      	adds	r0, r5, #0
     cdc:	4798      	blx	r3
     cde:	e001      	b.n	ce4 <_usart_interrupt_handler+0x130>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     ce0:	2304      	movs	r3, #4
     ce2:	7323      	strb	r3, [r4, #12]
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     ce6:	46c0      	nop			; (mov r8, r8)
     ce8:	20000978 	.word	0x20000978

00000cec <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     cec:	4770      	bx	lr
     cee:	46c0      	nop			; (mov r8, r8)

00000cf0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     cf0:	b570      	push	{r4, r5, r6, lr}
     cf2:	b086      	sub	sp, #24
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     cf4:	4a0c      	ldr	r2, [pc, #48]	; (d28 <_sercom_get_sercom_inst_index+0x38>)
     cf6:	466b      	mov	r3, sp
     cf8:	ca70      	ldmia	r2!, {r4, r5, r6}
     cfa:	c370      	stmia	r3!, {r4, r5, r6}
     cfc:	ca32      	ldmia	r2!, {r1, r4, r5}
     cfe:	c332      	stmia	r3!, {r1, r4, r5}

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     d00:	9e00      	ldr	r6, [sp, #0]
     d02:	4286      	cmp	r6, r0
     d04:	d006      	beq.n	d14 <_sercom_get_sercom_inst_index+0x24>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     d06:	2301      	movs	r3, #1
     d08:	009a      	lsls	r2, r3, #2
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     d0a:	4669      	mov	r1, sp
     d0c:	5852      	ldr	r2, [r2, r1]
     d0e:	4282      	cmp	r2, r0
     d10:	d103      	bne.n	d1a <_sercom_get_sercom_inst_index+0x2a>
     d12:	e000      	b.n	d16 <_sercom_get_sercom_inst_index+0x26>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     d14:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
			return i;
     d16:	b2d8      	uxtb	r0, r3
     d18:	e003      	b.n	d22 <_sercom_get_sercom_inst_index+0x32>
{
	/* Save all available SERCOM instances for compare. */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;

	/* Find index for sercom instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     d1a:	3301      	adds	r3, #1
     d1c:	2b06      	cmp	r3, #6
     d1e:	d1f3      	bne.n	d08 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
     d20:	2000      	movs	r0, #0
}
     d22:	b006      	add	sp, #24
     d24:	bd70      	pop	{r4, r5, r6, pc}
     d26:	46c0      	nop			; (mov r8, r8)
     d28:	000079d0 	.word	0x000079d0

00000d2c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
     d2e:	4b0a      	ldr	r3, [pc, #40]	; (d58 <_sercom_set_handler+0x2c>)
     d30:	781b      	ldrb	r3, [r3, #0]
     d32:	2b00      	cmp	r3, #0
     d34:	d10c      	bne.n	d50 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     d36:	4f09      	ldr	r7, [pc, #36]	; (d5c <_sercom_set_handler+0x30>)
     d38:	4e09      	ldr	r6, [pc, #36]	; (d60 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     d3a:	4d0a      	ldr	r5, [pc, #40]	; (d64 <_sercom_set_handler+0x38>)
     d3c:	2400      	movs	r4, #0
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     d3e:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     d40:	195a      	adds	r2, r3, r5
     d42:	6014      	str	r4, [r2, #0]
     d44:	3304      	adds	r3, #4
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
	/* Initialize handlers with default handler and device instances with 0. */
	if (_handler_table_initialized == false) {
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     d46:	2b18      	cmp	r3, #24
     d48:	d1f9      	bne.n	d3e <_sercom_set_handler+0x12>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
		}

		_handler_table_initialized = true;
     d4a:	2201      	movs	r2, #1
     d4c:	4b02      	ldr	r3, [pc, #8]	; (d58 <_sercom_set_handler+0x2c>)
     d4e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler. */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     d50:	0080      	lsls	r0, r0, #2
     d52:	4b02      	ldr	r3, [pc, #8]	; (d5c <_sercom_set_handler+0x30>)
     d54:	50c1      	str	r1, [r0, r3]
}
     d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d58:	200008e4 	.word	0x200008e4
     d5c:	200008e8 	.word	0x200008e8
     d60:	00000ced 	.word	0x00000ced
     d64:	20000978 	.word	0x20000978

00000d68 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     d68:	b510      	push	{r4, lr}
     d6a:	b082      	sub	sp, #8
     d6c:	1c04      	adds	r4, r0, #0
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     d6e:	4668      	mov	r0, sp
     d70:	4905      	ldr	r1, [pc, #20]	; (d88 <_sercom_get_interrupt_vector+0x20>)
     d72:	3118      	adds	r1, #24
     d74:	2206      	movs	r2, #6
     d76:	4b05      	ldr	r3, [pc, #20]	; (d8c <_sercom_get_interrupt_vector+0x24>)
     d78:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     d7a:	1c20      	adds	r0, r4, #0
     d7c:	4b04      	ldr	r3, [pc, #16]	; (d90 <_sercom_get_interrupt_vector+0x28>)
     d7e:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     d80:	466b      	mov	r3, sp
     d82:	5618      	ldrsb	r0, [r3, r0]
}
     d84:	b002      	add	sp, #8
     d86:	bd10      	pop	{r4, pc}
     d88:	000079d0 	.word	0x000079d0
     d8c:	000021dd 	.word	0x000021dd
     d90:	00000cf1 	.word	0x00000cf1

00000d94 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     d94:	b508      	push	{r3, lr}
     d96:	4b02      	ldr	r3, [pc, #8]	; (da0 <SERCOM0_Handler+0xc>)
     d98:	681b      	ldr	r3, [r3, #0]
     d9a:	2000      	movs	r0, #0
     d9c:	4798      	blx	r3
     d9e:	bd08      	pop	{r3, pc}
     da0:	200008e8 	.word	0x200008e8

00000da4 <SERCOM1_Handler>:
     da4:	b508      	push	{r3, lr}
     da6:	4b02      	ldr	r3, [pc, #8]	; (db0 <SERCOM1_Handler+0xc>)
     da8:	685b      	ldr	r3, [r3, #4]
     daa:	2001      	movs	r0, #1
     dac:	4798      	blx	r3
     dae:	bd08      	pop	{r3, pc}
     db0:	200008e8 	.word	0x200008e8

00000db4 <SERCOM2_Handler>:
     db4:	b508      	push	{r3, lr}
     db6:	4b02      	ldr	r3, [pc, #8]	; (dc0 <SERCOM2_Handler+0xc>)
     db8:	689b      	ldr	r3, [r3, #8]
     dba:	2002      	movs	r0, #2
     dbc:	4798      	blx	r3
     dbe:	bd08      	pop	{r3, pc}
     dc0:	200008e8 	.word	0x200008e8

00000dc4 <SERCOM3_Handler>:
     dc4:	b508      	push	{r3, lr}
     dc6:	4b02      	ldr	r3, [pc, #8]	; (dd0 <SERCOM3_Handler+0xc>)
     dc8:	68db      	ldr	r3, [r3, #12]
     dca:	2003      	movs	r0, #3
     dcc:	4798      	blx	r3
     dce:	bd08      	pop	{r3, pc}
     dd0:	200008e8 	.word	0x200008e8

00000dd4 <SERCOM4_Handler>:
     dd4:	b508      	push	{r3, lr}
     dd6:	4b02      	ldr	r3, [pc, #8]	; (de0 <SERCOM4_Handler+0xc>)
     dd8:	691b      	ldr	r3, [r3, #16]
     dda:	2004      	movs	r0, #4
     ddc:	4798      	blx	r3
     dde:	bd08      	pop	{r3, pc}
     de0:	200008e8 	.word	0x200008e8

00000de4 <SERCOM5_Handler>:
     de4:	b508      	push	{r3, lr}
     de6:	4b02      	ldr	r3, [pc, #8]	; (df0 <SERCOM5_Handler+0xc>)
     de8:	695b      	ldr	r3, [r3, #20]
     dea:	2005      	movs	r0, #5
     dec:	4798      	blx	r3
     dee:	bd08      	pop	{r3, pc}
     df0:	200008e8 	.word	0x200008e8

00000df4 <ADC_Handler>:
	}
}

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
     df4:	b538      	push	{r3, r4, r5, lr}

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
	struct adc_module *module = _adc_instances[instance];
     df6:	4b29      	ldr	r3, [pc, #164]	; (e9c <ADC_Handler+0xa8>)
     df8:	681c      	ldr	r4, [r3, #0]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;
     dfa:	6823      	ldr	r3, [r4, #0]
     dfc:	699d      	ldr	r5, [r3, #24]
     dfe:	b2ed      	uxtb	r5, r5

	if (flags & ADC_INTFLAG_RESRDY) {
     e00:	07e9      	lsls	r1, r5, #31
     e02:	d52e      	bpl.n	e62 <ADC_Handler+0x6e>
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
     e04:	7ee2      	ldrb	r2, [r4, #27]
     e06:	07d1      	lsls	r1, r2, #31
     e08:	d52b      	bpl.n	e62 <ADC_Handler+0x6e>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
     e0a:	7ea2      	ldrb	r2, [r4, #26]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg;

	if (flags & ADC_INTFLAG_RESRDY) {
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER)) &&
     e0c:	07d1      	lsls	r1, r2, #31
     e0e:	d528      	bpl.n	e62 <ADC_Handler+0x6e>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_READ_BUFFER))) {
			/* clear interrupt flag */
			module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     e10:	2201      	movs	r2, #1
     e12:	761a      	strb	r2, [r3, #24]

			/* store ADC result in job buffer */
			*(module->job_buffer++) = module->hw->RESULT.reg;
     e14:	6963      	ldr	r3, [r4, #20]
     e16:	1c9a      	adds	r2, r3, #2
     e18:	6162      	str	r2, [r4, #20]
     e1a:	6822      	ldr	r2, [r4, #0]
     e1c:	6992      	ldr	r2, [r2, #24]
     e1e:	0c12      	lsrs	r2, r2, #16
     e20:	801a      	strh	r2, [r3, #0]

			if (--module->remaining_conversions > 0) {
     e22:	69a3      	ldr	r3, [r4, #24]
     e24:	b29b      	uxth	r3, r3
     e26:	3b01      	subs	r3, #1
     e28:	b29b      	uxth	r3, r3
     e2a:	8323      	strh	r3, [r4, #24]
     e2c:	2b00      	cmp	r3, #0
     e2e:	d00c      	beq.n	e4a <ADC_Handler+0x56>
				if (module->software_trigger == true) {
     e30:	7f63      	ldrb	r3, [r4, #29]
     e32:	2b00      	cmp	r3, #0
     e34:	d015      	beq.n	e62 <ADC_Handler+0x6e>
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
     e36:	6823      	ldr	r3, [r4, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
     e38:	699a      	ldr	r2, [r3, #24]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
     e3a:	0411      	lsls	r1, r2, #16
     e3c:	d4fc      	bmi.n	e38 <ADC_Handler+0x44>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     e3e:	68d9      	ldr	r1, [r3, #12]
     e40:	b2c9      	uxtb	r1, r1
     e42:	2202      	movs	r2, #2
     e44:	430a      	orrs	r2, r1
     e46:	731a      	strb	r2, [r3, #12]
     e48:	e00b      	b.n	e62 <ADC_Handler+0x6e>
					adc_start_conversion(module);
				}
			} else {
				if (module->job_status == STATUS_BUSY) {
     e4a:	69e3      	ldr	r3, [r4, #28]
     e4c:	b2db      	uxtb	r3, r3
     e4e:	2b05      	cmp	r3, #5
     e50:	d107      	bne.n	e62 <ADC_Handler+0x6e>
					/* job is complete. update status,disable interrupt
					 *and call callback */
					module->job_status = STATUS_OK;
     e52:	2300      	movs	r3, #0
     e54:	7723      	strb	r3, [r4, #28]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     e56:	2301      	movs	r3, #1
     e58:	6822      	ldr	r2, [r4, #0]
     e5a:	7593      	strb	r3, [r2, #22]
					adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);

					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     e5c:	1c20      	adds	r0, r4, #0
     e5e:	68a3      	ldr	r3, [r4, #8]
     e60:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
     e62:	0769      	lsls	r1, r5, #29
     e64:	d50b      	bpl.n	e7e <ADC_Handler+0x8a>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     e66:	2304      	movs	r3, #4
     e68:	6822      	ldr	r2, [r4, #0]
     e6a:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     e6c:	7ee3      	ldrb	r3, [r4, #27]
     e6e:	0799      	lsls	r1, r3, #30
     e70:	d505      	bpl.n	e7e <ADC_Handler+0x8a>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
     e72:	7ea3      	ldrb	r3, [r4, #26]
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     e74:	079a      	lsls	r2, r3, #30
     e76:	d502      	bpl.n	e7e <ADC_Handler+0x8a>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     e78:	1c20      	adds	r0, r4, #0
     e7a:	68e3      	ldr	r3, [r4, #12]
     e7c:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
     e7e:	07a9      	lsls	r1, r5, #30
     e80:	d50b      	bpl.n	e9a <ADC_Handler+0xa6>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     e82:	2302      	movs	r3, #2
     e84:	6822      	ldr	r2, [r4, #0]
     e86:	7613      	strb	r3, [r2, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     e88:	7ee3      	ldrb	r3, [r4, #27]
     e8a:	0759      	lsls	r1, r3, #29
     e8c:	d505      	bpl.n	e9a <ADC_Handler+0xa6>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
     e8e:	7ea3      	ldrb	r3, [r4, #26]

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     e90:	075a      	lsls	r2, r3, #29
     e92:	d502      	bpl.n	e9a <ADC_Handler+0xa6>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
			(module->callback[ADC_CALLBACK_ERROR])(module);
     e94:	6923      	ldr	r3, [r4, #16]
     e96:	1c20      	adds	r0, r4, #0
     e98:	4798      	blx	r3

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
	_adc_interrupt_handler(0);
}
     e9a:	bd38      	pop	{r3, r4, r5, pc}
     e9c:	20000990 	.word	0x20000990

00000ea0 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     ea0:	4b0c      	ldr	r3, [pc, #48]	; (ed4 <cpu_irq_enter_critical+0x34>)
     ea2:	681b      	ldr	r3, [r3, #0]
     ea4:	2b00      	cmp	r3, #0
     ea6:	d110      	bne.n	eca <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     ea8:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     eac:	2b00      	cmp	r3, #0
     eae:	d109      	bne.n	ec4 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
     eb0:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     eb2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     eb6:	2200      	movs	r2, #0
     eb8:	4b07      	ldr	r3, [pc, #28]	; (ed8 <cpu_irq_enter_critical+0x38>)
     eba:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     ebc:	2201      	movs	r2, #1
     ebe:	4b07      	ldr	r3, [pc, #28]	; (edc <cpu_irq_enter_critical+0x3c>)
     ec0:	701a      	strb	r2, [r3, #0]
     ec2:	e002      	b.n	eca <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     ec4:	2200      	movs	r2, #0
     ec6:	4b05      	ldr	r3, [pc, #20]	; (edc <cpu_irq_enter_critical+0x3c>)
     ec8:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     eca:	4b02      	ldr	r3, [pc, #8]	; (ed4 <cpu_irq_enter_critical+0x34>)
     ecc:	681a      	ldr	r2, [r3, #0]
     ece:	3201      	adds	r2, #1
     ed0:	601a      	str	r2, [r3, #0]
}
     ed2:	4770      	bx	lr
     ed4:	20000900 	.word	0x20000900
     ed8:	20000000 	.word	0x20000000
     edc:	20000904 	.word	0x20000904

00000ee0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     ee0:	4b08      	ldr	r3, [pc, #32]	; (f04 <cpu_irq_leave_critical+0x24>)
     ee2:	681a      	ldr	r2, [r3, #0]
     ee4:	3a01      	subs	r2, #1
     ee6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     ee8:	681b      	ldr	r3, [r3, #0]
     eea:	2b00      	cmp	r3, #0
     eec:	d109      	bne.n	f02 <cpu_irq_leave_critical+0x22>
     eee:	4b06      	ldr	r3, [pc, #24]	; (f08 <cpu_irq_leave_critical+0x28>)
     ef0:	781b      	ldrb	r3, [r3, #0]
     ef2:	2b00      	cmp	r3, #0
     ef4:	d005      	beq.n	f02 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     ef6:	2201      	movs	r2, #1
     ef8:	4b04      	ldr	r3, [pc, #16]	; (f0c <cpu_irq_leave_critical+0x2c>)
     efa:	701a      	strb	r2, [r3, #0]
     efc:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
     f00:	b662      	cpsie	i
	}
}
     f02:	4770      	bx	lr
     f04:	20000900 	.word	0x20000900
     f08:	20000904 	.word	0x20000904
     f0c:	20000000 	.word	0x20000000

00000f10 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     f10:	b5f0      	push	{r4, r5, r6, r7, lr}
     f12:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     f14:	ac01      	add	r4, sp, #4
     f16:	2501      	movs	r5, #1
     f18:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     f1a:	2700      	movs	r7, #0
     f1c:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     f1e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     f20:	200e      	movs	r0, #14
     f22:	1c21      	adds	r1, r4, #0
     f24:	4e06      	ldr	r6, [pc, #24]	; (f40 <system_board_init+0x30>)
     f26:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     f28:	2280      	movs	r2, #128	; 0x80
     f2a:	01d2      	lsls	r2, r2, #7
     f2c:	4b05      	ldr	r3, [pc, #20]	; (f44 <system_board_init+0x34>)
     f2e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     f30:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     f32:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     f34:	200f      	movs	r0, #15
     f36:	1c21      	adds	r1, r4, #0
     f38:	47b0      	blx	r6

	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
	
#endif
}
     f3a:	b003      	add	sp, #12
     f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f3e:	46c0      	nop			; (mov r8, r8)
     f40:	00000f49 	.word	0x00000f49
     f44:	41004400 	.word	0x41004400

00000f48 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin.
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     f48:	b500      	push	{lr}
     f4a:	b083      	sub	sp, #12
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     f4c:	ab01      	add	r3, sp, #4
     f4e:	2280      	movs	r2, #128	; 0x80
     f50:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     f52:	780a      	ldrb	r2, [r1, #0]
     f54:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     f56:	784a      	ldrb	r2, [r1, #1]
     f58:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     f5a:	788a      	ldrb	r2, [r1, #2]
     f5c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     f5e:	1c19      	adds	r1, r3, #0
     f60:	4b01      	ldr	r3, [pc, #4]	; (f68 <port_pin_set_config+0x20>)
     f62:	4798      	blx	r3
}
     f64:	b003      	add	sp, #12
     f66:	bd00      	pop	{pc}
     f68:	0000143d 	.word	0x0000143d

00000f6c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     f6c:	b508      	push	{r3, lr}
	switch (clock_source) {
     f6e:	2807      	cmp	r0, #7
     f70:	d82b      	bhi.n	fca <system_clock_source_get_hz+0x5e>
     f72:	0080      	lsls	r0, r0, #2
     f74:	4b17      	ldr	r3, [pc, #92]	; (fd4 <system_clock_source_get_hz+0x68>)
     f76:	581b      	ldr	r3, [r3, r0]
     f78:	469f      	mov	pc, r3

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
     f7a:	2080      	movs	r0, #128	; 0x80
     f7c:	0200      	lsls	r0, r0, #8
     f7e:	e027      	b.n	fd0 <system_clock_source_get_hz+0x64>
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
     f80:	4b15      	ldr	r3, [pc, #84]	; (fd8 <system_clock_source_get_hz+0x6c>)
     f82:	68d8      	ldr	r0, [r3, #12]
     f84:	e024      	b.n	fd0 <system_clock_source_get_hz+0x64>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     f86:	4b15      	ldr	r3, [pc, #84]	; (fdc <system_clock_source_get_hz+0x70>)
     f88:	6a18      	ldr	r0, [r3, #32]
     f8a:	0580      	lsls	r0, r0, #22
     f8c:	0f80      	lsrs	r0, r0, #30
     f8e:	4b14      	ldr	r3, [pc, #80]	; (fe0 <system_clock_source_get_hz+0x74>)
     f90:	40c3      	lsrs	r3, r0
     f92:	1c18      	adds	r0, r3, #0
     f94:	e01c      	b.n	fd0 <system_clock_source_get_hz+0x64>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
     f96:	4b10      	ldr	r3, [pc, #64]	; (fd8 <system_clock_source_get_hz+0x6c>)
     f98:	6918      	ldr	r0, [r3, #16]
     f9a:	e019      	b.n	fd0 <system_clock_source_get_hz+0x64>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     f9c:	4b0e      	ldr	r3, [pc, #56]	; (fd8 <system_clock_source_get_hz+0x6c>)
     f9e:	681b      	ldr	r3, [r3, #0]
     fa0:	2002      	movs	r0, #2
     fa2:	4018      	ands	r0, r3
     fa4:	d014      	beq.n	fd0 <system_clock_source_get_hz+0x64>
 * \internal
 * \brief Wait for sync to the DFLL control registers
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     fa6:	490d      	ldr	r1, [pc, #52]	; (fdc <system_clock_source_get_hz+0x70>)
     fa8:	2210      	movs	r2, #16
     faa:	68cb      	ldr	r3, [r1, #12]
     fac:	421a      	tst	r2, r3
     fae:	d0fc      	beq.n	faa <system_clock_source_get_hz+0x3e>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
     fb0:	4b09      	ldr	r3, [pc, #36]	; (fd8 <system_clock_source_get_hz+0x6c>)
     fb2:	681b      	ldr	r3, [r3, #0]
     fb4:	075a      	lsls	r2, r3, #29
     fb6:	d50a      	bpl.n	fce <system_clock_source_get_hz+0x62>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     fb8:	2000      	movs	r0, #0
     fba:	4b0a      	ldr	r3, [pc, #40]	; (fe4 <system_clock_source_get_hz+0x78>)
     fbc:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     fbe:	4b06      	ldr	r3, [pc, #24]	; (fd8 <system_clock_source_get_hz+0x6c>)
     fc0:	689b      	ldr	r3, [r3, #8]
     fc2:	041b      	lsls	r3, r3, #16
     fc4:	0c1b      	lsrs	r3, r3, #16
		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     fc6:	4358      	muls	r0, r3
     fc8:	e002      	b.n	fd0 <system_clock_source_get_hz+0x64>
		}

		return 48000000UL;

	default:
		return 0;
     fca:	2000      	movs	r0, #0
     fcc:	e000      	b.n	fd0 <system_clock_source_get_hz+0x64>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
					(_system_clock_inst.dfll.mul & 0xffff);
		}

		return 48000000UL;
     fce:	4806      	ldr	r0, [pc, #24]	; (fe8 <system_clock_source_get_hz+0x7c>)

	default:
		return 0;
	}
}
     fd0:	bd08      	pop	{r3, pc}
     fd2:	46c0      	nop			; (mov r8, r8)
     fd4:	000079f0 	.word	0x000079f0
     fd8:	20000908 	.word	0x20000908
     fdc:	40000800 	.word	0x40000800
     fe0:	007a1200 	.word	0x007a1200
     fe4:	0000137d 	.word	0x0000137d
     fe8:	02dc6c00 	.word	0x02dc6c00

00000fec <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     fec:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     fee:	4b0c      	ldr	r3, [pc, #48]	; (1020 <system_clock_source_osc8m_set_config+0x34>)
     ff0:	6a1c      	ldr	r4, [r3, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     ff2:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     ff4:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     ff6:	7840      	ldrb	r0, [r0, #1]
     ff8:	2201      	movs	r2, #1
     ffa:	4010      	ands	r0, r2
     ffc:	0180      	lsls	r0, r0, #6
     ffe:	2640      	movs	r6, #64	; 0x40
    1000:	43b4      	bics	r4, r6
    1002:	4304      	orrs	r4, r0
    1004:	402a      	ands	r2, r5
    1006:	01d0      	lsls	r0, r2, #7
    1008:	2280      	movs	r2, #128	; 0x80
    100a:	4394      	bics	r4, r2
    100c:	1c22      	adds	r2, r4, #0
    100e:	4302      	orrs	r2, r0
    1010:	2003      	movs	r0, #3
    1012:	4001      	ands	r1, r0
    1014:	0209      	lsls	r1, r1, #8
    1016:	4803      	ldr	r0, [pc, #12]	; (1024 <system_clock_source_osc8m_set_config+0x38>)
    1018:	4002      	ands	r2, r0
    101a:	430a      	orrs	r2, r1
    101c:	621a      	str	r2, [r3, #32]
}
    101e:	bd70      	pop	{r4, r5, r6, pc}
    1020:	40000800 	.word	0x40000800
    1024:	fffffcff 	.word	0xfffffcff

00001028 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1028:	2807      	cmp	r0, #7
    102a:	d83d      	bhi.n	10a8 <system_clock_source_enable+0x80>
    102c:	0080      	lsls	r0, r0, #2
    102e:	4b1f      	ldr	r3, [pc, #124]	; (10ac <system_clock_source_enable+0x84>)
    1030:	581b      	ldr	r3, [r3, r0]
    1032:	469f      	mov	pc, r3
		_system_clock_source_dfll_set_config_errata_9905();
		break;

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    1034:	2000      	movs	r0, #0
    1036:	e038      	b.n	10aa <system_clock_source_enable+0x82>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1038:	4b1d      	ldr	r3, [pc, #116]	; (10b0 <system_clock_source_enable+0x88>)
    103a:	6a19      	ldr	r1, [r3, #32]
    103c:	2202      	movs	r2, #2
    103e:	430a      	orrs	r2, r1
    1040:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    1042:	2000      	movs	r0, #0
    1044:	e031      	b.n	10aa <system_clock_source_enable+0x82>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1046:	4b1a      	ldr	r3, [pc, #104]	; (10b0 <system_clock_source_enable+0x88>)
    1048:	6999      	ldr	r1, [r3, #24]
    104a:	2202      	movs	r2, #2
    104c:	430a      	orrs	r2, r1
    104e:	619a      	str	r2, [r3, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1050:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
    1052:	e02a      	b.n	10aa <system_clock_source_enable+0x82>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1054:	4b16      	ldr	r3, [pc, #88]	; (10b0 <system_clock_source_enable+0x88>)
    1056:	691a      	ldr	r2, [r3, #16]
    1058:	b292      	uxth	r2, r2
    105a:	2102      	movs	r1, #2
    105c:	430a      	orrs	r2, r1
    105e:	821a      	strh	r2, [r3, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1060:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
    1062:	e022      	b.n	10aa <system_clock_source_enable+0x82>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1064:	4b12      	ldr	r3, [pc, #72]	; (10b0 <system_clock_source_enable+0x88>)
    1066:	695a      	ldr	r2, [r3, #20]
    1068:	b292      	uxth	r2, r2
    106a:	2102      	movs	r1, #2
    106c:	430a      	orrs	r2, r1
    106e:	829a      	strh	r2, [r3, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    1070:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
    1072:	e01a      	b.n	10aa <system_clock_source_enable+0x82>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1074:	4b0f      	ldr	r3, [pc, #60]	; (10b4 <system_clock_source_enable+0x8c>)
    1076:	6819      	ldr	r1, [r3, #0]
    1078:	2202      	movs	r2, #2
    107a:	430a      	orrs	r2, r1
    107c:	601a      	str	r2, [r3, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    107e:	681a      	ldr	r2, [r3, #0]
    1080:	4b0d      	ldr	r3, [pc, #52]	; (10b8 <system_clock_source_enable+0x90>)
    1082:	401a      	ands	r2, r3
    1084:	4b0a      	ldr	r3, [pc, #40]	; (10b0 <system_clock_source_enable+0x88>)
    1086:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1088:	1c19      	adds	r1, r3, #0
    108a:	2210      	movs	r2, #16
    108c:	68cb      	ldr	r3, [r1, #12]
    108e:	421a      	tst	r2, r3
    1090:	d0fc      	beq.n	108c <system_clock_source_enable+0x64>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1092:	4a08      	ldr	r2, [pc, #32]	; (10b4 <system_clock_source_enable+0x8c>)
    1094:	6891      	ldr	r1, [r2, #8]
    1096:	4b06      	ldr	r3, [pc, #24]	; (10b0 <system_clock_source_enable+0x88>)
    1098:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    109a:	6851      	ldr	r1, [r2, #4]
    109c:	6299      	str	r1, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    109e:	6812      	ldr	r2, [r2, #0]
    10a0:	b292      	uxth	r2, r2
    10a2:	849a      	strh	r2, [r3, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    10a4:	2000      	movs	r0, #0
    10a6:	e000      	b.n	10aa <system_clock_source_enable+0x82>
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    10a8:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
    10aa:	4770      	bx	lr
    10ac:	00007a10 	.word	0x00007a10
    10b0:	40000800 	.word	0x40000800
    10b4:	20000908 	.word	0x20000908
    10b8:	0000ff7f 	.word	0x0000ff7f

000010bc <system_clock_init>:
 * This function will apply the settings in conf_clocks.h when run from the user
 * application. All clock sources and GCLK generators are running when this function
 * returns.
 */
void system_clock_init(void)
{
    10bc:	b530      	push	{r4, r5, lr}
    10be:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD12RDY | SYSCTRL_INTFLAG_BOD33RDY |
    10c0:	4a14      	ldr	r2, [pc, #80]	; (1114 <system_clock_init+0x58>)
    10c2:	4b15      	ldr	r3, [pc, #84]	; (1118 <system_clock_init+0x5c>)
    10c4:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    10c6:	4b15      	ldr	r3, [pc, #84]	; (111c <system_clock_init+0x60>)
    10c8:	685a      	ldr	r2, [r3, #4]
    10ca:	211e      	movs	r1, #30
    10cc:	438a      	bics	r2, r1
    10ce:	605a      	str	r2, [r3, #4]
		struct system_clock_source_osc8m_config *const config)
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
    10d0:	a803      	add	r0, sp, #12
    10d2:	2400      	movs	r4, #0
    10d4:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    10d6:	2501      	movs	r5, #1
    10d8:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    10da:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    10dc:	4b10      	ldr	r3, [pc, #64]	; (1120 <system_clock_init+0x64>)
    10de:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    10e0:	2006      	movs	r0, #6
    10e2:	4b10      	ldr	r3, [pc, #64]	; (1124 <system_clock_init+0x68>)
    10e4:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    10e6:	4b10      	ldr	r3, [pc, #64]	; (1128 <system_clock_init+0x6c>)
    10e8:	4798      	blx	r3
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
    10ea:	4b10      	ldr	r3, [pc, #64]	; (112c <system_clock_init+0x70>)
    10ec:	721c      	strb	r4, [r3, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
    10ee:	725c      	strb	r4, [r3, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
    10f0:	729c      	strb	r4, [r3, #10]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    10f2:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    10f4:	466a      	mov	r2, sp
    10f6:	7054      	strb	r4, [r2, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    10f8:	2306      	movs	r3, #6
    10fa:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
    10fc:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    10fe:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1100:	2000      	movs	r0, #0
    1102:	4669      	mov	r1, sp
    1104:	4b0a      	ldr	r3, [pc, #40]	; (1130 <system_clock_init+0x74>)
    1106:	4798      	blx	r3
    1108:	2000      	movs	r0, #0
    110a:	4b0a      	ldr	r3, [pc, #40]	; (1134 <system_clock_init+0x78>)
    110c:	4798      	blx	r3
#endif
}
    110e:	b005      	add	sp, #20
    1110:	bd30      	pop	{r4, r5, pc}
    1112:	46c0      	nop			; (mov r8, r8)
    1114:	00003610 	.word	0x00003610
    1118:	40000800 	.word	0x40000800
    111c:	41004000 	.word	0x41004000
    1120:	00000fed 	.word	0x00000fed
    1124:	00001029 	.word	0x00001029
    1128:	00001139 	.word	0x00001139
    112c:	40000400 	.word	0x40000400
    1130:	0000115d 	.word	0x0000115d
    1134:	0000120d 	.word	0x0000120d

00001138 <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1138:	4b06      	ldr	r3, [pc, #24]	; (1154 <system_gclk_init+0x1c>)
    113a:	6999      	ldr	r1, [r3, #24]
    113c:	2208      	movs	r2, #8
    113e:	430a      	orrs	r2, r1
    1140:	619a      	str	r2, [r3, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1142:	2201      	movs	r2, #1
    1144:	4b04      	ldr	r3, [pc, #16]	; (1158 <system_gclk_init+0x20>)
    1146:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1148:	1c19      	adds	r1, r3, #0
    114a:	680b      	ldr	r3, [r1, #0]
    114c:	4213      	tst	r3, r2
    114e:	d1fc      	bne.n	114a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1150:	4770      	bx	lr
    1152:	46c0      	nop			; (mov r8, r8)
    1154:	40000400 	.word	0x40000400
    1158:	40000c00 	.word	0x40000c00

0000115c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    115c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    115e:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1160:	1c07      	adds	r7, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1162:	780d      	ldrb	r5, [r1, #0]
    1164:	022d      	lsls	r5, r5, #8
    1166:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1168:	784b      	ldrb	r3, [r1, #1]
    116a:	2b00      	cmp	r3, #0
    116c:	d002      	beq.n	1174 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    116e:	2380      	movs	r3, #128	; 0x80
    1170:	02db      	lsls	r3, r3, #11
    1172:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1174:	7a4b      	ldrb	r3, [r1, #9]
    1176:	2b00      	cmp	r3, #0
    1178:	d002      	beq.n	1180 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    117a:	2380      	movs	r3, #128	; 0x80
    117c:	031b      	lsls	r3, r3, #12
    117e:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1180:	684c      	ldr	r4, [r1, #4]
    1182:	2c01      	cmp	r4, #1
    1184:	d917      	bls.n	11b6 <system_gclk_gen_set_config+0x5a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1186:	1e63      	subs	r3, r4, #1
    1188:	421c      	tst	r4, r3
    118a:	d10f      	bne.n	11ac <system_gclk_gen_set_config+0x50>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    118c:	2c02      	cmp	r4, #2
    118e:	d906      	bls.n	119e <system_gclk_gen_set_config+0x42>
    1190:	2302      	movs	r3, #2
    1192:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1194:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
    1196:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1198:	429c      	cmp	r4, r3
    119a:	d8fb      	bhi.n	1194 <system_gclk_gen_set_config+0x38>
    119c:	e000      	b.n	11a0 <system_gclk_gen_set_config+0x44>
    119e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    11a0:	0217      	lsls	r7, r2, #8
    11a2:	4337      	orrs	r7, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    11a4:	2380      	movs	r3, #128	; 0x80
    11a6:	035b      	lsls	r3, r3, #13
    11a8:	431d      	orrs	r5, r3
    11aa:	e004      	b.n	11b6 <system_gclk_gen_set_config+0x5a>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    11ac:	0227      	lsls	r7, r4, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
    11ae:	4337      	orrs	r7, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    11b0:	2380      	movs	r3, #128	; 0x80
    11b2:	029b      	lsls	r3, r3, #10
    11b4:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    11b6:	7a0b      	ldrb	r3, [r1, #8]
    11b8:	2b00      	cmp	r3, #0
    11ba:	d002      	beq.n	11c2 <system_gclk_gen_set_config+0x66>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    11bc:	2380      	movs	r3, #128	; 0x80
    11be:	039b      	lsls	r3, r3, #14
    11c0:	431d      	orrs	r5, r3
 * \retval true if the module has completed synchronization
 * \retval false if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY) {
    11c2:	4a0e      	ldr	r2, [pc, #56]	; (11fc <system_gclk_gen_set_config+0xa0>)
    11c4:	6813      	ldr	r3, [r2, #0]
	}

	while (system_gclk_is_syncing()) {
    11c6:	0419      	lsls	r1, r3, #16
    11c8:	d4fc      	bmi.n	11c4 <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    11ca:	4b0d      	ldr	r3, [pc, #52]	; (1200 <system_gclk_gen_set_config+0xa4>)
    11cc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    11ce:	4b0d      	ldr	r3, [pc, #52]	; (1204 <system_gclk_gen_set_config+0xa8>)
    11d0:	701e      	strb	r6, [r3, #0]
    11d2:	490a      	ldr	r1, [pc, #40]	; (11fc <system_gclk_gen_set_config+0xa0>)
    11d4:	680b      	ldr	r3, [r1, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    11d6:	041a      	lsls	r2, r3, #16
    11d8:	d4fc      	bmi.n	11d4 <system_gclk_gen_set_config+0x78>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    11da:	4b08      	ldr	r3, [pc, #32]	; (11fc <system_gclk_gen_set_config+0xa0>)
    11dc:	609f      	str	r7, [r3, #8]
    11de:	1c1a      	adds	r2, r3, #0
    11e0:	6813      	ldr	r3, [r2, #0]

	while (system_gclk_is_syncing()) {
    11e2:	0419      	lsls	r1, r3, #16
    11e4:	d4fc      	bmi.n	11e0 <system_gclk_gen_set_config+0x84>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    11e6:	4b05      	ldr	r3, [pc, #20]	; (11fc <system_gclk_gen_set_config+0xa0>)
    11e8:	6859      	ldr	r1, [r3, #4]
    11ea:	2280      	movs	r2, #128	; 0x80
    11ec:	0252      	lsls	r2, r2, #9
    11ee:	400a      	ands	r2, r1
    11f0:	4315      	orrs	r5, r2
    11f2:	605d      	str	r5, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    11f4:	4b04      	ldr	r3, [pc, #16]	; (1208 <system_gclk_gen_set_config+0xac>)
    11f6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    11f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    11fa:	46c0      	nop			; (mov r8, r8)
    11fc:	40000c00 	.word	0x40000c00
    1200:	00000ea1 	.word	0x00000ea1
    1204:	40000c08 	.word	0x40000c08
    1208:	00000ee1 	.word	0x00000ee1

0000120c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    120c:	b510      	push	{r4, lr}
    120e:	1c04      	adds	r4, r0, #0
    1210:	4a0a      	ldr	r2, [pc, #40]	; (123c <system_gclk_gen_enable+0x30>)
    1212:	6813      	ldr	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    1214:	0419      	lsls	r1, r3, #16
    1216:	d4fc      	bmi.n	1212 <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1218:	4b09      	ldr	r3, [pc, #36]	; (1240 <system_gclk_gen_enable+0x34>)
    121a:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    121c:	4b09      	ldr	r3, [pc, #36]	; (1244 <system_gclk_gen_enable+0x38>)
    121e:	701c      	strb	r4, [r3, #0]
    1220:	4a06      	ldr	r2, [pc, #24]	; (123c <system_gclk_gen_enable+0x30>)
    1222:	6813      	ldr	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    1224:	0419      	lsls	r1, r3, #16
    1226:	d4fc      	bmi.n	1222 <system_gclk_gen_enable+0x16>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1228:	4b04      	ldr	r3, [pc, #16]	; (123c <system_gclk_gen_enable+0x30>)
    122a:	6859      	ldr	r1, [r3, #4]
    122c:	2280      	movs	r2, #128	; 0x80
    122e:	0252      	lsls	r2, r2, #9
    1230:	430a      	orrs	r2, r1
    1232:	605a      	str	r2, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1234:	4b04      	ldr	r3, [pc, #16]	; (1248 <system_gclk_gen_enable+0x3c>)
    1236:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1238:	bd10      	pop	{r4, pc}
    123a:	46c0      	nop			; (mov r8, r8)
    123c:	40000c00 	.word	0x40000c00
    1240:	00000ea1 	.word	0x00000ea1
    1244:	40000c04 	.word	0x40000c04
    1248:	00000ee1 	.word	0x00000ee1

0000124c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    124c:	b570      	push	{r4, r5, r6, lr}
    124e:	1c04      	adds	r4, r0, #0
    1250:	4a18      	ldr	r2, [pc, #96]	; (12b4 <system_gclk_gen_get_hz+0x68>)
    1252:	6813      	ldr	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    1254:	0419      	lsls	r1, r3, #16
    1256:	d4fc      	bmi.n	1252 <system_gclk_gen_get_hz+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1258:	4b17      	ldr	r3, [pc, #92]	; (12b8 <system_gclk_gen_get_hz+0x6c>)
    125a:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    125c:	4b17      	ldr	r3, [pc, #92]	; (12bc <system_gclk_gen_get_hz+0x70>)
    125e:	701c      	strb	r4, [r3, #0]
    1260:	4a14      	ldr	r2, [pc, #80]	; (12b4 <system_gclk_gen_get_hz+0x68>)
    1262:	6813      	ldr	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    1264:	0419      	lsls	r1, r3, #16
    1266:	d4fc      	bmi.n	1262 <system_gclk_gen_get_hz+0x16>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1268:	4e12      	ldr	r6, [pc, #72]	; (12b4 <system_gclk_gen_get_hz+0x68>)
    126a:	6870      	ldr	r0, [r6, #4]
    126c:	04c0      	lsls	r0, r0, #19
    126e:	0ec0      	lsrs	r0, r0, #27
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1270:	4b13      	ldr	r3, [pc, #76]	; (12c0 <system_gclk_gen_get_hz+0x74>)
    1272:	4798      	blx	r3
    1274:	1c05      	adds	r5, r0, #0
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1276:	4b11      	ldr	r3, [pc, #68]	; (12bc <system_gclk_gen_get_hz+0x70>)
    1278:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    127a:	6876      	ldr	r6, [r6, #4]
    127c:	02f6      	lsls	r6, r6, #11
    127e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1280:	4b10      	ldr	r3, [pc, #64]	; (12c4 <system_gclk_gen_get_hz+0x78>)
    1282:	701c      	strb	r4, [r3, #0]
    1284:	4a0b      	ldr	r2, [pc, #44]	; (12b4 <system_gclk_gen_get_hz+0x68>)
    1286:	6813      	ldr	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    1288:	0419      	lsls	r1, r3, #16
    128a:	d4fc      	bmi.n	1286 <system_gclk_gen_get_hz+0x3a>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    128c:	4b09      	ldr	r3, [pc, #36]	; (12b4 <system_gclk_gen_get_hz+0x68>)
    128e:	689c      	ldr	r4, [r3, #8]
    1290:	0224      	lsls	r4, r4, #8
    1292:	0c24      	lsrs	r4, r4, #16
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1294:	4b0c      	ldr	r3, [pc, #48]	; (12c8 <system_gclk_gen_get_hz+0x7c>)
    1296:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1298:	2e00      	cmp	r6, #0
    129a:	d107      	bne.n	12ac <system_gclk_gen_get_hz+0x60>
    129c:	2c01      	cmp	r4, #1
    129e:	d907      	bls.n	12b0 <system_gclk_gen_get_hz+0x64>
		gen_input_hz /= divider;
    12a0:	1c28      	adds	r0, r5, #0
    12a2:	1c21      	adds	r1, r4, #0
    12a4:	4b09      	ldr	r3, [pc, #36]	; (12cc <system_gclk_gen_get_hz+0x80>)
    12a6:	4798      	blx	r3
    12a8:	1c05      	adds	r5, r0, #0
    12aa:	e001      	b.n	12b0 <system_gclk_gen_get_hz+0x64>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    12ac:	3401      	adds	r4, #1
    12ae:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    12b0:	1c28      	adds	r0, r5, #0
    12b2:	bd70      	pop	{r4, r5, r6, pc}
    12b4:	40000c00 	.word	0x40000c00
    12b8:	00000ea1 	.word	0x00000ea1
    12bc:	40000c04 	.word	0x40000c04
    12c0:	00000f6d 	.word	0x00000f6d
    12c4:	40000c08 	.word	0x40000c08
    12c8:	00000ee1 	.word	0x00000ee1
    12cc:	0000185d 	.word	0x0000185d

000012d0 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    12d0:	b510      	push	{r4, lr}
    12d2:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    12d4:	4b06      	ldr	r3, [pc, #24]	; (12f0 <system_gclk_chan_enable+0x20>)
    12d6:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    12d8:	4b06      	ldr	r3, [pc, #24]	; (12f4 <system_gclk_chan_enable+0x24>)
    12da:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    12dc:	4b06      	ldr	r3, [pc, #24]	; (12f8 <system_gclk_chan_enable+0x28>)
    12de:	6819      	ldr	r1, [r3, #0]
    12e0:	0c09      	lsrs	r1, r1, #16
    12e2:	2280      	movs	r2, #128	; 0x80
    12e4:	01d2      	lsls	r2, r2, #7
    12e6:	430a      	orrs	r2, r1
    12e8:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    12ea:	4b04      	ldr	r3, [pc, #16]	; (12fc <system_gclk_chan_enable+0x2c>)
    12ec:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    12ee:	bd10      	pop	{r4, pc}
    12f0:	00000ea1 	.word	0x00000ea1
    12f4:	40000c02 	.word	0x40000c02
    12f8:	40000c00 	.word	0x40000c00
    12fc:	00000ee1 	.word	0x00000ee1

00001300 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1300:	b510      	push	{r4, lr}
    1302:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1304:	4b10      	ldr	r3, [pc, #64]	; (1348 <system_gclk_chan_disable+0x48>)
    1306:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1308:	4b10      	ldr	r3, [pc, #64]	; (134c <system_gclk_chan_disable+0x4c>)
    130a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    130c:	4b10      	ldr	r3, [pc, #64]	; (1350 <system_gclk_chan_disable+0x50>)
    130e:	6818      	ldr	r0, [r3, #0]
    1310:	0100      	lsls	r0, r0, #4
    1312:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1314:	8859      	ldrh	r1, [r3, #2]
    1316:	4a0f      	ldr	r2, [pc, #60]	; (1354 <system_gclk_chan_disable+0x54>)
    1318:	400a      	ands	r2, r1
    131a:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    131c:	681a      	ldr	r2, [r3, #0]
    131e:	0c12      	lsrs	r2, r2, #16
    1320:	490d      	ldr	r1, [pc, #52]	; (1358 <system_gclk_chan_disable+0x58>)
    1322:	400a      	ands	r2, r1
    1324:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1326:	1c19      	adds	r1, r3, #0
    1328:	2280      	movs	r2, #128	; 0x80
    132a:	01d2      	lsls	r2, r2, #7
    132c:	680b      	ldr	r3, [r1, #0]
    132e:	0c1b      	lsrs	r3, r3, #16
    1330:	4213      	tst	r3, r2
    1332:	d1fb      	bne.n	132c <system_gclk_chan_disable+0x2c>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1334:	4b06      	ldr	r3, [pc, #24]	; (1350 <system_gclk_chan_disable+0x50>)
    1336:	0201      	lsls	r1, r0, #8
    1338:	8858      	ldrh	r0, [r3, #2]
    133a:	4a06      	ldr	r2, [pc, #24]	; (1354 <system_gclk_chan_disable+0x54>)
    133c:	4002      	ands	r2, r0
    133e:	430a      	orrs	r2, r1
    1340:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1342:	4b06      	ldr	r3, [pc, #24]	; (135c <system_gclk_chan_disable+0x5c>)
    1344:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1346:	bd10      	pop	{r4, pc}
    1348:	00000ea1 	.word	0x00000ea1
    134c:	40000c02 	.word	0x40000c02
    1350:	40000c00 	.word	0x40000c00
    1354:	fffff0ff 	.word	0xfffff0ff
    1358:	ffffbfff 	.word	0xffffbfff
    135c:	00000ee1 	.word	0x00000ee1

00001360 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    1360:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1362:	780c      	ldrb	r4, [r1, #0]
    1364:	0224      	lsls	r4, r4, #8
    1366:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    1368:	4b02      	ldr	r3, [pc, #8]	; (1374 <system_gclk_chan_set_config+0x14>)
    136a:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    136c:	b2a4      	uxth	r4, r4
    136e:	4b02      	ldr	r3, [pc, #8]	; (1378 <system_gclk_chan_set_config+0x18>)
    1370:	805c      	strh	r4, [r3, #2]
}
    1372:	bd10      	pop	{r4, pc}
    1374:	00001301 	.word	0x00001301
    1378:	40000c00 	.word	0x40000c00

0000137c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    137c:	b510      	push	{r4, lr}
    137e:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1380:	4b06      	ldr	r3, [pc, #24]	; (139c <system_gclk_chan_get_hz+0x20>)
    1382:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1384:	4b06      	ldr	r3, [pc, #24]	; (13a0 <system_gclk_chan_get_hz+0x24>)
    1386:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1388:	4b06      	ldr	r3, [pc, #24]	; (13a4 <system_gclk_chan_get_hz+0x28>)
    138a:	681c      	ldr	r4, [r3, #0]
    138c:	0124      	lsls	r4, r4, #4
    138e:	0f24      	lsrs	r4, r4, #28
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1390:	4b05      	ldr	r3, [pc, #20]	; (13a8 <system_gclk_chan_get_hz+0x2c>)
    1392:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1394:	1c20      	adds	r0, r4, #0
    1396:	4b05      	ldr	r3, [pc, #20]	; (13ac <system_gclk_chan_get_hz+0x30>)
    1398:	4798      	blx	r3
}
    139a:	bd10      	pop	{r4, pc}
    139c:	00000ea1 	.word	0x00000ea1
    13a0:	40000c02 	.word	0x40000c02
    13a4:	40000c00 	.word	0x40000c00
    13a8:	00000ee1 	.word	0x00000ee1
    13ac:	0000124d 	.word	0x0000124d

000013b0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    13b0:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    13b2:	78d4      	ldrb	r4, [r2, #3]
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    13b4:	2300      	movs	r3, #0

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    13b6:	2c00      	cmp	r4, #0
    13b8:	d11e      	bne.n	13f8 <_system_pinmux_config+0x48>
		/* Enable the pin peripheral mux flag if non-GPIO selected (pin mux will
		 * be written later) and store the new mux mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    13ba:	7813      	ldrb	r3, [r2, #0]
    13bc:	2b80      	cmp	r3, #128	; 0x80
    13be:	d004      	beq.n	13ca <_system_pinmux_config+0x1a>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    13c0:	061b      	lsls	r3, r3, #24
    13c2:	2480      	movs	r4, #128	; 0x80
    13c4:	0264      	lsls	r4, r4, #9
    13c6:	4323      	orrs	r3, r4
    13c8:	e000      	b.n	13cc <_system_pinmux_config+0x1c>
{
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    13ca:	2300      	movs	r3, #0
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    13cc:	7854      	ldrb	r4, [r2, #1]
    13ce:	2502      	movs	r5, #2
    13d0:	43ac      	bics	r4, r5
    13d2:	d10a      	bne.n	13ea <_system_pinmux_config+0x3a>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    13d4:	7894      	ldrb	r4, [r2, #2]
    13d6:	2c00      	cmp	r4, #0
    13d8:	d103      	bne.n	13e2 <_system_pinmux_config+0x32>

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    13da:	2480      	movs	r4, #128	; 0x80
    13dc:	02a4      	lsls	r4, r4, #10
    13de:	4323      	orrs	r3, r4
    13e0:	e002      	b.n	13e8 <_system_pinmux_config+0x38>

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    13e2:	24c0      	movs	r4, #192	; 0xc0
    13e4:	02e4      	lsls	r4, r4, #11
    13e6:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    13e8:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    13ea:	7854      	ldrb	r4, [r2, #1]
    13ec:	3c01      	subs	r4, #1
    13ee:	b2e4      	uxtb	r4, r4
    13f0:	2c01      	cmp	r4, #1
    13f2:	d801      	bhi.n	13f8 <_system_pinmux_config+0x48>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pullup if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    13f4:	4c10      	ldr	r4, [pc, #64]	; (1438 <_system_pinmux_config+0x88>)
    13f6:	4023      	ands	r3, r4
		}
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    13f8:	040d      	lsls	r5, r1, #16
    13fa:	0c2d      	lsrs	r5, r5, #16
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    13fc:	24a0      	movs	r4, #160	; 0xa0
    13fe:	05e4      	lsls	r4, r4, #23
    1400:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1402:	431c      	orrs	r4, r3
	uint32_t upper_pin_mask = (pin_mask >> 16);

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1404:	6284      	str	r4, [r0, #40]	; 0x28
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1406:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1408:	24d0      	movs	r4, #208	; 0xd0
    140a:	0624      	lsls	r4, r4, #24
    140c:	432c      	orrs	r4, r5
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    140e:	431c      	orrs	r4, r3
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1410:	6284      	str	r4, [r0, #40]	; 0x28
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1412:	78d4      	ldrb	r4, [r2, #3]
    1414:	2c00      	cmp	r4, #0
    1416:	d10d      	bne.n	1434 <_system_pinmux_config+0x84>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1418:	035c      	lsls	r4, r3, #13
    141a:	d505      	bpl.n	1428 <_system_pinmux_config+0x78>
			/* Set the OUT register bits to enable the pullup if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    141c:	7893      	ldrb	r3, [r2, #2]
    141e:	2b01      	cmp	r3, #1
    1420:	d101      	bne.n	1426 <_system_pinmux_config+0x76>
				port->OUTSET.reg = pin_mask;
    1422:	6181      	str	r1, [r0, #24]
    1424:	e000      	b.n	1428 <_system_pinmux_config+0x78>
			} else {
				port->OUTCLR.reg = pin_mask;
    1426:	6141      	str	r1, [r0, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1428:	7853      	ldrb	r3, [r2, #1]
    142a:	3b01      	subs	r3, #1
    142c:	b2db      	uxtb	r3, r3
    142e:	2b01      	cmp	r3, #1
    1430:	d800      	bhi.n	1434 <_system_pinmux_config+0x84>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    1432:	6081      	str	r1, [r0, #8]
		}
	}
}
    1434:	bd30      	pop	{r4, r5, pc}
    1436:	46c0      	nop			; (mov r8, r8)
    1438:	fffbffff 	.word	0xfffbffff

0000143c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin.
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    143c:	b508      	push	{r3, lr}
    143e:	1c03      	adds	r3, r0, #0
    1440:	1c0a      	adds	r2, r1, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1442:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1444:	2000      	movs	r0, #0
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports. */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1446:	2900      	cmp	r1, #0
    1448:	d103      	bne.n	1452 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    144a:	0958      	lsrs	r0, r3, #5
    144c:	01c0      	lsls	r0, r0, #7
    144e:	4904      	ldr	r1, [pc, #16]	; (1460 <system_pinmux_pin_set_config+0x24>)
    1450:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1452:	211f      	movs	r1, #31
    1454:	400b      	ands	r3, r1
    1456:	2101      	movs	r1, #1
    1458:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    145a:	4b02      	ldr	r3, [pc, #8]	; (1464 <system_pinmux_pin_set_config+0x28>)
    145c:	4798      	blx	r3
}
    145e:	bd08      	pop	{r3, pc}
    1460:	41004400 	.word	0x41004400
    1464:	000013b1 	.word	0x000013b1

00001468 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1468:	4770      	bx	lr
    146a:	46c0      	nop			; (mov r8, r8)

0000146c <HardFault_Handler>:
/**
 * Handler for the CPU Hard Fault interrupt, fired if an illegal access was
 * attempted to a memory address.
 */
void HardFault_Handler(void)
{
    146c:	e7fe      	b.n	146c <HardFault_Handler>
    146e:	46c0      	nop			; (mov r8, r8)

00001470 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1470:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1472:	4b04      	ldr	r3, [pc, #16]	; (1484 <system_init+0x14>)
    1474:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1476:	4b04      	ldr	r3, [pc, #16]	; (1488 <system_init+0x18>)
    1478:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    147a:	4b04      	ldr	r3, [pc, #16]	; (148c <system_init+0x1c>)
    147c:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    147e:	4b04      	ldr	r3, [pc, #16]	; (1490 <system_init+0x20>)
    1480:	4798      	blx	r3
}
    1482:	bd08      	pop	{r3, pc}
    1484:	000010bd 	.word	0x000010bd
    1488:	00000f11 	.word	0x00000f11
    148c:	00001469 	.word	0x00001469
    1490:	00001469 	.word	0x00001469

00001494 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1494:	e7fe      	b.n	1494 <Dummy_Handler>
    1496:	46c0      	nop			; (mov r8, r8)

00001498 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1498:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    149a:	4b19      	ldr	r3, [pc, #100]	; (1500 <Reset_Handler+0x68>)
    149c:	4a19      	ldr	r2, [pc, #100]	; (1504 <Reset_Handler+0x6c>)
    149e:	429a      	cmp	r2, r3
    14a0:	d003      	beq.n	14aa <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    14a2:	4b19      	ldr	r3, [pc, #100]	; (1508 <Reset_Handler+0x70>)
    14a4:	4a16      	ldr	r2, [pc, #88]	; (1500 <Reset_Handler+0x68>)
    14a6:	429a      	cmp	r2, r3
    14a8:	d304      	bcc.n	14b4 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    14aa:	4b18      	ldr	r3, [pc, #96]	; (150c <Reset_Handler+0x74>)
    14ac:	4a18      	ldr	r2, [pc, #96]	; (1510 <Reset_Handler+0x78>)
    14ae:	429a      	cmp	r2, r3
    14b0:	d310      	bcc.n	14d4 <Reset_Handler+0x3c>
    14b2:	e01b      	b.n	14ec <Reset_Handler+0x54>
    14b4:	4b17      	ldr	r3, [pc, #92]	; (1514 <Reset_Handler+0x7c>)
    14b6:	4814      	ldr	r0, [pc, #80]	; (1508 <Reset_Handler+0x70>)
    14b8:	3003      	adds	r0, #3
    14ba:	1ac0      	subs	r0, r0, r3
    14bc:	0880      	lsrs	r0, r0, #2
    14be:	3001      	adds	r0, #1
    14c0:	0080      	lsls	r0, r0, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    14c2:	2300      	movs	r3, #0
                        *pDest++ = *pSrc++;
    14c4:	490e      	ldr	r1, [pc, #56]	; (1500 <Reset_Handler+0x68>)
    14c6:	4a0f      	ldr	r2, [pc, #60]	; (1504 <Reset_Handler+0x6c>)
    14c8:	58d4      	ldr	r4, [r2, r3]
    14ca:	50cc      	str	r4, [r1, r3]
    14cc:	3304      	adds	r3, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    14ce:	4283      	cmp	r3, r0
    14d0:	d1fa      	bne.n	14c8 <Reset_Handler+0x30>
    14d2:	e7ea      	b.n	14aa <Reset_Handler+0x12>
    14d4:	4b0e      	ldr	r3, [pc, #56]	; (1510 <Reset_Handler+0x78>)
    14d6:	1d1a      	adds	r2, r3, #4
    14d8:	490c      	ldr	r1, [pc, #48]	; (150c <Reset_Handler+0x74>)
    14da:	3103      	adds	r1, #3
    14dc:	1a89      	subs	r1, r1, r2
    14de:	0889      	lsrs	r1, r1, #2
    14e0:	0089      	lsls	r1, r1, #2
    14e2:	1852      	adds	r2, r2, r1
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
                *pDest++ = 0;
    14e4:	2100      	movs	r1, #0
    14e6:	c302      	stmia	r3!, {r1}
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    14e8:	4293      	cmp	r3, r2
    14ea:	d1fc      	bne.n	14e6 <Reset_Handler+0x4e>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    14ec:	4b0a      	ldr	r3, [pc, #40]	; (1518 <Reset_Handler+0x80>)
    14ee:	217f      	movs	r1, #127	; 0x7f
    14f0:	4a0a      	ldr	r2, [pc, #40]	; (151c <Reset_Handler+0x84>)
    14f2:	438a      	bics	r2, r1
    14f4:	609a      	str	r2, [r3, #8]

        /* Initialize the C library */
        __libc_init_array();
    14f6:	4b0a      	ldr	r3, [pc, #40]	; (1520 <Reset_Handler+0x88>)
    14f8:	4798      	blx	r3

        /* Branch to main function */
        main();
    14fa:	4b0a      	ldr	r3, [pc, #40]	; (1524 <Reset_Handler+0x8c>)
    14fc:	4798      	blx	r3
    14fe:	e7fe      	b.n	14fe <Reset_Handler+0x66>
    1500:	20000000 	.word	0x20000000
    1504:	00007cdc 	.word	0x00007cdc
    1508:	200008c4 	.word	0x200008c4
    150c:	200009e4 	.word	0x200009e4
    1510:	200008c4 	.word	0x200008c4
    1514:	20000004 	.word	0x20000004
    1518:	e000ed00 	.word	0xe000ed00
    151c:	00000000 	.word	0x00000000
    1520:	00002191 	.word	0x00002191
    1524:	00001725 	.word	0x00001725

00001528 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    1528:	4b06      	ldr	r3, [pc, #24]	; (1544 <_sbrk+0x1c>)
    152a:	681b      	ldr	r3, [r3, #0]
    152c:	2b00      	cmp	r3, #0
    152e:	d102      	bne.n	1536 <_sbrk+0xe>
		heap = (unsigned char *)&_end;
    1530:	4a05      	ldr	r2, [pc, #20]	; (1548 <_sbrk+0x20>)
    1532:	4b04      	ldr	r3, [pc, #16]	; (1544 <_sbrk+0x1c>)
    1534:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    1536:	4a03      	ldr	r2, [pc, #12]	; (1544 <_sbrk+0x1c>)
    1538:	6813      	ldr	r3, [r2, #0]

	heap += incr;
    153a:	1818      	adds	r0, r3, r0
    153c:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
}
    153e:	1c18      	adds	r0, r3, #0
    1540:	4770      	bx	lr
    1542:	46c0      	nop			; (mov r8, r8)
    1544:	2000091c 	.word	0x2000091c
    1548:	200029e8 	.word	0x200029e8

0000154c <usart_write_callback>:
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    154c:	2280      	movs	r2, #128	; 0x80
    154e:	01d2      	lsls	r2, r2, #7
    1550:	4b01      	ldr	r3, [pc, #4]	; (1558 <usart_write_callback+0xc>)
    1552:	61da      	str	r2, [r3, #28]
}

void usart_write_callback(const struct usart_module *const usart_module)
{
	port_pin_toggle_output_level(LED_0_PIN);
}
    1554:	4770      	bx	lr
    1556:	46c0      	nop			; (mov r8, r8)
    1558:	41004400 	.word	0x41004400

0000155c <usart_read_callback>:
/************************************************************************/
/* Subroutines                                                          */
/************************************************************************/

void usart_read_callback(const struct usart_module *const usart_module)
{
    155c:	b508      	push	{r3, lr}
	usart_write_buffer_job(&usart_instance,
    155e:	4803      	ldr	r0, [pc, #12]	; (156c <usart_read_callback+0x10>)
    1560:	4903      	ldr	r1, [pc, #12]	; (1570 <usart_read_callback+0x14>)
    1562:	2205      	movs	r2, #5
    1564:	4b03      	ldr	r3, [pc, #12]	; (1574 <usart_read_callback+0x18>)
    1566:	4798      	blx	r3
	(uint8_t *)rx_buffer, MAX_RX_BUFFER_LENGTH);
}
    1568:	bd08      	pop	{r3, pc}
    156a:	46c0      	nop			; (mov r8, r8)
    156c:	20000994 	.word	0x20000994
    1570:	200009b8 	.word	0x200009b8
    1574:	00000b85 	.word	0x00000b85

00001578 <enable_tc_clocks>:
/************************************************************************/
/* INIT Clocks                                                          */
/************************************************************************/

void enable_tc_clocks(void)
{
    1578:	b500      	push	{lr}
    157a:	b083      	sub	sp, #12
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    157c:	4b08      	ldr	r3, [pc, #32]	; (15a0 <enable_tc_clocks+0x28>)
    157e:	6a19      	ldr	r1, [r3, #32]
    1580:	2280      	movs	r2, #128	; 0x80
    1582:	0112      	lsls	r2, r2, #4
    1584:	430a      	orrs	r2, r1
    1586:	621a      	str	r2, [r3, #32]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    1588:	a901      	add	r1, sp, #4
    158a:	2300      	movs	r3, #0
    158c:	700b      	strb	r3, [r1, #0]
	/* Set up the GCLK for the module */
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	
	//Setup generic clock 0 (also the clock for MCU (running at 8 Mhz) as source for the timer clock)
	gclk_chan_conf.source_generator = GCLK_GENERATOR_0;
	system_gclk_chan_set_config(TC3_GCLK_ID, &gclk_chan_conf);
    158e:	2014      	movs	r0, #20
    1590:	4b04      	ldr	r3, [pc, #16]	; (15a4 <enable_tc_clocks+0x2c>)
    1592:	4798      	blx	r3
	
	//Enable the generic clock for the Timer/ Counter block
	system_gclk_chan_enable(TC3_GCLK_ID);
    1594:	2014      	movs	r0, #20
    1596:	4b04      	ldr	r3, [pc, #16]	; (15a8 <enable_tc_clocks+0x30>)
    1598:	4798      	blx	r3
}
    159a:	b003      	add	sp, #12
    159c:	bd00      	pop	{pc}
    159e:	46c0      	nop			; (mov r8, r8)
    15a0:	40000400 	.word	0x40000400
    15a4:	00001361 	.word	0x00001361
    15a8:	000012d1 	.word	0x000012d1

000015ac <configure_adc>:
/************************************************************************/
/* INIT ADC                                                             */
/************************************************************************/

void configure_adc(void)
{
    15ac:	b510      	push	{r4, lr}
    15ae:	b08c      	sub	sp, #48	; 0x30
 *                     default values
 */
static inline void adc_get_config_defaults(struct adc_config *const config)
{
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
    15b0:	2300      	movs	r3, #0
    15b2:	4669      	mov	r1, sp
    15b4:	700b      	strb	r3, [r1, #0]
	config->reference                     = ADC_REFERENCE_INT1V;
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV4;
	config->resolution                    = ADC_RESOLUTION_12BIT;
    15b6:	710b      	strb	r3, [r1, #4]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
    15b8:	760b      	strb	r3, [r1, #24]
	config->window.window_upper_value     = 0;
    15ba:	9308      	str	r3, [sp, #32]
	config->window.window_lower_value     = 0;
    15bc:	9307      	str	r3, [sp, #28]
#if SAMR21
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6 ;
#else
	config->positive_input                = ADC_POSITIVE_INPUT_PIN0 ;
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND ;
    15be:	22c0      	movs	r2, #192	; 0xc0
    15c0:	0152      	lsls	r2, r2, #5
    15c2:	81ca      	strh	r2, [r1, #14]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
    15c4:	740b      	strb	r3, [r1, #16]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
    15c6:	744b      	strb	r3, [r1, #17]
	config->left_adjust                   = false;
    15c8:	748b      	strb	r3, [r1, #18]
	config->differential_mode             = false;
    15ca:	74cb      	strb	r3, [r1, #19]
	config->freerunning                   = false;
    15cc:	750b      	strb	r3, [r1, #20]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
    15ce:	222a      	movs	r2, #42	; 0x2a
    15d0:	548b      	strb	r3, [r1, r2]
	config->run_in_standby                = false;
    15d2:	754b      	strb	r3, [r1, #21]
	config->reference_compensation_enable = false;
    15d4:	758b      	strb	r3, [r1, #22]
	config->correction.correction_enable  = false;
    15d6:	2224      	movs	r2, #36	; 0x24
    15d8:	548b      	strb	r3, [r1, r2]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
    15da:	2200      	movs	r2, #0
    15dc:	84cb      	strh	r3, [r1, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
    15de:	850b      	strh	r3, [r1, #40]	; 0x28
	config->sample_length                 = 0;
    15e0:	75ca      	strb	r2, [r1, #23]
	config->pin_scan.offset_start_scan    = 0;
    15e2:	232b      	movs	r3, #43	; 0x2b
    15e4:	54ca      	strb	r2, [r1, r3]
	config->pin_scan.inputs_to_scan       = 0;
    15e6:	232c      	movs	r3, #44	; 0x2c
    15e8:	54ca      	strb	r2, [r1, r3]
	
	// Pre configure with defaults 
	adc_get_config_defaults(&config_adc);
	
	// Customize
	config_adc.gain_factor     = ADC_GAIN_FACTOR_DIV2;
    15ea:	23f0      	movs	r3, #240	; 0xf0
    15ec:	051b      	lsls	r3, r3, #20
    15ee:	9302      	str	r3, [sp, #8]
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV8;
    15f0:	2380      	movs	r3, #128	; 0x80
    15f2:	005b      	lsls	r3, r3, #1
    15f4:	466a      	mov	r2, sp
    15f6:	804b      	strh	r3, [r1, #2]
	config_adc.reference       = ADC_REFERENCE_INTVCC1;
    15f8:	2302      	movs	r3, #2
    15fa:	704b      	strb	r3, [r1, #1]
	config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN8;	// PB00 on ext1
    15fc:	2308      	movs	r3, #8
    15fe:	730b      	strb	r3, [r1, #12]
	config_adc.resolution      = ADC_RESOLUTION_12BIT;
	
	// INIT and Enable
	adc_init(&adc_instance, ADC, &config_adc);
    1600:	4c0e      	ldr	r4, [pc, #56]	; (163c <configure_adc+0x90>)
    1602:	1c20      	adds	r0, r4, #0
    1604:	490e      	ldr	r1, [pc, #56]	; (1640 <configure_adc+0x94>)
    1606:	4b0f      	ldr	r3, [pc, #60]	; (1644 <configure_adc+0x98>)
    1608:	4798      	blx	r3
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    160a:	6823      	ldr	r3, [r4, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    160c:	699a      	ldr	r2, [r3, #24]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
    160e:	0411      	lsls	r1, r2, #16
    1610:	d4fc      	bmi.n	160c <configure_adc+0x60>
		/* Wait for synchronization */
	}

	/* Make sure bandgap is enabled if requested by the config */
	if (module_inst->reference == ADC_REFERENCE_INT1V) {
    1612:	4a0a      	ldr	r2, [pc, #40]	; (163c <configure_adc+0x90>)
    1614:	7912      	ldrb	r2, [r2, #4]
    1616:	2a00      	cmp	r2, #0
    1618:	d104      	bne.n	1624 <configure_adc+0x78>
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_TSEN;
			break;

		case SYSTEM_VOLTAGE_REFERENCE_BANDGAP:
			SYSCTRL->VREF.reg |= SYSCTRL_VREF_BGOUTEN;
    161a:	4a0b      	ldr	r2, [pc, #44]	; (1648 <configure_adc+0x9c>)
    161c:	6c10      	ldr	r0, [r2, #64]	; 0x40
    161e:	2104      	movs	r1, #4
    1620:	4301      	orrs	r1, r0
    1622:	6411      	str	r1, [r2, #64]	; 0x40
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1624:	2180      	movs	r1, #128	; 0x80
    1626:	0389      	lsls	r1, r1, #14
    1628:	4a08      	ldr	r2, [pc, #32]	; (164c <configure_adc+0xa0>)
    162a:	6011      	str	r1, [r2, #0]

#if ADC_CALLBACK_MODE == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_ADC);
#endif

	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    162c:	681a      	ldr	r2, [r3, #0]
    162e:	b2d2      	uxtb	r2, r2
    1630:	2102      	movs	r1, #2
    1632:	430a      	orrs	r2, r1
    1634:	701a      	strb	r2, [r3, #0]
	adc_enable(&adc_instance);
}
    1636:	b00c      	add	sp, #48	; 0x30
    1638:	bd10      	pop	{r4, pc}
    163a:	46c0      	nop			; (mov r8, r8)
    163c:	200009c0 	.word	0x200009c0
    1640:	42004000 	.word	0x42004000
    1644:	00000161 	.word	0x00000161
    1648:	40000800 	.word	0x40000800
    164c:	e000e100 	.word	0xe000e100

00001650 <configure_usart>:
/************************************************************************/
/* INIT USART                                                           */
/************************************************************************/

void configure_usart(void)
{
    1650:	b570      	push	{r4, r5, r6, lr}
    1652:	b08c      	sub	sp, #48	; 0x30
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1654:	2380      	movs	r3, #128	; 0x80
    1656:	05db      	lsls	r3, r3, #23
    1658:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    165a:	2300      	movs	r3, #0
    165c:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    165e:	22ff      	movs	r2, #255	; 0xff
    1660:	4669      	mov	r1, sp
    1662:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    1664:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1666:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    1668:	2201      	movs	r2, #1
    166a:	750a      	strb	r2, [r1, #20]
	config->transmitter_enable = true;
    166c:	754a      	strb	r2, [r1, #21]
	config->clock_polarity_inverted = false;
    166e:	758b      	strb	r3, [r1, #22]
	config->use_external_clock = false;
    1670:	75cb      	strb	r3, [r1, #23]
	config->ext_clock_freq   = 0;
    1672:	9306      	str	r3, [sp, #24]
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    1674:	770b      	strb	r3, [r1, #28]
	config->generator_source = GCLK_GENERATOR_0;
    1676:	774b      	strb	r3, [r1, #29]
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);
	config_usart.baudrate    = 115200;
    1678:	23e1      	movs	r3, #225	; 0xe1
    167a:	025b      	lsls	r3, r3, #9
    167c:	9304      	str	r3, [sp, #16]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    167e:	23c4      	movs	r3, #196	; 0xc4
    1680:	039b      	lsls	r3, r3, #14
    1682:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    1684:	2301      	movs	r3, #1
    1686:	425b      	negs	r3, r3
    1688:	9308      	str	r3, [sp, #32]
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    168a:	9309      	str	r3, [sp, #36]	; 0x24
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    168c:	4b11      	ldr	r3, [pc, #68]	; (16d4 <configure_usart+0x84>)
    168e:	930a      	str	r3, [sp, #40]	; 0x28
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    1690:	4b11      	ldr	r3, [pc, #68]	; (16d8 <configure_usart+0x88>)
    1692:	930b      	str	r3, [sp, #44]	; 0x2c
	while (usart_init(&usart_instance,
    1694:	4e11      	ldr	r6, [pc, #68]	; (16dc <configure_usart+0x8c>)
    1696:	4d12      	ldr	r5, [pc, #72]	; (16e0 <configure_usart+0x90>)
    1698:	4c12      	ldr	r4, [pc, #72]	; (16e4 <configure_usart+0x94>)
    169a:	1c30      	adds	r0, r6, #0
    169c:	1c29      	adds	r1, r5, #0
    169e:	466a      	mov	r2, sp
    16a0:	47a0      	blx	r4
    16a2:	2800      	cmp	r0, #0
    16a4:	d1f9      	bne.n	169a <configure_usart+0x4a>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    16a6:	4d0d      	ldr	r5, [pc, #52]	; (16dc <configure_usart+0x8c>)
    16a8:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    16aa:	1c20      	adds	r0, r4, #0
    16ac:	4b0e      	ldr	r3, [pc, #56]	; (16e8 <configure_usart+0x98>)
    16ae:	4798      	blx	r3
    16b0:	231f      	movs	r3, #31
    16b2:	4018      	ands	r0, r3
    16b4:	2301      	movs	r3, #1
    16b6:	4083      	lsls	r3, r0
    16b8:	1c18      	adds	r0, r3, #0
    16ba:	4b0c      	ldr	r3, [pc, #48]	; (16ec <configure_usart+0x9c>)
    16bc:	6018      	str	r0, [r3, #0]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    16be:	682a      	ldr	r2, [r5, #0]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    16c0:	6913      	ldr	r3, [r2, #16]
		const struct usart_module *const module)
{
	/* Sanity check. */
	Assert(module);

	while (usart_is_syncing(module)) {
    16c2:	0419      	lsls	r1, r3, #16
    16c4:	d4fc      	bmi.n	16c0 <configure_usart+0x70>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    16c6:	6822      	ldr	r2, [r4, #0]
    16c8:	2302      	movs	r3, #2
    16ca:	4313      	orrs	r3, r2
    16cc:	6023      	str	r3, [r4, #0]
	EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
	}
	usart_enable(&usart_instance);
}
    16ce:	b00c      	add	sp, #48	; 0x30
    16d0:	bd70      	pop	{r4, r5, r6, pc}
    16d2:	46c0      	nop			; (mov r8, r8)
    16d4:	00180002 	.word	0x00180002
    16d8:	00190002 	.word	0x00190002
    16dc:	20000994 	.word	0x20000994
    16e0:	42001400 	.word	0x42001400
    16e4:	00000935 	.word	0x00000935
    16e8:	00000d69 	.word	0x00000d69
    16ec:	e000e100 	.word	0xe000e100

000016f0 <configure_usart_callbacks>:

void configure_usart_callbacks(void)
{
    16f0:	b538      	push	{r3, r4, r5, lr}
	usart_register_callback(&usart_instance,
    16f2:	4c08      	ldr	r4, [pc, #32]	; (1714 <configure_usart_callbacks+0x24>)
    16f4:	1c20      	adds	r0, r4, #0
    16f6:	4908      	ldr	r1, [pc, #32]	; (1718 <configure_usart_callbacks+0x28>)
    16f8:	2200      	movs	r2, #0
    16fa:	4d08      	ldr	r5, [pc, #32]	; (171c <configure_usart_callbacks+0x2c>)
    16fc:	47a8      	blx	r5
	usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_register_callback(&usart_instance,
    16fe:	1c20      	adds	r0, r4, #0
    1700:	4907      	ldr	r1, [pc, #28]	; (1720 <configure_usart_callbacks+0x30>)
    1702:	2201      	movs	r2, #1
    1704:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    1706:	2321      	movs	r3, #33	; 0x21
    1708:	5ce1      	ldrb	r1, [r4, r3]
    170a:	2203      	movs	r2, #3
    170c:	430a      	orrs	r2, r1
    170e:	54e2      	strb	r2, [r4, r3]
	usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
}
    1710:	bd38      	pop	{r3, r4, r5, pc}
    1712:	46c0      	nop			; (mov r8, r8)
    1714:	20000994 	.word	0x20000994
    1718:	0000154d 	.word	0x0000154d
    171c:	00000b6d 	.word	0x00000b6d
    1720:	0000155d 	.word	0x0000155d

00001724 <main>:
/************************************************************************/
/* Main                                                                 */
/************************************************************************/

int main (void)
{
    1724:	b5f0      	push	{r4, r5, r6, r7, lr}
    1726:	4647      	mov	r7, r8
    1728:	b480      	push	{r7}
    172a:	b0a0      	sub	sp, #128	; 0x80
	system_init();
    172c:	4b37      	ldr	r3, [pc, #220]	; (180c <main+0xe8>)
    172e:	4798      	blx	r3
	system_clock_init();
    1730:	4b37      	ldr	r3, [pc, #220]	; (1810 <main+0xec>)
    1732:	4798      	blx	r3
	
	enable_tc_clocks();
    1734:	4b37      	ldr	r3, [pc, #220]	; (1814 <main+0xf0>)
    1736:	4798      	blx	r3
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
    1738:	4b37      	ldr	r3, [pc, #220]	; (1818 <main+0xf4>)
    173a:	4a38      	ldr	r2, [pc, #224]	; (181c <main+0xf8>)
    173c:	605a      	str	r2, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    173e:	4a38      	ldr	r2, [pc, #224]	; (1820 <main+0xfc>)
    1740:	6a10      	ldr	r0, [r2, #32]
    1742:	0200      	lsls	r0, r0, #8
    1744:	0a00      	lsrs	r0, r0, #8
    1746:	21c0      	movs	r1, #192	; 0xc0
    1748:	0609      	lsls	r1, r1, #24
    174a:	4301      	orrs	r1, r0
    174c:	6211      	str	r1, [r2, #32]
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
    174e:	2200      	movs	r2, #0
    1750:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    1752:	2207      	movs	r2, #7
    1754:	601a      	str	r2, [r3, #0]
	SysTick_Config(8000);
	
	configure_adc();
    1756:	4b33      	ldr	r3, [pc, #204]	; (1824 <main+0x100>)
    1758:	4798      	blx	r3
	
	configure_usart();
    175a:	4b33      	ldr	r3, [pc, #204]	; (1828 <main+0x104>)
    175c:	4798      	blx	r3
	configure_usart_callbacks();
    175e:	4b33      	ldr	r3, [pc, #204]	; (182c <main+0x108>)
    1760:	4798      	blx	r3
	
	uint8_t string[] = "This is the SAMD20 with your ADC readings!\r\n";
    1762:	a914      	add	r1, sp, #80	; 0x50
    1764:	4a32      	ldr	r2, [pc, #200]	; (1830 <main+0x10c>)
    1766:	1c0b      	adds	r3, r1, #0
    1768:	ca31      	ldmia	r2!, {r0, r4, r5}
    176a:	c331      	stmia	r3!, {r0, r4, r5}
    176c:	ca31      	ldmia	r2!, {r0, r4, r5}
    176e:	c331      	stmia	r3!, {r0, r4, r5}
    1770:	ca31      	ldmia	r2!, {r0, r4, r5}
    1772:	c331      	stmia	r3!, {r0, r4, r5}
    1774:	ca11      	ldmia	r2!, {r0, r4}
    1776:	c311      	stmia	r3!, {r0, r4}
    1778:	7812      	ldrb	r2, [r2, #0]
    177a:	701a      	strb	r2, [r3, #0]
	usart_write_buffer_job(&usart_instance, string, sizeof(string));
    177c:	482d      	ldr	r0, [pc, #180]	; (1834 <main+0x110>)
    177e:	222d      	movs	r2, #45	; 0x2d
    1780:	4b2d      	ldr	r3, [pc, #180]	; (1838 <main+0x114>)
    1782:	4798      	blx	r3
	 
	while (1)
	{
		if(sys_timer1 > 1000)
    1784:	4d2d      	ldr	r5, [pc, #180]	; (183c <main+0x118>)
		struct adc_module *const module_inst)
{
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
    1786:	4f2e      	ldr	r7, [pc, #184]	; (1840 <main+0x11c>)
				// Wait for ADC conversion
			} while (adc_read(&adc_instance, &result) == STATUS_BUSY);
			
			// Convert reading to a string and write the buffer
			char tx_buffer[80];
			sprintf(tx_buffer, "ADC Reading = %u\r\n", result);
    1788:	482e      	ldr	r0, [pc, #184]	; (1844 <main+0x120>)
    178a:	4680      	mov	r8, r0
	uint8_t string[] = "This is the SAMD20 with your ADC readings!\r\n";
	usart_write_buffer_job(&usart_instance, string, sizeof(string));
	 
	while (1)
	{
		if(sys_timer1 > 1000)
    178c:	22fa      	movs	r2, #250	; 0xfa
    178e:	0092      	lsls	r2, r2, #2
    1790:	682b      	ldr	r3, [r5, #0]
    1792:	4293      	cmp	r3, r2
    1794:	d9fc      	bls.n	1790 <main+0x6c>
    1796:	6838      	ldr	r0, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    1798:	6983      	ldr	r3, [r0, #24]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
    179a:	041a      	lsls	r2, r3, #16
    179c:	d4fc      	bmi.n	1798 <main+0x74>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    179e:	68c3      	ldr	r3, [r0, #12]
    17a0:	b2db      	uxtb	r3, r3
    17a2:	2202      	movs	r2, #2
    17a4:	4313      	orrs	r3, r2
    17a6:	7303      	strb	r3, [r0, #12]
	uint32_t int_flags = adc_module->INTFLAG.reg;

	uint32_t status_flags = 0;

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    17a8:	2401      	movs	r4, #1
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    17aa:	2604      	movs	r6, #4
		status_flags |= ADC_STATUS_WINDOW;
    17ac:	2102      	movs	r1, #2
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	uint32_t int_flags = adc_module->INTFLAG.reg;
    17ae:	6982      	ldr	r2, [r0, #24]
    17b0:	b2d2      	uxtb	r2, r2

	uint32_t status_flags = 0;

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    17b2:	1c23      	adds	r3, r4, #0
    17b4:	4013      	ands	r3, r2
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    17b6:	4216      	tst	r6, r2
    17b8:	d000      	beq.n	17bc <main+0x98>
		status_flags |= ADC_STATUS_WINDOW;
    17ba:	430b      	orrs	r3, r1
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    17bc:	4211      	tst	r1, r2
    17be:	d000      	beq.n	17c2 <main+0x9e>
		status_flags |= ADC_STATUS_OVERRUN;
    17c0:	4333      	orrs	r3, r6
{
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(result);

	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    17c2:	421c      	tst	r4, r3
    17c4:	d0f3      	beq.n	17ae <main+0x8a>
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
    17c6:	6983      	ldr	r3, [r0, #24]
		return STATUS_BUSY;
	}

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
    17c8:	041c      	lsls	r4, r3, #16
    17ca:	d4fc      	bmi.n	17c6 <main+0xa2>
		/* Wait for synchronization */
	}

	/* Get ADC result */
	*result = adc_module->RESULT.reg;
    17cc:	6982      	ldr	r2, [r0, #24]
    17ce:	0c12      	lsrs	r2, r2, #16
	if (status_flags & ADC_STATUS_OVERRUN) {
		int_flags |= ADC_INTFLAG_OVERRUN;
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    17d0:	2101      	movs	r1, #1
    17d2:	7601      	strb	r1, [r0, #24]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	uint32_t int_flags = adc_module->INTFLAG.reg;
    17d4:	6983      	ldr	r3, [r0, #24]
    17d6:	b2db      	uxtb	r3, r3

	uint32_t status_flags = 0;

	/* Check for ADC Result Ready */
	if (int_flags & ADC_INTFLAG_RESRDY) {
    17d8:	4019      	ands	r1, r3
		status_flags |= ADC_STATUS_RESULT_READY;
	}

	/* Check for ADC Window Match */
	if (int_flags & ADC_INTFLAG_WINMON) {
    17da:	075c      	lsls	r4, r3, #29
    17dc:	d501      	bpl.n	17e2 <main+0xbe>
		status_flags |= ADC_STATUS_WINDOW;
    17de:	2402      	movs	r4, #2
    17e0:	4321      	orrs	r1, r4
	}

	/* Check for ADC Overrun */
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    17e2:	079c      	lsls	r4, r3, #30
    17e4:	d501      	bpl.n	17ea <main+0xc6>
		status_flags |= ADC_STATUS_OVERRUN;
    17e6:	2304      	movs	r3, #4
    17e8:	4319      	orrs	r1, r3
	*result = adc_module->RESULT.reg;

	/* Reset ready flag */
	adc_clear_status(module_inst, ADC_STATUS_RESULT_READY);

	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    17ea:	074b      	lsls	r3, r1, #29
    17ec:	d501      	bpl.n	17f2 <main+0xce>
	if (status_flags & ADC_STATUS_OVERRUN) {
		int_flags |= ADC_INTFLAG_OVERRUN;
	}

	/* Clear interrupt flag */
	adc_module->INTFLAG.reg = int_flags;
    17ee:	2302      	movs	r3, #2
    17f0:	7603      	strb	r3, [r0, #24]
				// Wait for ADC conversion
			} while (adc_read(&adc_instance, &result) == STATUS_BUSY);
			
			// Convert reading to a string and write the buffer
			char tx_buffer[80];
			sprintf(tx_buffer, "ADC Reading = %u\r\n", result);
    17f2:	4668      	mov	r0, sp
    17f4:	4641      	mov	r1, r8
    17f6:	4b14      	ldr	r3, [pc, #80]	; (1848 <main+0x124>)
    17f8:	4798      	blx	r3
			usart_write_buffer_job(&usart_instance, tx_buffer, sizeof(tx_buffer));
    17fa:	480e      	ldr	r0, [pc, #56]	; (1834 <main+0x110>)
    17fc:	4669      	mov	r1, sp
    17fe:	2250      	movs	r2, #80	; 0x50
    1800:	4b0d      	ldr	r3, [pc, #52]	; (1838 <main+0x114>)
    1802:	4798      	blx	r3
			
			// Reset sys_timer1
			sys_timer1 = 0;	
    1804:	2200      	movs	r2, #0
    1806:	4b0d      	ldr	r3, [pc, #52]	; (183c <main+0x118>)
    1808:	601a      	str	r2, [r3, #0]
    180a:	e7bf      	b.n	178c <main+0x68>
    180c:	00001471 	.word	0x00001471
    1810:	000010bd 	.word	0x000010bd
    1814:	00001579 	.word	0x00001579
    1818:	e000e010 	.word	0xe000e010
    181c:	00001f3f 	.word	0x00001f3f
    1820:	e000ed00 	.word	0xe000ed00
    1824:	000015ad 	.word	0x000015ad
    1828:	00001651 	.word	0x00001651
    182c:	000016f1 	.word	0x000016f1
    1830:	00007a44 	.word	0x00007a44
    1834:	20000994 	.word	0x20000994
    1838:	00000b85 	.word	0x00000b85
    183c:	20000920 	.word	0x20000920
    1840:	200009c0 	.word	0x200009c0
    1844:	00007a30 	.word	0x00007a30
    1848:	00002241 	.word	0x00002241

0000184c <SysTick_Handler>:
	port_pin_toggle_output_level(LED_0_PIN);
}

void SysTick_Handler(void)
{
	sys_timer1++;
    184c:	4b02      	ldr	r3, [pc, #8]	; (1858 <SysTick_Handler+0xc>)
    184e:	681a      	ldr	r2, [r3, #0]
    1850:	3201      	adds	r2, #1
    1852:	601a      	str	r2, [r3, #0]
    1854:	4770      	bx	lr
    1856:	46c0      	nop			; (mov r8, r8)
    1858:	20000920 	.word	0x20000920

0000185c <__aeabi_uidiv>:
    185c:	2900      	cmp	r1, #0
    185e:	d034      	beq.n	18ca <.udivsi3_skip_div0_test+0x6a>

00001860 <.udivsi3_skip_div0_test>:
    1860:	2301      	movs	r3, #1
    1862:	2200      	movs	r2, #0
    1864:	b410      	push	{r4}
    1866:	4288      	cmp	r0, r1
    1868:	d32c      	bcc.n	18c4 <.udivsi3_skip_div0_test+0x64>
    186a:	2401      	movs	r4, #1
    186c:	0724      	lsls	r4, r4, #28
    186e:	42a1      	cmp	r1, r4
    1870:	d204      	bcs.n	187c <.udivsi3_skip_div0_test+0x1c>
    1872:	4281      	cmp	r1, r0
    1874:	d202      	bcs.n	187c <.udivsi3_skip_div0_test+0x1c>
    1876:	0109      	lsls	r1, r1, #4
    1878:	011b      	lsls	r3, r3, #4
    187a:	e7f8      	b.n	186e <.udivsi3_skip_div0_test+0xe>
    187c:	00e4      	lsls	r4, r4, #3
    187e:	42a1      	cmp	r1, r4
    1880:	d204      	bcs.n	188c <.udivsi3_skip_div0_test+0x2c>
    1882:	4281      	cmp	r1, r0
    1884:	d202      	bcs.n	188c <.udivsi3_skip_div0_test+0x2c>
    1886:	0049      	lsls	r1, r1, #1
    1888:	005b      	lsls	r3, r3, #1
    188a:	e7f8      	b.n	187e <.udivsi3_skip_div0_test+0x1e>
    188c:	4288      	cmp	r0, r1
    188e:	d301      	bcc.n	1894 <.udivsi3_skip_div0_test+0x34>
    1890:	1a40      	subs	r0, r0, r1
    1892:	431a      	orrs	r2, r3
    1894:	084c      	lsrs	r4, r1, #1
    1896:	42a0      	cmp	r0, r4
    1898:	d302      	bcc.n	18a0 <.udivsi3_skip_div0_test+0x40>
    189a:	1b00      	subs	r0, r0, r4
    189c:	085c      	lsrs	r4, r3, #1
    189e:	4322      	orrs	r2, r4
    18a0:	088c      	lsrs	r4, r1, #2
    18a2:	42a0      	cmp	r0, r4
    18a4:	d302      	bcc.n	18ac <.udivsi3_skip_div0_test+0x4c>
    18a6:	1b00      	subs	r0, r0, r4
    18a8:	089c      	lsrs	r4, r3, #2
    18aa:	4322      	orrs	r2, r4
    18ac:	08cc      	lsrs	r4, r1, #3
    18ae:	42a0      	cmp	r0, r4
    18b0:	d302      	bcc.n	18b8 <.udivsi3_skip_div0_test+0x58>
    18b2:	1b00      	subs	r0, r0, r4
    18b4:	08dc      	lsrs	r4, r3, #3
    18b6:	4322      	orrs	r2, r4
    18b8:	2800      	cmp	r0, #0
    18ba:	d003      	beq.n	18c4 <.udivsi3_skip_div0_test+0x64>
    18bc:	091b      	lsrs	r3, r3, #4
    18be:	d001      	beq.n	18c4 <.udivsi3_skip_div0_test+0x64>
    18c0:	0909      	lsrs	r1, r1, #4
    18c2:	e7e3      	b.n	188c <.udivsi3_skip_div0_test+0x2c>
    18c4:	1c10      	adds	r0, r2, #0
    18c6:	bc10      	pop	{r4}
    18c8:	4770      	bx	lr
    18ca:	2800      	cmp	r0, #0
    18cc:	d001      	beq.n	18d2 <.udivsi3_skip_div0_test+0x72>
    18ce:	2000      	movs	r0, #0
    18d0:	43c0      	mvns	r0, r0
    18d2:	b407      	push	{r0, r1, r2}
    18d4:	4802      	ldr	r0, [pc, #8]	; (18e0 <.udivsi3_skip_div0_test+0x80>)
    18d6:	a102      	add	r1, pc, #8	; (adr r1, 18e0 <.udivsi3_skip_div0_test+0x80>)
    18d8:	1840      	adds	r0, r0, r1
    18da:	9002      	str	r0, [sp, #8]
    18dc:	bd03      	pop	{r0, r1, pc}
    18de:	46c0      	nop			; (mov r8, r8)
    18e0:	00000019 	.word	0x00000019

000018e4 <__aeabi_uidivmod>:
    18e4:	2900      	cmp	r1, #0
    18e6:	d0f0      	beq.n	18ca <.udivsi3_skip_div0_test+0x6a>
    18e8:	b503      	push	{r0, r1, lr}
    18ea:	f7ff ffb9 	bl	1860 <.udivsi3_skip_div0_test>
    18ee:	bc0e      	pop	{r1, r2, r3}
    18f0:	4342      	muls	r2, r0
    18f2:	1a89      	subs	r1, r1, r2
    18f4:	4718      	bx	r3
    18f6:	46c0      	nop			; (mov r8, r8)

000018f8 <__aeabi_idiv0>:
    18f8:	4770      	bx	lr
    18fa:	46c0      	nop			; (mov r8, r8)

000018fc <__aeabi_uldivmod>:
    18fc:	2b00      	cmp	r3, #0
    18fe:	d111      	bne.n	1924 <__aeabi_uldivmod+0x28>
    1900:	2a00      	cmp	r2, #0
    1902:	d10f      	bne.n	1924 <__aeabi_uldivmod+0x28>
    1904:	2900      	cmp	r1, #0
    1906:	d100      	bne.n	190a <__aeabi_uldivmod+0xe>
    1908:	2800      	cmp	r0, #0
    190a:	d002      	beq.n	1912 <__aeabi_uldivmod+0x16>
    190c:	2100      	movs	r1, #0
    190e:	43c9      	mvns	r1, r1
    1910:	1c08      	adds	r0, r1, #0
    1912:	b407      	push	{r0, r1, r2}
    1914:	4802      	ldr	r0, [pc, #8]	; (1920 <__aeabi_uldivmod+0x24>)
    1916:	a102      	add	r1, pc, #8	; (adr r1, 1920 <__aeabi_uldivmod+0x24>)
    1918:	1840      	adds	r0, r0, r1
    191a:	9002      	str	r0, [sp, #8]
    191c:	bd03      	pop	{r0, r1, pc}
    191e:	46c0      	nop			; (mov r8, r8)
    1920:	ffffffd9 	.word	0xffffffd9
    1924:	b403      	push	{r0, r1}
    1926:	4668      	mov	r0, sp
    1928:	b501      	push	{r0, lr}
    192a:	9802      	ldr	r0, [sp, #8]
    192c:	f000 f844 	bl	19b8 <__gnu_uldivmod_helper>
    1930:	9b01      	ldr	r3, [sp, #4]
    1932:	469e      	mov	lr, r3
    1934:	b002      	add	sp, #8
    1936:	bc0c      	pop	{r2, r3}
    1938:	4770      	bx	lr
    193a:	46c0      	nop			; (mov r8, r8)

0000193c <__aeabi_lmul>:
    193c:	469c      	mov	ip, r3
    193e:	0403      	lsls	r3, r0, #16
    1940:	b5f0      	push	{r4, r5, r6, r7, lr}
    1942:	0c1b      	lsrs	r3, r3, #16
    1944:	0417      	lsls	r7, r2, #16
    1946:	0c3f      	lsrs	r7, r7, #16
    1948:	0c15      	lsrs	r5, r2, #16
    194a:	1c1e      	adds	r6, r3, #0
    194c:	1c04      	adds	r4, r0, #0
    194e:	0c00      	lsrs	r0, r0, #16
    1950:	437e      	muls	r6, r7
    1952:	436b      	muls	r3, r5
    1954:	4347      	muls	r7, r0
    1956:	4345      	muls	r5, r0
    1958:	18fb      	adds	r3, r7, r3
    195a:	0c30      	lsrs	r0, r6, #16
    195c:	1818      	adds	r0, r3, r0
    195e:	4287      	cmp	r7, r0
    1960:	d902      	bls.n	1968 <__aeabi_lmul+0x2c>
    1962:	2380      	movs	r3, #128	; 0x80
    1964:	025b      	lsls	r3, r3, #9
    1966:	18ed      	adds	r5, r5, r3
    1968:	0c03      	lsrs	r3, r0, #16
    196a:	18ed      	adds	r5, r5, r3
    196c:	4663      	mov	r3, ip
    196e:	435c      	muls	r4, r3
    1970:	434a      	muls	r2, r1
    1972:	0436      	lsls	r6, r6, #16
    1974:	0c36      	lsrs	r6, r6, #16
    1976:	18a1      	adds	r1, r4, r2
    1978:	0400      	lsls	r0, r0, #16
    197a:	1980      	adds	r0, r0, r6
    197c:	1949      	adds	r1, r1, r5
    197e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001980 <__gnu_ldivmod_helper>:
    1980:	b5f0      	push	{r4, r5, r6, r7, lr}
    1982:	b083      	sub	sp, #12
    1984:	1c16      	adds	r6, r2, #0
    1986:	1c1f      	adds	r7, r3, #0
    1988:	9000      	str	r0, [sp, #0]
    198a:	9101      	str	r1, [sp, #4]
    198c:	f000 f82e 	bl	19ec <__divdi3>
    1990:	1c04      	adds	r4, r0, #0
    1992:	1c0d      	adds	r5, r1, #0
    1994:	1c22      	adds	r2, r4, #0
    1996:	1c2b      	adds	r3, r5, #0
    1998:	1c30      	adds	r0, r6, #0
    199a:	1c39      	adds	r1, r7, #0
    199c:	f7ff ffce 	bl	193c <__aeabi_lmul>
    19a0:	9a00      	ldr	r2, [sp, #0]
    19a2:	9b01      	ldr	r3, [sp, #4]
    19a4:	1a12      	subs	r2, r2, r0
    19a6:	418b      	sbcs	r3, r1
    19a8:	9908      	ldr	r1, [sp, #32]
    19aa:	1c20      	adds	r0, r4, #0
    19ac:	600a      	str	r2, [r1, #0]
    19ae:	604b      	str	r3, [r1, #4]
    19b0:	1c29      	adds	r1, r5, #0
    19b2:	b003      	add	sp, #12
    19b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19b6:	46c0      	nop			; (mov r8, r8)

000019b8 <__gnu_uldivmod_helper>:
    19b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    19ba:	b083      	sub	sp, #12
    19bc:	1c14      	adds	r4, r2, #0
    19be:	1c1d      	adds	r5, r3, #0
    19c0:	9000      	str	r0, [sp, #0]
    19c2:	9101      	str	r1, [sp, #4]
    19c4:	f000 f9ea 	bl	1d9c <__udivdi3>
    19c8:	1c22      	adds	r2, r4, #0
    19ca:	1c2b      	adds	r3, r5, #0
    19cc:	1c06      	adds	r6, r0, #0
    19ce:	1c0f      	adds	r7, r1, #0
    19d0:	f7ff ffb4 	bl	193c <__aeabi_lmul>
    19d4:	9a00      	ldr	r2, [sp, #0]
    19d6:	9b01      	ldr	r3, [sp, #4]
    19d8:	1a12      	subs	r2, r2, r0
    19da:	418b      	sbcs	r3, r1
    19dc:	9908      	ldr	r1, [sp, #32]
    19de:	1c30      	adds	r0, r6, #0
    19e0:	600a      	str	r2, [r1, #0]
    19e2:	604b      	str	r3, [r1, #4]
    19e4:	1c39      	adds	r1, r7, #0
    19e6:	b003      	add	sp, #12
    19e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    19ea:	46c0      	nop			; (mov r8, r8)

000019ec <__divdi3>:
    19ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    19ee:	4644      	mov	r4, r8
    19f0:	465f      	mov	r7, fp
    19f2:	4656      	mov	r6, sl
    19f4:	464d      	mov	r5, r9
    19f6:	b4f0      	push	{r4, r5, r6, r7}
    19f8:	1c1c      	adds	r4, r3, #0
    19fa:	b085      	sub	sp, #20
    19fc:	2900      	cmp	r1, #0
    19fe:	da00      	bge.n	1a02 <__divdi3+0x16>
    1a00:	e0d9      	b.n	1bb6 <__divdi3+0x1ca>
    1a02:	1c0f      	adds	r7, r1, #0
    1a04:	2100      	movs	r1, #0
    1a06:	1c06      	adds	r6, r0, #0
    1a08:	468a      	mov	sl, r1
    1a0a:	1c10      	adds	r0, r2, #0
    1a0c:	1c19      	adds	r1, r3, #0
    1a0e:	2c00      	cmp	r4, #0
    1a10:	da00      	bge.n	1a14 <__divdi3+0x28>
    1a12:	e0c7      	b.n	1ba4 <__divdi3+0x1b8>
    1a14:	9601      	str	r6, [sp, #4]
    1a16:	9000      	str	r0, [sp, #0]
    1a18:	4689      	mov	r9, r1
    1a1a:	4680      	mov	r8, r0
    1a1c:	2900      	cmp	r1, #0
    1a1e:	d150      	bne.n	1ac2 <__divdi3+0xd6>
    1a20:	42b8      	cmp	r0, r7
    1a22:	d962      	bls.n	1aea <__divdi3+0xfe>
    1a24:	f000 fb7a 	bl	211c <__clzsi2>
    1a28:	2800      	cmp	r0, #0
    1a2a:	d009      	beq.n	1a40 <__divdi3+0x54>
    1a2c:	2320      	movs	r3, #32
    1a2e:	4645      	mov	r5, r8
    1a30:	1c31      	adds	r1, r6, #0
    1a32:	1a1b      	subs	r3, r3, r0
    1a34:	4085      	lsls	r5, r0
    1a36:	4087      	lsls	r7, r0
    1a38:	40d9      	lsrs	r1, r3
    1a3a:	46a8      	mov	r8, r5
    1a3c:	430f      	orrs	r7, r1
    1a3e:	4086      	lsls	r6, r0
    1a40:	4642      	mov	r2, r8
    1a42:	0c14      	lsrs	r4, r2, #16
    1a44:	0413      	lsls	r3, r2, #16
    1a46:	0c1b      	lsrs	r3, r3, #16
    1a48:	1c21      	adds	r1, r4, #0
    1a4a:	1c38      	adds	r0, r7, #0
    1a4c:	469b      	mov	fp, r3
    1a4e:	f7ff ff05 	bl	185c <__aeabi_uidiv>
    1a52:	465b      	mov	r3, fp
    1a54:	4343      	muls	r3, r0
    1a56:	1c05      	adds	r5, r0, #0
    1a58:	1c21      	adds	r1, r4, #0
    1a5a:	1c38      	adds	r0, r7, #0
    1a5c:	4699      	mov	r9, r3
    1a5e:	f7ff ff41 	bl	18e4 <__aeabi_uidivmod>
    1a62:	0c33      	lsrs	r3, r6, #16
    1a64:	0408      	lsls	r0, r1, #16
    1a66:	4318      	orrs	r0, r3
    1a68:	4581      	cmp	r9, r0
    1a6a:	d909      	bls.n	1a80 <__divdi3+0x94>
    1a6c:	4440      	add	r0, r8
    1a6e:	1e6b      	subs	r3, r5, #1
    1a70:	4580      	cmp	r8, r0
    1a72:	d900      	bls.n	1a76 <__divdi3+0x8a>
    1a74:	e177      	b.n	1d66 <__divdi3+0x37a>
    1a76:	4581      	cmp	r9, r0
    1a78:	d800      	bhi.n	1a7c <__divdi3+0x90>
    1a7a:	e174      	b.n	1d66 <__divdi3+0x37a>
    1a7c:	3d02      	subs	r5, #2
    1a7e:	4440      	add	r0, r8
    1a80:	4649      	mov	r1, r9
    1a82:	1a41      	subs	r1, r0, r1
    1a84:	4689      	mov	r9, r1
    1a86:	1c08      	adds	r0, r1, #0
    1a88:	1c21      	adds	r1, r4, #0
    1a8a:	f7ff fee7 	bl	185c <__aeabi_uidiv>
    1a8e:	465a      	mov	r2, fp
    1a90:	4342      	muls	r2, r0
    1a92:	1c07      	adds	r7, r0, #0
    1a94:	1c21      	adds	r1, r4, #0
    1a96:	4648      	mov	r0, r9
    1a98:	4693      	mov	fp, r2
    1a9a:	f7ff ff23 	bl	18e4 <__aeabi_uidivmod>
    1a9e:	0436      	lsls	r6, r6, #16
    1aa0:	0409      	lsls	r1, r1, #16
    1aa2:	0c36      	lsrs	r6, r6, #16
    1aa4:	430e      	orrs	r6, r1
    1aa6:	45b3      	cmp	fp, r6
    1aa8:	d907      	bls.n	1aba <__divdi3+0xce>
    1aaa:	4446      	add	r6, r8
    1aac:	1e7b      	subs	r3, r7, #1
    1aae:	45b0      	cmp	r8, r6
    1ab0:	d802      	bhi.n	1ab8 <__divdi3+0xcc>
    1ab2:	3f02      	subs	r7, #2
    1ab4:	45b3      	cmp	fp, r6
    1ab6:	d800      	bhi.n	1aba <__divdi3+0xce>
    1ab8:	1c1f      	adds	r7, r3, #0
    1aba:	042d      	lsls	r5, r5, #16
    1abc:	432f      	orrs	r7, r5
    1abe:	2400      	movs	r4, #0
    1ac0:	e003      	b.n	1aca <__divdi3+0xde>
    1ac2:	42b9      	cmp	r1, r7
    1ac4:	d960      	bls.n	1b88 <__divdi3+0x19c>
    1ac6:	2400      	movs	r4, #0
    1ac8:	2700      	movs	r7, #0
    1aca:	4652      	mov	r2, sl
    1acc:	1c38      	adds	r0, r7, #0
    1ace:	1c21      	adds	r1, r4, #0
    1ad0:	2a00      	cmp	r2, #0
    1ad2:	d003      	beq.n	1adc <__divdi3+0xf0>
    1ad4:	1c3b      	adds	r3, r7, #0
    1ad6:	2100      	movs	r1, #0
    1ad8:	4258      	negs	r0, r3
    1ada:	41a1      	sbcs	r1, r4
    1adc:	b005      	add	sp, #20
    1ade:	bc3c      	pop	{r2, r3, r4, r5}
    1ae0:	4690      	mov	r8, r2
    1ae2:	4699      	mov	r9, r3
    1ae4:	46a2      	mov	sl, r4
    1ae6:	46ab      	mov	fp, r5
    1ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1aea:	2800      	cmp	r0, #0
    1aec:	d104      	bne.n	1af8 <__divdi3+0x10c>
    1aee:	2001      	movs	r0, #1
    1af0:	2100      	movs	r1, #0
    1af2:	f7ff feb3 	bl	185c <__aeabi_uidiv>
    1af6:	4680      	mov	r8, r0
    1af8:	4640      	mov	r0, r8
    1afa:	f000 fb0f 	bl	211c <__clzsi2>
    1afe:	2800      	cmp	r0, #0
    1b00:	d160      	bne.n	1bc4 <__divdi3+0x1d8>
    1b02:	4641      	mov	r1, r8
    1b04:	4644      	mov	r4, r8
    1b06:	040b      	lsls	r3, r1, #16
    1b08:	1b3c      	subs	r4, r7, r4
    1b0a:	0c1b      	lsrs	r3, r3, #16
    1b0c:	46a3      	mov	fp, r4
    1b0e:	0c0d      	lsrs	r5, r1, #16
    1b10:	9300      	str	r3, [sp, #0]
    1b12:	2401      	movs	r4, #1
    1b14:	1c29      	adds	r1, r5, #0
    1b16:	4658      	mov	r0, fp
    1b18:	f7ff fea0 	bl	185c <__aeabi_uidiv>
    1b1c:	9f00      	ldr	r7, [sp, #0]
    1b1e:	4681      	mov	r9, r0
    1b20:	4347      	muls	r7, r0
    1b22:	1c29      	adds	r1, r5, #0
    1b24:	4658      	mov	r0, fp
    1b26:	f7ff fedd 	bl	18e4 <__aeabi_uidivmod>
    1b2a:	0c33      	lsrs	r3, r6, #16
    1b2c:	0409      	lsls	r1, r1, #16
    1b2e:	4319      	orrs	r1, r3
    1b30:	428f      	cmp	r7, r1
    1b32:	d908      	bls.n	1b46 <__divdi3+0x15a>
    1b34:	464b      	mov	r3, r9
    1b36:	4441      	add	r1, r8
    1b38:	3b01      	subs	r3, #1
    1b3a:	4588      	cmp	r8, r1
    1b3c:	d802      	bhi.n	1b44 <__divdi3+0x158>
    1b3e:	428f      	cmp	r7, r1
    1b40:	d900      	bls.n	1b44 <__divdi3+0x158>
    1b42:	e125      	b.n	1d90 <__divdi3+0x3a4>
    1b44:	4699      	mov	r9, r3
    1b46:	1bc9      	subs	r1, r1, r7
    1b48:	468b      	mov	fp, r1
    1b4a:	1c08      	adds	r0, r1, #0
    1b4c:	1c29      	adds	r1, r5, #0
    1b4e:	f7ff fe85 	bl	185c <__aeabi_uidiv>
    1b52:	9b00      	ldr	r3, [sp, #0]
    1b54:	1c29      	adds	r1, r5, #0
    1b56:	4343      	muls	r3, r0
    1b58:	1c07      	adds	r7, r0, #0
    1b5a:	4658      	mov	r0, fp
    1b5c:	9300      	str	r3, [sp, #0]
    1b5e:	f7ff fec1 	bl	18e4 <__aeabi_uidivmod>
    1b62:	0436      	lsls	r6, r6, #16
    1b64:	9d00      	ldr	r5, [sp, #0]
    1b66:	0409      	lsls	r1, r1, #16
    1b68:	0c36      	lsrs	r6, r6, #16
    1b6a:	430e      	orrs	r6, r1
    1b6c:	42b5      	cmp	r5, r6
    1b6e:	d907      	bls.n	1b80 <__divdi3+0x194>
    1b70:	4446      	add	r6, r8
    1b72:	1e7b      	subs	r3, r7, #1
    1b74:	45b0      	cmp	r8, r6
    1b76:	d802      	bhi.n	1b7e <__divdi3+0x192>
    1b78:	3f02      	subs	r7, #2
    1b7a:	42b5      	cmp	r5, r6
    1b7c:	d800      	bhi.n	1b80 <__divdi3+0x194>
    1b7e:	1c1f      	adds	r7, r3, #0
    1b80:	4649      	mov	r1, r9
    1b82:	040b      	lsls	r3, r1, #16
    1b84:	431f      	orrs	r7, r3
    1b86:	e7a0      	b.n	1aca <__divdi3+0xde>
    1b88:	1c08      	adds	r0, r1, #0
    1b8a:	f000 fac7 	bl	211c <__clzsi2>
    1b8e:	1e04      	subs	r4, r0, #0
    1b90:	d170      	bne.n	1c74 <__divdi3+0x288>
    1b92:	45b9      	cmp	r9, r7
    1b94:	d303      	bcc.n	1b9e <__divdi3+0x1b2>
    1b96:	9c00      	ldr	r4, [sp, #0]
    1b98:	9d01      	ldr	r5, [sp, #4]
    1b9a:	42ac      	cmp	r4, r5
    1b9c:	d893      	bhi.n	1ac6 <__divdi3+0xda>
    1b9e:	2400      	movs	r4, #0
    1ba0:	2701      	movs	r7, #1
    1ba2:	e792      	b.n	1aca <__divdi3+0xde>
    1ba4:	4652      	mov	r2, sl
    1ba6:	43d2      	mvns	r2, r2
    1ba8:	1c03      	adds	r3, r0, #0
    1baa:	1c0c      	adds	r4, r1, #0
    1bac:	4692      	mov	sl, r2
    1bae:	2100      	movs	r1, #0
    1bb0:	4258      	negs	r0, r3
    1bb2:	41a1      	sbcs	r1, r4
    1bb4:	e72e      	b.n	1a14 <__divdi3+0x28>
    1bb6:	2700      	movs	r7, #0
    1bb8:	4246      	negs	r6, r0
    1bba:	418f      	sbcs	r7, r1
    1bbc:	2101      	movs	r1, #1
    1bbe:	4249      	negs	r1, r1
    1bc0:	468a      	mov	sl, r1
    1bc2:	e722      	b.n	1a0a <__divdi3+0x1e>
    1bc4:	2320      	movs	r3, #32
    1bc6:	1a1b      	subs	r3, r3, r0
    1bc8:	4642      	mov	r2, r8
    1bca:	1c35      	adds	r5, r6, #0
    1bcc:	4082      	lsls	r2, r0
    1bce:	1c3c      	adds	r4, r7, #0
    1bd0:	40dd      	lsrs	r5, r3
    1bd2:	40dc      	lsrs	r4, r3
    1bd4:	4087      	lsls	r7, r0
    1bd6:	1c2b      	adds	r3, r5, #0
    1bd8:	0c15      	lsrs	r5, r2, #16
    1bda:	433b      	orrs	r3, r7
    1bdc:	1c29      	adds	r1, r5, #0
    1bde:	4086      	lsls	r6, r0
    1be0:	1c20      	adds	r0, r4, #0
    1be2:	9300      	str	r3, [sp, #0]
    1be4:	0417      	lsls	r7, r2, #16
    1be6:	4690      	mov	r8, r2
    1be8:	f7ff fe38 	bl	185c <__aeabi_uidiv>
    1bec:	0c3f      	lsrs	r7, r7, #16
    1bee:	1c01      	adds	r1, r0, #0
    1bf0:	4379      	muls	r1, r7
    1bf2:	4681      	mov	r9, r0
    1bf4:	468b      	mov	fp, r1
    1bf6:	1c20      	adds	r0, r4, #0
    1bf8:	1c29      	adds	r1, r5, #0
    1bfa:	f7ff fe73 	bl	18e4 <__aeabi_uidivmod>
    1bfe:	9c00      	ldr	r4, [sp, #0]
    1c00:	0409      	lsls	r1, r1, #16
    1c02:	0c23      	lsrs	r3, r4, #16
    1c04:	4319      	orrs	r1, r3
    1c06:	458b      	cmp	fp, r1
    1c08:	d90c      	bls.n	1c24 <__divdi3+0x238>
    1c0a:	464b      	mov	r3, r9
    1c0c:	4441      	add	r1, r8
    1c0e:	3b01      	subs	r3, #1
    1c10:	4588      	cmp	r8, r1
    1c12:	d900      	bls.n	1c16 <__divdi3+0x22a>
    1c14:	e0ba      	b.n	1d8c <__divdi3+0x3a0>
    1c16:	458b      	cmp	fp, r1
    1c18:	d800      	bhi.n	1c1c <__divdi3+0x230>
    1c1a:	e0b7      	b.n	1d8c <__divdi3+0x3a0>
    1c1c:	2202      	movs	r2, #2
    1c1e:	4252      	negs	r2, r2
    1c20:	4491      	add	r9, r2
    1c22:	4441      	add	r1, r8
    1c24:	465c      	mov	r4, fp
    1c26:	1b0c      	subs	r4, r1, r4
    1c28:	1c20      	adds	r0, r4, #0
    1c2a:	1c29      	adds	r1, r5, #0
    1c2c:	9401      	str	r4, [sp, #4]
    1c2e:	f7ff fe15 	bl	185c <__aeabi_uidiv>
    1c32:	1c39      	adds	r1, r7, #0
    1c34:	4341      	muls	r1, r0
    1c36:	1c04      	adds	r4, r0, #0
    1c38:	468b      	mov	fp, r1
    1c3a:	9801      	ldr	r0, [sp, #4]
    1c3c:	1c29      	adds	r1, r5, #0
    1c3e:	f7ff fe51 	bl	18e4 <__aeabi_uidivmod>
    1c42:	9a00      	ldr	r2, [sp, #0]
    1c44:	0409      	lsls	r1, r1, #16
    1c46:	0413      	lsls	r3, r2, #16
    1c48:	0c1b      	lsrs	r3, r3, #16
    1c4a:	4319      	orrs	r1, r3
    1c4c:	458b      	cmp	fp, r1
    1c4e:	d909      	bls.n	1c64 <__divdi3+0x278>
    1c50:	4441      	add	r1, r8
    1c52:	1e63      	subs	r3, r4, #1
    1c54:	4588      	cmp	r8, r1
    1c56:	d900      	bls.n	1c5a <__divdi3+0x26e>
    1c58:	e094      	b.n	1d84 <__divdi3+0x398>
    1c5a:	458b      	cmp	fp, r1
    1c5c:	d800      	bhi.n	1c60 <__divdi3+0x274>
    1c5e:	e091      	b.n	1d84 <__divdi3+0x398>
    1c60:	3c02      	subs	r4, #2
    1c62:	4441      	add	r1, r8
    1c64:	465b      	mov	r3, fp
    1c66:	1acb      	subs	r3, r1, r3
    1c68:	4649      	mov	r1, r9
    1c6a:	469b      	mov	fp, r3
    1c6c:	040b      	lsls	r3, r1, #16
    1c6e:	431c      	orrs	r4, r3
    1c70:	9700      	str	r7, [sp, #0]
    1c72:	e74f      	b.n	1b14 <__divdi3+0x128>
    1c74:	9d00      	ldr	r5, [sp, #0]
    1c76:	2320      	movs	r3, #32
    1c78:	1a1b      	subs	r3, r3, r0
    1c7a:	464a      	mov	r2, r9
    1c7c:	9900      	ldr	r1, [sp, #0]
    1c7e:	4082      	lsls	r2, r0
    1c80:	40dd      	lsrs	r5, r3
    1c82:	4315      	orrs	r5, r2
    1c84:	4081      	lsls	r1, r0
    1c86:	1c3a      	adds	r2, r7, #0
    1c88:	40da      	lsrs	r2, r3
    1c8a:	9100      	str	r1, [sp, #0]
    1c8c:	1c31      	adds	r1, r6, #0
    1c8e:	4690      	mov	r8, r2
    1c90:	40d9      	lsrs	r1, r3
    1c92:	1c3a      	adds	r2, r7, #0
    1c94:	4082      	lsls	r2, r0
    1c96:	1c0b      	adds	r3, r1, #0
    1c98:	4313      	orrs	r3, r2
    1c9a:	9301      	str	r3, [sp, #4]
    1c9c:	0c2f      	lsrs	r7, r5, #16
    1c9e:	042b      	lsls	r3, r5, #16
    1ca0:	0c1b      	lsrs	r3, r3, #16
    1ca2:	1c39      	adds	r1, r7, #0
    1ca4:	4640      	mov	r0, r8
    1ca6:	9302      	str	r3, [sp, #8]
    1ca8:	f7ff fdd8 	bl	185c <__aeabi_uidiv>
    1cac:	9a02      	ldr	r2, [sp, #8]
    1cae:	4681      	mov	r9, r0
    1cb0:	4342      	muls	r2, r0
    1cb2:	1c39      	adds	r1, r7, #0
    1cb4:	4640      	mov	r0, r8
    1cb6:	4693      	mov	fp, r2
    1cb8:	f7ff fe14 	bl	18e4 <__aeabi_uidivmod>
    1cbc:	9a01      	ldr	r2, [sp, #4]
    1cbe:	0409      	lsls	r1, r1, #16
    1cc0:	0c13      	lsrs	r3, r2, #16
    1cc2:	4319      	orrs	r1, r3
    1cc4:	458b      	cmp	fp, r1
    1cc6:	d90a      	bls.n	1cde <__divdi3+0x2f2>
    1cc8:	464b      	mov	r3, r9
    1cca:	1949      	adds	r1, r1, r5
    1ccc:	3b01      	subs	r3, #1
    1cce:	428d      	cmp	r5, r1
    1cd0:	d85a      	bhi.n	1d88 <__divdi3+0x39c>
    1cd2:	458b      	cmp	fp, r1
    1cd4:	d958      	bls.n	1d88 <__divdi3+0x39c>
    1cd6:	2302      	movs	r3, #2
    1cd8:	425b      	negs	r3, r3
    1cda:	4499      	add	r9, r3
    1cdc:	1949      	adds	r1, r1, r5
    1cde:	465a      	mov	r2, fp
    1ce0:	1a8a      	subs	r2, r1, r2
    1ce2:	1c10      	adds	r0, r2, #0
    1ce4:	1c39      	adds	r1, r7, #0
    1ce6:	9203      	str	r2, [sp, #12]
    1ce8:	f7ff fdb8 	bl	185c <__aeabi_uidiv>
    1cec:	9b02      	ldr	r3, [sp, #8]
    1cee:	4680      	mov	r8, r0
    1cf0:	4343      	muls	r3, r0
    1cf2:	1c39      	adds	r1, r7, #0
    1cf4:	9803      	ldr	r0, [sp, #12]
    1cf6:	469b      	mov	fp, r3
    1cf8:	f7ff fdf4 	bl	18e4 <__aeabi_uidivmod>
    1cfc:	9a01      	ldr	r2, [sp, #4]
    1cfe:	0409      	lsls	r1, r1, #16
    1d00:	0413      	lsls	r3, r2, #16
    1d02:	0c1b      	lsrs	r3, r3, #16
    1d04:	4319      	orrs	r1, r3
    1d06:	458b      	cmp	fp, r1
    1d08:	d90a      	bls.n	1d20 <__divdi3+0x334>
    1d0a:	4643      	mov	r3, r8
    1d0c:	1949      	adds	r1, r1, r5
    1d0e:	3b01      	subs	r3, #1
    1d10:	428d      	cmp	r5, r1
    1d12:	d835      	bhi.n	1d80 <__divdi3+0x394>
    1d14:	458b      	cmp	fp, r1
    1d16:	d933      	bls.n	1d80 <__divdi3+0x394>
    1d18:	2302      	movs	r3, #2
    1d1a:	425b      	negs	r3, r3
    1d1c:	4498      	add	r8, r3
    1d1e:	1949      	adds	r1, r1, r5
    1d20:	465d      	mov	r5, fp
    1d22:	1b4d      	subs	r5, r1, r5
    1d24:	46ab      	mov	fp, r5
    1d26:	4649      	mov	r1, r9
    1d28:	9d00      	ldr	r5, [sp, #0]
    1d2a:	040f      	lsls	r7, r1, #16
    1d2c:	4642      	mov	r2, r8
    1d2e:	4317      	orrs	r7, r2
    1d30:	042a      	lsls	r2, r5, #16
    1d32:	0c12      	lsrs	r2, r2, #16
    1d34:	043b      	lsls	r3, r7, #16
    1d36:	0c2d      	lsrs	r5, r5, #16
    1d38:	0c1b      	lsrs	r3, r3, #16
    1d3a:	0c38      	lsrs	r0, r7, #16
    1d3c:	1c11      	adds	r1, r2, #0
    1d3e:	4359      	muls	r1, r3
    1d40:	4342      	muls	r2, r0
    1d42:	436b      	muls	r3, r5
    1d44:	4368      	muls	r0, r5
    1d46:	18d3      	adds	r3, r2, r3
    1d48:	0c0d      	lsrs	r5, r1, #16
    1d4a:	195b      	adds	r3, r3, r5
    1d4c:	468c      	mov	ip, r1
    1d4e:	429a      	cmp	r2, r3
    1d50:	d902      	bls.n	1d58 <__divdi3+0x36c>
    1d52:	2280      	movs	r2, #128	; 0x80
    1d54:	0252      	lsls	r2, r2, #9
    1d56:	1880      	adds	r0, r0, r2
    1d58:	0c1d      	lsrs	r5, r3, #16
    1d5a:	1940      	adds	r0, r0, r5
    1d5c:	4583      	cmp	fp, r0
    1d5e:	d30c      	bcc.n	1d7a <__divdi3+0x38e>
    1d60:	d003      	beq.n	1d6a <__divdi3+0x37e>
    1d62:	2400      	movs	r4, #0
    1d64:	e6b1      	b.n	1aca <__divdi3+0xde>
    1d66:	1c1d      	adds	r5, r3, #0
    1d68:	e68a      	b.n	1a80 <__divdi3+0x94>
    1d6a:	4665      	mov	r5, ip
    1d6c:	042a      	lsls	r2, r5, #16
    1d6e:	041b      	lsls	r3, r3, #16
    1d70:	0c12      	lsrs	r2, r2, #16
    1d72:	189b      	adds	r3, r3, r2
    1d74:	40a6      	lsls	r6, r4
    1d76:	429e      	cmp	r6, r3
    1d78:	d2f3      	bcs.n	1d62 <__divdi3+0x376>
    1d7a:	3f01      	subs	r7, #1
    1d7c:	2400      	movs	r4, #0
    1d7e:	e6a4      	b.n	1aca <__divdi3+0xde>
    1d80:	4698      	mov	r8, r3
    1d82:	e7cd      	b.n	1d20 <__divdi3+0x334>
    1d84:	1c1c      	adds	r4, r3, #0
    1d86:	e76d      	b.n	1c64 <__divdi3+0x278>
    1d88:	4699      	mov	r9, r3
    1d8a:	e7a8      	b.n	1cde <__divdi3+0x2f2>
    1d8c:	4699      	mov	r9, r3
    1d8e:	e749      	b.n	1c24 <__divdi3+0x238>
    1d90:	2202      	movs	r2, #2
    1d92:	4252      	negs	r2, r2
    1d94:	4491      	add	r9, r2
    1d96:	4441      	add	r1, r8
    1d98:	e6d5      	b.n	1b46 <__divdi3+0x15a>
    1d9a:	46c0      	nop			; (mov r8, r8)

00001d9c <__udivdi3>:
    1d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d9e:	465f      	mov	r7, fp
    1da0:	4656      	mov	r6, sl
    1da2:	464d      	mov	r5, r9
    1da4:	4644      	mov	r4, r8
    1da6:	b4f0      	push	{r4, r5, r6, r7}
    1da8:	1c0d      	adds	r5, r1, #0
    1daa:	b085      	sub	sp, #20
    1dac:	1c06      	adds	r6, r0, #0
    1dae:	4692      	mov	sl, r2
    1db0:	4698      	mov	r8, r3
    1db2:	9002      	str	r0, [sp, #8]
    1db4:	9101      	str	r1, [sp, #4]
    1db6:	9203      	str	r2, [sp, #12]
    1db8:	1c1f      	adds	r7, r3, #0
    1dba:	1c14      	adds	r4, r2, #0
    1dbc:	4683      	mov	fp, r0
    1dbe:	46a9      	mov	r9, r5
    1dc0:	2b00      	cmp	r3, #0
    1dc2:	d152      	bne.n	1e6a <__udivdi3+0xce>
    1dc4:	42aa      	cmp	r2, r5
    1dc6:	d96b      	bls.n	1ea0 <__udivdi3+0x104>
    1dc8:	1c10      	adds	r0, r2, #0
    1dca:	f000 f9a7 	bl	211c <__clzsi2>
    1dce:	2800      	cmp	r0, #0
    1dd0:	d00a      	beq.n	1de8 <__udivdi3+0x4c>
    1dd2:	2320      	movs	r3, #32
    1dd4:	1a1b      	subs	r3, r3, r0
    1dd6:	1c31      	adds	r1, r6, #0
    1dd8:	40d9      	lsrs	r1, r3
    1dda:	4085      	lsls	r5, r0
    1ddc:	1c0b      	adds	r3, r1, #0
    1dde:	432b      	orrs	r3, r5
    1de0:	4086      	lsls	r6, r0
    1de2:	4084      	lsls	r4, r0
    1de4:	4699      	mov	r9, r3
    1de6:	46b3      	mov	fp, r6
    1de8:	0c25      	lsrs	r5, r4, #16
    1dea:	0423      	lsls	r3, r4, #16
    1dec:	0c1b      	lsrs	r3, r3, #16
    1dee:	1c29      	adds	r1, r5, #0
    1df0:	4648      	mov	r0, r9
    1df2:	4698      	mov	r8, r3
    1df4:	f7ff fd32 	bl	185c <__aeabi_uidiv>
    1df8:	4646      	mov	r6, r8
    1dfa:	1c07      	adds	r7, r0, #0
    1dfc:	4346      	muls	r6, r0
    1dfe:	1c29      	adds	r1, r5, #0
    1e00:	4648      	mov	r0, r9
    1e02:	f7ff fd6f 	bl	18e4 <__aeabi_uidivmod>
    1e06:	465a      	mov	r2, fp
    1e08:	0409      	lsls	r1, r1, #16
    1e0a:	0c13      	lsrs	r3, r2, #16
    1e0c:	4319      	orrs	r1, r3
    1e0e:	428e      	cmp	r6, r1
    1e10:	d909      	bls.n	1e26 <__udivdi3+0x8a>
    1e12:	1909      	adds	r1, r1, r4
    1e14:	1e7b      	subs	r3, r7, #1
    1e16:	428c      	cmp	r4, r1
    1e18:	d900      	bls.n	1e1c <__udivdi3+0x80>
    1e1a:	e159      	b.n	20d0 <__stack_size__+0xd0>
    1e1c:	428e      	cmp	r6, r1
    1e1e:	d800      	bhi.n	1e22 <__udivdi3+0x86>
    1e20:	e156      	b.n	20d0 <__stack_size__+0xd0>
    1e22:	3f02      	subs	r7, #2
    1e24:	1909      	adds	r1, r1, r4
    1e26:	1b89      	subs	r1, r1, r6
    1e28:	4689      	mov	r9, r1
    1e2a:	1c08      	adds	r0, r1, #0
    1e2c:	1c29      	adds	r1, r5, #0
    1e2e:	f7ff fd15 	bl	185c <__aeabi_uidiv>
    1e32:	4643      	mov	r3, r8
    1e34:	4343      	muls	r3, r0
    1e36:	1c06      	adds	r6, r0, #0
    1e38:	1c29      	adds	r1, r5, #0
    1e3a:	4648      	mov	r0, r9
    1e3c:	4698      	mov	r8, r3
    1e3e:	f7ff fd51 	bl	18e4 <__aeabi_uidivmod>
    1e42:	465a      	mov	r2, fp
    1e44:	0413      	lsls	r3, r2, #16
    1e46:	0409      	lsls	r1, r1, #16
    1e48:	0c1b      	lsrs	r3, r3, #16
    1e4a:	4319      	orrs	r1, r3
    1e4c:	4588      	cmp	r8, r1
    1e4e:	d908      	bls.n	1e62 <__udivdi3+0xc6>
    1e50:	1909      	adds	r1, r1, r4
    1e52:	1e73      	subs	r3, r6, #1
    1e54:	428c      	cmp	r4, r1
    1e56:	d900      	bls.n	1e5a <__udivdi3+0xbe>
    1e58:	e138      	b.n	20cc <__stack_size__+0xcc>
    1e5a:	3e02      	subs	r6, #2
    1e5c:	4588      	cmp	r8, r1
    1e5e:	d800      	bhi.n	1e62 <__udivdi3+0xc6>
    1e60:	e134      	b.n	20cc <__stack_size__+0xcc>
    1e62:	0438      	lsls	r0, r7, #16
    1e64:	4330      	orrs	r0, r6
    1e66:	2700      	movs	r7, #0
    1e68:	e012      	b.n	1e90 <__udivdi3+0xf4>
    1e6a:	9a01      	ldr	r2, [sp, #4]
    1e6c:	4293      	cmp	r3, r2
    1e6e:	d80d      	bhi.n	1e8c <__udivdi3+0xf0>
    1e70:	1c18      	adds	r0, r3, #0
    1e72:	f000 f953 	bl	211c <__clzsi2>
    1e76:	1e04      	subs	r4, r0, #0
    1e78:	d166      	bne.n	1f48 <__udivdi3+0x1ac>
    1e7a:	9b01      	ldr	r3, [sp, #4]
    1e7c:	429f      	cmp	r7, r3
    1e7e:	d200      	bcs.n	1e82 <__udivdi3+0xe6>
    1e80:	e121      	b.n	20c6 <__stack_size__+0xc6>
    1e82:	9f03      	ldr	r7, [sp, #12]
    1e84:	9902      	ldr	r1, [sp, #8]
    1e86:	428f      	cmp	r7, r1
    1e88:	d800      	bhi.n	1e8c <__udivdi3+0xf0>
    1e8a:	e11c      	b.n	20c6 <__stack_size__+0xc6>
    1e8c:	2700      	movs	r7, #0
    1e8e:	2000      	movs	r0, #0
    1e90:	1c39      	adds	r1, r7, #0
    1e92:	b005      	add	sp, #20
    1e94:	bc3c      	pop	{r2, r3, r4, r5}
    1e96:	4690      	mov	r8, r2
    1e98:	4699      	mov	r9, r3
    1e9a:	46a2      	mov	sl, r4
    1e9c:	46ab      	mov	fp, r5
    1e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ea0:	2a00      	cmp	r2, #0
    1ea2:	d104      	bne.n	1eae <__udivdi3+0x112>
    1ea4:	2001      	movs	r0, #1
    1ea6:	2100      	movs	r1, #0
    1ea8:	f7ff fcd8 	bl	185c <__aeabi_uidiv>
    1eac:	1c04      	adds	r4, r0, #0
    1eae:	1c20      	adds	r0, r4, #0
    1eb0:	f000 f934 	bl	211c <__clzsi2>
    1eb4:	2800      	cmp	r0, #0
    1eb6:	d000      	beq.n	1eba <__udivdi3+0x11e>
    1eb8:	e0b6      	b.n	2028 <__stack_size__+0x28>
    1eba:	0423      	lsls	r3, r4, #16
    1ebc:	1b2d      	subs	r5, r5, r4
    1ebe:	0c1b      	lsrs	r3, r3, #16
    1ec0:	46a9      	mov	r9, r5
    1ec2:	0c26      	lsrs	r6, r4, #16
    1ec4:	4698      	mov	r8, r3
    1ec6:	2701      	movs	r7, #1
    1ec8:	1c31      	adds	r1, r6, #0
    1eca:	4648      	mov	r0, r9
    1ecc:	f7ff fcc6 	bl	185c <__aeabi_uidiv>
    1ed0:	4641      	mov	r1, r8
    1ed2:	4341      	muls	r1, r0
    1ed4:	1c05      	adds	r5, r0, #0
    1ed6:	468a      	mov	sl, r1
    1ed8:	4648      	mov	r0, r9
    1eda:	1c31      	adds	r1, r6, #0
    1edc:	f7ff fd02 	bl	18e4 <__aeabi_uidivmod>
    1ee0:	465a      	mov	r2, fp
    1ee2:	0408      	lsls	r0, r1, #16
    1ee4:	0c13      	lsrs	r3, r2, #16
    1ee6:	4318      	orrs	r0, r3
    1ee8:	4582      	cmp	sl, r0
    1eea:	d907      	bls.n	1efc <__udivdi3+0x160>
    1eec:	1900      	adds	r0, r0, r4
    1eee:	1e6b      	subs	r3, r5, #1
    1ef0:	4284      	cmp	r4, r0
    1ef2:	d802      	bhi.n	1efa <__udivdi3+0x15e>
    1ef4:	4582      	cmp	sl, r0
    1ef6:	d900      	bls.n	1efa <__udivdi3+0x15e>
    1ef8:	e10d      	b.n	2116 <__stack_size__+0x116>
    1efa:	1c1d      	adds	r5, r3, #0
    1efc:	4653      	mov	r3, sl
    1efe:	1ac3      	subs	r3, r0, r3
    1f00:	1c18      	adds	r0, r3, #0
    1f02:	1c31      	adds	r1, r6, #0
    1f04:	469a      	mov	sl, r3
    1f06:	f7ff fca9 	bl	185c <__aeabi_uidiv>
    1f0a:	4641      	mov	r1, r8
    1f0c:	4341      	muls	r1, r0
    1f0e:	4681      	mov	r9, r0
    1f10:	4688      	mov	r8, r1
    1f12:	4650      	mov	r0, sl
    1f14:	1c31      	adds	r1, r6, #0
    1f16:	f7ff fce5 	bl	18e4 <__aeabi_uidivmod>
    1f1a:	465a      	mov	r2, fp
    1f1c:	0413      	lsls	r3, r2, #16
    1f1e:	0409      	lsls	r1, r1, #16
    1f20:	0c1b      	lsrs	r3, r3, #16
    1f22:	4319      	orrs	r1, r3
    1f24:	4588      	cmp	r8, r1
    1f26:	d90b      	bls.n	1f40 <__udivdi3+0x1a4>
    1f28:	464b      	mov	r3, r9
    1f2a:	1909      	adds	r1, r1, r4
    1f2c:	3b01      	subs	r3, #1
    1f2e:	428c      	cmp	r4, r1
    1f30:	d900      	bls.n	1f34 <__udivdi3+0x198>
    1f32:	e0cf      	b.n	20d4 <__stack_size__+0xd4>
    1f34:	4588      	cmp	r8, r1
    1f36:	d800      	bhi.n	1f3a <__udivdi3+0x19e>
    1f38:	e0cc      	b.n	20d4 <__stack_size__+0xd4>
    1f3a:	2302      	movs	r3, #2
    1f3c:	425b      	negs	r3, r3
    1f3e:	4499      	add	r9, r3
    1f40:	0428      	lsls	r0, r5, #16
    1f42:	4649      	mov	r1, r9
    1f44:	4308      	orrs	r0, r1
    1f46:	e7a3      	b.n	1e90 <__udivdi3+0xf4>
    1f48:	2320      	movs	r3, #32
    1f4a:	1a1b      	subs	r3, r3, r0
    1f4c:	4642      	mov	r2, r8
    1f4e:	4657      	mov	r7, sl
    1f50:	4082      	lsls	r2, r0
    1f52:	40df      	lsrs	r7, r3
    1f54:	4317      	orrs	r7, r2
    1f56:	4652      	mov	r2, sl
    1f58:	4082      	lsls	r2, r0
    1f5a:	9201      	str	r2, [sp, #4]
    1f5c:	1c32      	adds	r2, r6, #0
    1f5e:	40da      	lsrs	r2, r3
    1f60:	1c29      	adds	r1, r5, #0
    1f62:	40d9      	lsrs	r1, r3
    1f64:	4085      	lsls	r5, r0
    1f66:	1c13      	adds	r3, r2, #0
    1f68:	432b      	orrs	r3, r5
    1f6a:	9302      	str	r3, [sp, #8]
    1f6c:	0c3d      	lsrs	r5, r7, #16
    1f6e:	043b      	lsls	r3, r7, #16
    1f70:	0c1b      	lsrs	r3, r3, #16
    1f72:	4688      	mov	r8, r1
    1f74:	1c08      	adds	r0, r1, #0
    1f76:	1c29      	adds	r1, r5, #0
    1f78:	469a      	mov	sl, r3
    1f7a:	f7ff fc6f 	bl	185c <__aeabi_uidiv>
    1f7e:	4653      	mov	r3, sl
    1f80:	4343      	muls	r3, r0
    1f82:	4681      	mov	r9, r0
    1f84:	1c29      	adds	r1, r5, #0
    1f86:	4640      	mov	r0, r8
    1f88:	469b      	mov	fp, r3
    1f8a:	f7ff fcab 	bl	18e4 <__aeabi_uidivmod>
    1f8e:	9a02      	ldr	r2, [sp, #8]
    1f90:	0409      	lsls	r1, r1, #16
    1f92:	0c13      	lsrs	r3, r2, #16
    1f94:	4319      	orrs	r1, r3
    1f96:	458b      	cmp	fp, r1
    1f98:	d906      	bls.n	1fa8 <__udivdi3+0x20c>
    1f9a:	464b      	mov	r3, r9
    1f9c:	19c9      	adds	r1, r1, r7
    1f9e:	3b01      	subs	r3, #1
    1fa0:	428f      	cmp	r7, r1
    1fa2:	d800      	bhi.n	1fa6 <__udivdi3+0x20a>
    1fa4:	e0ab      	b.n	20fe <__stack_size__+0xfe>
    1fa6:	4699      	mov	r9, r3
    1fa8:	465a      	mov	r2, fp
    1faa:	1a8a      	subs	r2, r1, r2
    1fac:	1c10      	adds	r0, r2, #0
    1fae:	1c29      	adds	r1, r5, #0
    1fb0:	4693      	mov	fp, r2
    1fb2:	f7ff fc53 	bl	185c <__aeabi_uidiv>
    1fb6:	4653      	mov	r3, sl
    1fb8:	4343      	muls	r3, r0
    1fba:	1c29      	adds	r1, r5, #0
    1fbc:	4680      	mov	r8, r0
    1fbe:	4658      	mov	r0, fp
    1fc0:	469a      	mov	sl, r3
    1fc2:	f7ff fc8f 	bl	18e4 <__aeabi_uidivmod>
    1fc6:	9a02      	ldr	r2, [sp, #8]
    1fc8:	0409      	lsls	r1, r1, #16
    1fca:	0415      	lsls	r5, r2, #16
    1fcc:	0c2d      	lsrs	r5, r5, #16
    1fce:	4329      	orrs	r1, r5
    1fd0:	458a      	cmp	sl, r1
    1fd2:	d906      	bls.n	1fe2 <__udivdi3+0x246>
    1fd4:	4643      	mov	r3, r8
    1fd6:	19c9      	adds	r1, r1, r7
    1fd8:	3b01      	subs	r3, #1
    1fda:	428f      	cmp	r7, r1
    1fdc:	d800      	bhi.n	1fe0 <__udivdi3+0x244>
    1fde:	e086      	b.n	20ee <__stack_size__+0xee>
    1fe0:	4698      	mov	r8, r3
    1fe2:	4657      	mov	r7, sl
    1fe4:	1bcf      	subs	r7, r1, r7
    1fe6:	46ba      	mov	sl, r7
    1fe8:	4649      	mov	r1, r9
    1fea:	9f01      	ldr	r7, [sp, #4]
    1fec:	0408      	lsls	r0, r1, #16
    1fee:	4642      	mov	r2, r8
    1ff0:	4310      	orrs	r0, r2
    1ff2:	043d      	lsls	r5, r7, #16
    1ff4:	0c2d      	lsrs	r5, r5, #16
    1ff6:	0403      	lsls	r3, r0, #16
    1ff8:	0c3f      	lsrs	r7, r7, #16
    1ffa:	0c1b      	lsrs	r3, r3, #16
    1ffc:	0c02      	lsrs	r2, r0, #16
    1ffe:	1c29      	adds	r1, r5, #0
    2000:	4359      	muls	r1, r3
    2002:	4355      	muls	r5, r2
    2004:	437b      	muls	r3, r7
    2006:	437a      	muls	r2, r7
    2008:	18eb      	adds	r3, r5, r3
    200a:	0c0f      	lsrs	r7, r1, #16
    200c:	19db      	adds	r3, r3, r7
    200e:	468c      	mov	ip, r1
    2010:	429d      	cmp	r5, r3
    2012:	d902      	bls.n	201a <__stack_size__+0x1a>
    2014:	2780      	movs	r7, #128	; 0x80
    2016:	027f      	lsls	r7, r7, #9
    2018:	19d2      	adds	r2, r2, r7
    201a:	0c1d      	lsrs	r5, r3, #16
    201c:	1952      	adds	r2, r2, r5
    201e:	4592      	cmp	sl, r2
    2020:	d362      	bcc.n	20e8 <__stack_size__+0xe8>
    2022:	d059      	beq.n	20d8 <__stack_size__+0xd8>
    2024:	2700      	movs	r7, #0
    2026:	e733      	b.n	1e90 <__udivdi3+0xf4>
    2028:	2320      	movs	r3, #32
    202a:	1a1b      	subs	r3, r3, r0
    202c:	1c31      	adds	r1, r6, #0
    202e:	1c2f      	adds	r7, r5, #0
    2030:	40d9      	lsrs	r1, r3
    2032:	40df      	lsrs	r7, r3
    2034:	4085      	lsls	r5, r0
    2036:	1c0b      	adds	r3, r1, #0
    2038:	4084      	lsls	r4, r0
    203a:	432b      	orrs	r3, r5
    203c:	4086      	lsls	r6, r0
    203e:	9301      	str	r3, [sp, #4]
    2040:	46b3      	mov	fp, r6
    2042:	0423      	lsls	r3, r4, #16
    2044:	0c26      	lsrs	r6, r4, #16
    2046:	0c1b      	lsrs	r3, r3, #16
    2048:	1c38      	adds	r0, r7, #0
    204a:	1c31      	adds	r1, r6, #0
    204c:	4698      	mov	r8, r3
    204e:	f7ff fc05 	bl	185c <__aeabi_uidiv>
    2052:	4642      	mov	r2, r8
    2054:	4342      	muls	r2, r0
    2056:	1c05      	adds	r5, r0, #0
    2058:	1c31      	adds	r1, r6, #0
    205a:	1c38      	adds	r0, r7, #0
    205c:	4691      	mov	r9, r2
    205e:	f7ff fc41 	bl	18e4 <__aeabi_uidivmod>
    2062:	9f01      	ldr	r7, [sp, #4]
    2064:	0409      	lsls	r1, r1, #16
    2066:	0c3b      	lsrs	r3, r7, #16
    2068:	4319      	orrs	r1, r3
    206a:	4589      	cmp	r9, r1
    206c:	d907      	bls.n	207e <__stack_size__+0x7e>
    206e:	1909      	adds	r1, r1, r4
    2070:	1e6b      	subs	r3, r5, #1
    2072:	428c      	cmp	r4, r1
    2074:	d84d      	bhi.n	2112 <__stack_size__+0x112>
    2076:	4589      	cmp	r9, r1
    2078:	d94b      	bls.n	2112 <__stack_size__+0x112>
    207a:	3d02      	subs	r5, #2
    207c:	1909      	adds	r1, r1, r4
    207e:	464a      	mov	r2, r9
    2080:	1a8a      	subs	r2, r1, r2
    2082:	1c10      	adds	r0, r2, #0
    2084:	1c31      	adds	r1, r6, #0
    2086:	4692      	mov	sl, r2
    2088:	f7ff fbe8 	bl	185c <__aeabi_uidiv>
    208c:	4643      	mov	r3, r8
    208e:	4343      	muls	r3, r0
    2090:	1c07      	adds	r7, r0, #0
    2092:	1c31      	adds	r1, r6, #0
    2094:	4650      	mov	r0, sl
    2096:	4699      	mov	r9, r3
    2098:	f7ff fc24 	bl	18e4 <__aeabi_uidivmod>
    209c:	9a01      	ldr	r2, [sp, #4]
    209e:	0409      	lsls	r1, r1, #16
    20a0:	0413      	lsls	r3, r2, #16
    20a2:	0c1b      	lsrs	r3, r3, #16
    20a4:	4319      	orrs	r1, r3
    20a6:	4589      	cmp	r9, r1
    20a8:	d907      	bls.n	20ba <__stack_size__+0xba>
    20aa:	1909      	adds	r1, r1, r4
    20ac:	1e7b      	subs	r3, r7, #1
    20ae:	428c      	cmp	r4, r1
    20b0:	d82d      	bhi.n	210e <__stack_size__+0x10e>
    20b2:	4589      	cmp	r9, r1
    20b4:	d92b      	bls.n	210e <__stack_size__+0x10e>
    20b6:	3f02      	subs	r7, #2
    20b8:	1909      	adds	r1, r1, r4
    20ba:	464b      	mov	r3, r9
    20bc:	1acb      	subs	r3, r1, r3
    20be:	042d      	lsls	r5, r5, #16
    20c0:	4699      	mov	r9, r3
    20c2:	432f      	orrs	r7, r5
    20c4:	e700      	b.n	1ec8 <__udivdi3+0x12c>
    20c6:	2700      	movs	r7, #0
    20c8:	2001      	movs	r0, #1
    20ca:	e6e1      	b.n	1e90 <__udivdi3+0xf4>
    20cc:	1c1e      	adds	r6, r3, #0
    20ce:	e6c8      	b.n	1e62 <__udivdi3+0xc6>
    20d0:	1c1f      	adds	r7, r3, #0
    20d2:	e6a8      	b.n	1e26 <__udivdi3+0x8a>
    20d4:	4699      	mov	r9, r3
    20d6:	e733      	b.n	1f40 <__udivdi3+0x1a4>
    20d8:	4661      	mov	r1, ip
    20da:	040a      	lsls	r2, r1, #16
    20dc:	041b      	lsls	r3, r3, #16
    20de:	0c12      	lsrs	r2, r2, #16
    20e0:	189b      	adds	r3, r3, r2
    20e2:	40a6      	lsls	r6, r4
    20e4:	429e      	cmp	r6, r3
    20e6:	d29d      	bcs.n	2024 <__stack_size__+0x24>
    20e8:	3801      	subs	r0, #1
    20ea:	2700      	movs	r7, #0
    20ec:	e6d0      	b.n	1e90 <__udivdi3+0xf4>
    20ee:	458a      	cmp	sl, r1
    20f0:	d800      	bhi.n	20f4 <__stack_size__+0xf4>
    20f2:	e775      	b.n	1fe0 <__udivdi3+0x244>
    20f4:	2302      	movs	r3, #2
    20f6:	425b      	negs	r3, r3
    20f8:	4498      	add	r8, r3
    20fa:	19c9      	adds	r1, r1, r7
    20fc:	e771      	b.n	1fe2 <__udivdi3+0x246>
    20fe:	458b      	cmp	fp, r1
    2100:	d800      	bhi.n	2104 <__stack_size__+0x104>
    2102:	e750      	b.n	1fa6 <__udivdi3+0x20a>
    2104:	2302      	movs	r3, #2
    2106:	425b      	negs	r3, r3
    2108:	4499      	add	r9, r3
    210a:	19c9      	adds	r1, r1, r7
    210c:	e74c      	b.n	1fa8 <__udivdi3+0x20c>
    210e:	1c1f      	adds	r7, r3, #0
    2110:	e7d3      	b.n	20ba <__stack_size__+0xba>
    2112:	1c1d      	adds	r5, r3, #0
    2114:	e7b3      	b.n	207e <__stack_size__+0x7e>
    2116:	3d02      	subs	r5, #2
    2118:	1900      	adds	r0, r0, r4
    211a:	e6ef      	b.n	1efc <__udivdi3+0x160>

0000211c <__clzsi2>:
    211c:	211c      	movs	r1, #28
    211e:	2301      	movs	r3, #1
    2120:	041b      	lsls	r3, r3, #16
    2122:	4298      	cmp	r0, r3
    2124:	d301      	bcc.n	212a <__clzsi2+0xe>
    2126:	0c00      	lsrs	r0, r0, #16
    2128:	3910      	subs	r1, #16
    212a:	0a1b      	lsrs	r3, r3, #8
    212c:	4298      	cmp	r0, r3
    212e:	d301      	bcc.n	2134 <__clzsi2+0x18>
    2130:	0a00      	lsrs	r0, r0, #8
    2132:	3908      	subs	r1, #8
    2134:	091b      	lsrs	r3, r3, #4
    2136:	4298      	cmp	r0, r3
    2138:	d301      	bcc.n	213e <__clzsi2+0x22>
    213a:	0900      	lsrs	r0, r0, #4
    213c:	3904      	subs	r1, #4
    213e:	a202      	add	r2, pc, #8	; (adr r2, 2148 <__clzsi2+0x2c>)
    2140:	5c10      	ldrb	r0, [r2, r0]
    2142:	1840      	adds	r0, r0, r1
    2144:	4770      	bx	lr
    2146:	46c0      	nop			; (mov r8, r8)
    2148:	02020304 	.word	0x02020304
    214c:	01010101 	.word	0x01010101
	...

00002158 <atexit>:
    2158:	b508      	push	{r3, lr}
    215a:	1c01      	adds	r1, r0, #0
    215c:	2000      	movs	r0, #0
    215e:	1c02      	adds	r2, r0, #0
    2160:	1c03      	adds	r3, r0, #0
    2162:	f001 f841 	bl	31e8 <__register_exitproc>
    2166:	bd08      	pop	{r3, pc}

00002168 <__libc_fini_array>:
    2168:	b538      	push	{r3, r4, r5, lr}
    216a:	4b07      	ldr	r3, [pc, #28]	; (2188 <__libc_fini_array+0x20>)
    216c:	4c07      	ldr	r4, [pc, #28]	; (218c <__libc_fini_array+0x24>)
    216e:	1c1d      	adds	r5, r3, #0
    2170:	1ae4      	subs	r4, r4, r3
    2172:	10a4      	asrs	r4, r4, #2
    2174:	2c00      	cmp	r4, #0
    2176:	d004      	beq.n	2182 <__libc_fini_array+0x1a>
    2178:	3c01      	subs	r4, #1
    217a:	00a3      	lsls	r3, r4, #2
    217c:	58eb      	ldr	r3, [r5, r3]
    217e:	4798      	blx	r3
    2180:	e7f8      	b.n	2174 <__libc_fini_array+0xc>
    2182:	f005 fd9f 	bl	7cc4 <_fini>
    2186:	bd38      	pop	{r3, r4, r5, pc}
    2188:	00007cd0 	.word	0x00007cd0
    218c:	00007cd4 	.word	0x00007cd4

00002190 <__libc_init_array>:
    2190:	b570      	push	{r4, r5, r6, lr}
    2192:	4b0e      	ldr	r3, [pc, #56]	; (21cc <__libc_init_array+0x3c>)
    2194:	4d0e      	ldr	r5, [pc, #56]	; (21d0 <__libc_init_array+0x40>)
    2196:	2400      	movs	r4, #0
    2198:	1aed      	subs	r5, r5, r3
    219a:	10ad      	asrs	r5, r5, #2
    219c:	1c1e      	adds	r6, r3, #0
    219e:	42ac      	cmp	r4, r5
    21a0:	d004      	beq.n	21ac <__libc_init_array+0x1c>
    21a2:	00a3      	lsls	r3, r4, #2
    21a4:	58f3      	ldr	r3, [r6, r3]
    21a6:	4798      	blx	r3
    21a8:	3401      	adds	r4, #1
    21aa:	e7f8      	b.n	219e <__libc_init_array+0xe>
    21ac:	f005 fd80 	bl	7cb0 <_init>
    21b0:	4b08      	ldr	r3, [pc, #32]	; (21d4 <__libc_init_array+0x44>)
    21b2:	4d09      	ldr	r5, [pc, #36]	; (21d8 <__libc_init_array+0x48>)
    21b4:	2400      	movs	r4, #0
    21b6:	1aed      	subs	r5, r5, r3
    21b8:	10ad      	asrs	r5, r5, #2
    21ba:	1c1e      	adds	r6, r3, #0
    21bc:	42ac      	cmp	r4, r5
    21be:	d004      	beq.n	21ca <__libc_init_array+0x3a>
    21c0:	00a3      	lsls	r3, r4, #2
    21c2:	58f3      	ldr	r3, [r6, r3]
    21c4:	4798      	blx	r3
    21c6:	3401      	adds	r4, #1
    21c8:	e7f8      	b.n	21bc <__libc_init_array+0x2c>
    21ca:	bd70      	pop	{r4, r5, r6, pc}
    21cc:	00007cbc 	.word	0x00007cbc
    21d0:	00007cbc 	.word	0x00007cbc
    21d4:	00007cbc 	.word	0x00007cbc
    21d8:	00007cc4 	.word	0x00007cc4

000021dc <memcpy>:
    21dc:	b510      	push	{r4, lr}
    21de:	2300      	movs	r3, #0
    21e0:	4293      	cmp	r3, r2
    21e2:	d003      	beq.n	21ec <memcpy+0x10>
    21e4:	5ccc      	ldrb	r4, [r1, r3]
    21e6:	54c4      	strb	r4, [r0, r3]
    21e8:	3301      	adds	r3, #1
    21ea:	e7f9      	b.n	21e0 <memcpy+0x4>
    21ec:	bd10      	pop	{r4, pc}

000021ee <memset>:
    21ee:	1c03      	adds	r3, r0, #0
    21f0:	1882      	adds	r2, r0, r2
    21f2:	4293      	cmp	r3, r2
    21f4:	d002      	beq.n	21fc <memset+0xe>
    21f6:	7019      	strb	r1, [r3, #0]
    21f8:	3301      	adds	r3, #1
    21fa:	e7fa      	b.n	21f2 <memset+0x4>
    21fc:	4770      	bx	lr
	...

00002200 <_sprintf_r>:
    2200:	b40c      	push	{r2, r3}
    2202:	b510      	push	{r4, lr}
    2204:	b09c      	sub	sp, #112	; 0x70
    2206:	9102      	str	r1, [sp, #8]
    2208:	9106      	str	r1, [sp, #24]
    220a:	490c      	ldr	r1, [pc, #48]	; (223c <_sprintf_r+0x3c>)
    220c:	ab1e      	add	r3, sp, #120	; 0x78
    220e:	9104      	str	r1, [sp, #16]
    2210:	9107      	str	r1, [sp, #28]
    2212:	2482      	movs	r4, #130	; 0x82
    2214:	2101      	movs	r1, #1
    2216:	cb04      	ldmia	r3!, {r2}
    2218:	00a4      	lsls	r4, r4, #2
    221a:	aa02      	add	r2, sp, #8
    221c:	4249      	negs	r1, r1
    221e:	8194      	strh	r4, [r2, #12]
    2220:	81d1      	strh	r1, [r2, #14]
    2222:	1c11      	adds	r1, r2, #0
    2224:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    2226:	9301      	str	r3, [sp, #4]
    2228:	f000 f82e 	bl	2288 <_svfprintf_r>
    222c:	9a02      	ldr	r2, [sp, #8]
    222e:	2300      	movs	r3, #0
    2230:	7013      	strb	r3, [r2, #0]
    2232:	b01c      	add	sp, #112	; 0x70
    2234:	bc10      	pop	{r4}
    2236:	bc08      	pop	{r3}
    2238:	b002      	add	sp, #8
    223a:	4718      	bx	r3
    223c:	7fffffff 	.word	0x7fffffff

00002240 <sprintf>:
    2240:	b40e      	push	{r1, r2, r3}
    2242:	b500      	push	{lr}
    2244:	b09c      	sub	sp, #112	; 0x70
    2246:	ab1d      	add	r3, sp, #116	; 0x74
    2248:	cb04      	ldmia	r3!, {r2}
    224a:	2282      	movs	r2, #130	; 0x82
    224c:	a902      	add	r1, sp, #8
    224e:	0092      	lsls	r2, r2, #2
    2250:	818a      	strh	r2, [r1, #12]
    2252:	4a0a      	ldr	r2, [pc, #40]	; (227c <sprintf+0x3c>)
    2254:	9002      	str	r0, [sp, #8]
    2256:	608a      	str	r2, [r1, #8]
    2258:	614a      	str	r2, [r1, #20]
    225a:	2201      	movs	r2, #1
    225c:	4252      	negs	r2, r2
    225e:	81ca      	strh	r2, [r1, #14]
    2260:	4a07      	ldr	r2, [pc, #28]	; (2280 <sprintf+0x40>)
    2262:	6108      	str	r0, [r1, #16]
    2264:	6810      	ldr	r0, [r2, #0]
    2266:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    2268:	9301      	str	r3, [sp, #4]
    226a:	f000 f80d 	bl	2288 <_svfprintf_r>
    226e:	9a02      	ldr	r2, [sp, #8]
    2270:	2300      	movs	r3, #0
    2272:	7013      	strb	r3, [r2, #0]
    2274:	b01c      	add	sp, #112	; 0x70
    2276:	bc08      	pop	{r3}
    2278:	b003      	add	sp, #12
    227a:	4718      	bx	r3
    227c:	7fffffff 	.word	0x7fffffff
    2280:	20000008 	.word	0x20000008
    2284:	00000000 	.word	0x00000000

00002288 <_svfprintf_r>:
    2288:	b5f0      	push	{r4, r5, r6, r7, lr}
    228a:	b0c5      	sub	sp, #276	; 0x114
    228c:	1c1f      	adds	r7, r3, #0
    228e:	910c      	str	r1, [sp, #48]	; 0x30
    2290:	9212      	str	r2, [sp, #72]	; 0x48
    2292:	900d      	str	r0, [sp, #52]	; 0x34
    2294:	f001 ff9e 	bl	41d4 <_localeconv_r>
    2298:	6800      	ldr	r0, [r0, #0]
    229a:	901a      	str	r0, [sp, #104]	; 0x68
    229c:	f002 fdea 	bl	4e74 <strlen>
    22a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    22a2:	9019      	str	r0, [sp, #100]	; 0x64
    22a4:	89ab      	ldrh	r3, [r5, #12]
    22a6:	0618      	lsls	r0, r3, #24
    22a8:	d512      	bpl.n	22d0 <_svfprintf_r+0x48>
    22aa:	6929      	ldr	r1, [r5, #16]
    22ac:	2900      	cmp	r1, #0
    22ae:	d10f      	bne.n	22d0 <_svfprintf_r+0x48>
    22b0:	980d      	ldr	r0, [sp, #52]	; 0x34
    22b2:	2140      	movs	r1, #64	; 0x40
    22b4:	f001 ffa6 	bl	4204 <_malloc_r>
    22b8:	6028      	str	r0, [r5, #0]
    22ba:	6128      	str	r0, [r5, #16]
    22bc:	2800      	cmp	r0, #0
    22be:	d104      	bne.n	22ca <_svfprintf_r+0x42>
    22c0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    22c2:	230c      	movs	r3, #12
    22c4:	602b      	str	r3, [r5, #0]
    22c6:	f000 ff82 	bl	31ce <_svfprintf_r+0xf46>
    22ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    22cc:	2340      	movs	r3, #64	; 0x40
    22ce:	616b      	str	r3, [r5, #20]
    22d0:	2300      	movs	r3, #0
    22d2:	ac34      	add	r4, sp, #208	; 0xd0
    22d4:	9427      	str	r4, [sp, #156]	; 0x9c
    22d6:	9329      	str	r3, [sp, #164]	; 0xa4
    22d8:	9328      	str	r3, [sp, #160]	; 0xa0
    22da:	9310      	str	r3, [sp, #64]	; 0x40
    22dc:	9316      	str	r3, [sp, #88]	; 0x58
    22de:	9318      	str	r3, [sp, #96]	; 0x60
    22e0:	931d      	str	r3, [sp, #116]	; 0x74
    22e2:	931c      	str	r3, [sp, #112]	; 0x70
    22e4:	9317      	str	r3, [sp, #92]	; 0x5c
    22e6:	9d12      	ldr	r5, [sp, #72]	; 0x48
    22e8:	782b      	ldrb	r3, [r5, #0]
    22ea:	2b00      	cmp	r3, #0
    22ec:	d103      	bne.n	22f6 <_svfprintf_r+0x6e>
    22ee:	9812      	ldr	r0, [sp, #72]	; 0x48
    22f0:	1a2e      	subs	r6, r5, r0
    22f2:	d104      	bne.n	22fe <_svfprintf_r+0x76>
    22f4:	e01d      	b.n	2332 <_svfprintf_r+0xaa>
    22f6:	2b25      	cmp	r3, #37	; 0x25
    22f8:	d0f9      	beq.n	22ee <_svfprintf_r+0x66>
    22fa:	3501      	adds	r5, #1
    22fc:	e7f4      	b.n	22e8 <_svfprintf_r+0x60>
    22fe:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    2300:	9912      	ldr	r1, [sp, #72]	; 0x48
    2302:	18b3      	adds	r3, r6, r2
    2304:	9329      	str	r3, [sp, #164]	; 0xa4
    2306:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    2308:	6021      	str	r1, [r4, #0]
    230a:	3301      	adds	r3, #1
    230c:	6066      	str	r6, [r4, #4]
    230e:	9328      	str	r3, [sp, #160]	; 0xa0
    2310:	2b07      	cmp	r3, #7
    2312:	dc01      	bgt.n	2318 <_svfprintf_r+0x90>
    2314:	3408      	adds	r4, #8
    2316:	e009      	b.n	232c <_svfprintf_r+0xa4>
    2318:	980d      	ldr	r0, [sp, #52]	; 0x34
    231a:	990c      	ldr	r1, [sp, #48]	; 0x30
    231c:	aa27      	add	r2, sp, #156	; 0x9c
    231e:	f002 fdb1 	bl	4e84 <__ssprint_r>
    2322:	2800      	cmp	r0, #0
    2324:	d001      	beq.n	232a <_svfprintf_r+0xa2>
    2326:	f000 ff4d 	bl	31c4 <_svfprintf_r+0xf3c>
    232a:	ac34      	add	r4, sp, #208	; 0xd0
    232c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    232e:	199b      	adds	r3, r3, r6
    2330:	9317      	str	r3, [sp, #92]	; 0x5c
    2332:	782b      	ldrb	r3, [r5, #0]
    2334:	2b00      	cmp	r3, #0
    2336:	d101      	bne.n	233c <_svfprintf_r+0xb4>
    2338:	f000 ff3c 	bl	31b4 <_svfprintf_r+0xf2c>
    233c:	466a      	mov	r2, sp
    233e:	2300      	movs	r3, #0
    2340:	327f      	adds	r2, #127	; 0x7f
    2342:	7013      	strb	r3, [r2, #0]
    2344:	2201      	movs	r2, #1
    2346:	4252      	negs	r2, r2
    2348:	3501      	adds	r5, #1
    234a:	920a      	str	r2, [sp, #40]	; 0x28
    234c:	9314      	str	r3, [sp, #80]	; 0x50
    234e:	1c1e      	adds	r6, r3, #0
    2350:	1c68      	adds	r0, r5, #1
    2352:	782d      	ldrb	r5, [r5, #0]
    2354:	9012      	str	r0, [sp, #72]	; 0x48
    2356:	950b      	str	r5, [sp, #44]	; 0x2c
    2358:	980b      	ldr	r0, [sp, #44]	; 0x2c
    235a:	3820      	subs	r0, #32
    235c:	2858      	cmp	r0, #88	; 0x58
    235e:	d900      	bls.n	2362 <_svfprintf_r+0xda>
    2360:	e38e      	b.n	2a80 <_svfprintf_r+0x7f8>
    2362:	f003 fbf9 	bl	5b58 <__gnu_thumb1_case_uhi>
    2366:	005b      	.short	0x005b
    2368:	038d038d 	.word	0x038d038d
    236c:	038d0069 	.word	0x038d0069
    2370:	038d038d 	.word	0x038d038d
    2374:	038d038d 	.word	0x038d038d
    2378:	006b038d 	.word	0x006b038d
    237c:	038d0059 	.word	0x038d0059
    2380:	00750072 	.word	0x00750072
    2384:	00a0038d 	.word	0x00a0038d
    2388:	00a200a2 	.word	0x00a200a2
    238c:	00a200a2 	.word	0x00a200a2
    2390:	00a200a2 	.word	0x00a200a2
    2394:	00a200a2 	.word	0x00a200a2
    2398:	038d00a2 	.word	0x038d00a2
    239c:	038d038d 	.word	0x038d038d
    23a0:	038d038d 	.word	0x038d038d
    23a4:	038d038d 	.word	0x038d038d
    23a8:	038d038d 	.word	0x038d038d
    23ac:	00d0038d 	.word	0x00d0038d
    23b0:	038d00fc 	.word	0x038d00fc
    23b4:	038d00fc 	.word	0x038d00fc
    23b8:	038d038d 	.word	0x038d038d
    23bc:	00b6038d 	.word	0x00b6038d
    23c0:	038d038d 	.word	0x038d038d
    23c4:	038d026e 	.word	0x038d026e
    23c8:	038d038d 	.word	0x038d038d
    23cc:	038d038d 	.word	0x038d038d
    23d0:	038d02c2 	.word	0x038d02c2
    23d4:	0064038d 	.word	0x0064038d
    23d8:	038d038d 	.word	0x038d038d
    23dc:	038d038d 	.word	0x038d038d
    23e0:	038d038d 	.word	0x038d038d
    23e4:	038d038d 	.word	0x038d038d
    23e8:	038d038d 	.word	0x038d038d
    23ec:	006000c5 	.word	0x006000c5
    23f0:	00fc00fc 	.word	0x00fc00fc
    23f4:	00b800fc 	.word	0x00b800fc
    23f8:	038d0060 	.word	0x038d0060
    23fc:	00ba038d 	.word	0x00ba038d
    2400:	0255038d 	.word	0x0255038d
    2404:	02900270 	.word	0x02900270
    2408:	038d00c3 	.word	0x038d00c3
    240c:	038d02a0 	.word	0x038d02a0
    2410:	038d02c4 	.word	0x038d02c4
    2414:	02e3038d 	.word	0x02e3038d
    2418:	232b      	movs	r3, #43	; 0x2b
    241a:	e002      	b.n	2422 <_svfprintf_r+0x19a>
    241c:	2b00      	cmp	r3, #0
    241e:	d100      	bne.n	2422 <_svfprintf_r+0x19a>
    2420:	2320      	movs	r3, #32
    2422:	9d12      	ldr	r5, [sp, #72]	; 0x48
    2424:	e794      	b.n	2350 <_svfprintf_r+0xc8>
    2426:	466a      	mov	r2, sp
    2428:	327f      	adds	r2, #127	; 0x7f
    242a:	7013      	strb	r3, [r2, #0]
    242c:	e070      	b.n	2510 <_svfprintf_r+0x288>
    242e:	466a      	mov	r2, sp
    2430:	327f      	adds	r2, #127	; 0x7f
    2432:	7013      	strb	r3, [r2, #0]
    2434:	4dc6      	ldr	r5, [pc, #792]	; (2750 <_svfprintf_r+0x4c8>)
    2436:	e27d      	b.n	2934 <_svfprintf_r+0x6ac>
    2438:	2201      	movs	r2, #1
    243a:	e007      	b.n	244c <_svfprintf_r+0x1c4>
    243c:	683d      	ldr	r5, [r7, #0]
    243e:	3704      	adds	r7, #4
    2440:	9514      	str	r5, [sp, #80]	; 0x50
    2442:	2d00      	cmp	r5, #0
    2444:	daed      	bge.n	2422 <_svfprintf_r+0x19a>
    2446:	426d      	negs	r5, r5
    2448:	9514      	str	r5, [sp, #80]	; 0x50
    244a:	2204      	movs	r2, #4
    244c:	4316      	orrs	r6, r2
    244e:	e7e8      	b.n	2422 <_svfprintf_r+0x19a>
    2450:	9d12      	ldr	r5, [sp, #72]	; 0x48
    2452:	9a12      	ldr	r2, [sp, #72]	; 0x48
    2454:	782d      	ldrb	r5, [r5, #0]
    2456:	3201      	adds	r2, #1
    2458:	950b      	str	r5, [sp, #44]	; 0x2c
    245a:	2d2a      	cmp	r5, #42	; 0x2a
    245c:	d001      	beq.n	2462 <_svfprintf_r+0x1da>
    245e:	2100      	movs	r1, #0
    2460:	e00d      	b.n	247e <_svfprintf_r+0x1f6>
    2462:	1d39      	adds	r1, r7, #4
    2464:	683f      	ldr	r7, [r7, #0]
    2466:	970a      	str	r7, [sp, #40]	; 0x28
    2468:	2f00      	cmp	r7, #0
    246a:	da05      	bge.n	2478 <_svfprintf_r+0x1f0>
    246c:	9212      	str	r2, [sp, #72]	; 0x48
    246e:	2201      	movs	r2, #1
    2470:	4252      	negs	r2, r2
    2472:	1c0f      	adds	r7, r1, #0
    2474:	920a      	str	r2, [sp, #40]	; 0x28
    2476:	e7d4      	b.n	2422 <_svfprintf_r+0x19a>
    2478:	1c0f      	adds	r7, r1, #0
    247a:	9212      	str	r2, [sp, #72]	; 0x48
    247c:	e7d1      	b.n	2422 <_svfprintf_r+0x19a>
    247e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    2480:	9212      	str	r2, [sp, #72]	; 0x48
    2482:	3830      	subs	r0, #48	; 0x30
    2484:	2809      	cmp	r0, #9
    2486:	d806      	bhi.n	2496 <_svfprintf_r+0x20e>
    2488:	250a      	movs	r5, #10
    248a:	4369      	muls	r1, r5
    248c:	7815      	ldrb	r5, [r2, #0]
    248e:	1809      	adds	r1, r1, r0
    2490:	950b      	str	r5, [sp, #44]	; 0x2c
    2492:	3201      	adds	r2, #1
    2494:	e7f3      	b.n	247e <_svfprintf_r+0x1f6>
    2496:	910a      	str	r1, [sp, #40]	; 0x28
    2498:	2900      	cmp	r1, #0
    249a:	db00      	blt.n	249e <_svfprintf_r+0x216>
    249c:	e75c      	b.n	2358 <_svfprintf_r+0xd0>
    249e:	2201      	movs	r2, #1
    24a0:	4252      	negs	r2, r2
    24a2:	920a      	str	r2, [sp, #40]	; 0x28
    24a4:	e758      	b.n	2358 <_svfprintf_r+0xd0>
    24a6:	2280      	movs	r2, #128	; 0x80
    24a8:	e7d0      	b.n	244c <_svfprintf_r+0x1c4>
    24aa:	2500      	movs	r5, #0
    24ac:	9514      	str	r5, [sp, #80]	; 0x50
    24ae:	9d14      	ldr	r5, [sp, #80]	; 0x50
    24b0:	210a      	movs	r1, #10
    24b2:	4369      	muls	r1, r5
    24b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    24b6:	9d12      	ldr	r5, [sp, #72]	; 0x48
    24b8:	3a30      	subs	r2, #48	; 0x30
    24ba:	188a      	adds	r2, r1, r2
    24bc:	3501      	adds	r5, #1
    24be:	9214      	str	r2, [sp, #80]	; 0x50
    24c0:	1c2a      	adds	r2, r5, #0
    24c2:	3a01      	subs	r2, #1
    24c4:	7812      	ldrb	r2, [r2, #0]
    24c6:	9512      	str	r5, [sp, #72]	; 0x48
    24c8:	920b      	str	r2, [sp, #44]	; 0x2c
    24ca:	3a30      	subs	r2, #48	; 0x30
    24cc:	2a09      	cmp	r2, #9
    24ce:	d9ee      	bls.n	24ae <_svfprintf_r+0x226>
    24d0:	e742      	b.n	2358 <_svfprintf_r+0xd0>
    24d2:	2208      	movs	r2, #8
    24d4:	e7ba      	b.n	244c <_svfprintf_r+0x1c4>
    24d6:	2240      	movs	r2, #64	; 0x40
    24d8:	e7b8      	b.n	244c <_svfprintf_r+0x1c4>
    24da:	9d12      	ldr	r5, [sp, #72]	; 0x48
    24dc:	782a      	ldrb	r2, [r5, #0]
    24de:	2a6c      	cmp	r2, #108	; 0x6c
    24e0:	d102      	bne.n	24e8 <_svfprintf_r+0x260>
    24e2:	3501      	adds	r5, #1
    24e4:	9512      	str	r5, [sp, #72]	; 0x48
    24e6:	e001      	b.n	24ec <_svfprintf_r+0x264>
    24e8:	2210      	movs	r2, #16
    24ea:	e7af      	b.n	244c <_svfprintf_r+0x1c4>
    24ec:	2220      	movs	r2, #32
    24ee:	e7ad      	b.n	244c <_svfprintf_r+0x1c4>
    24f0:	6838      	ldr	r0, [r7, #0]
    24f2:	466a      	mov	r2, sp
    24f4:	ab2a      	add	r3, sp, #168	; 0xa8
    24f6:	2500      	movs	r5, #0
    24f8:	327f      	adds	r2, #127	; 0x7f
    24fa:	2101      	movs	r1, #1
    24fc:	7018      	strb	r0, [r3, #0]
    24fe:	7015      	strb	r5, [r2, #0]
    2500:	3704      	adds	r7, #4
    2502:	910a      	str	r1, [sp, #40]	; 0x28
    2504:	e2c9      	b.n	2a9a <_svfprintf_r+0x812>
    2506:	466a      	mov	r2, sp
    2508:	327f      	adds	r2, #127	; 0x7f
    250a:	7013      	strb	r3, [r2, #0]
    250c:	2310      	movs	r3, #16
    250e:	431e      	orrs	r6, r3
    2510:	06b2      	lsls	r2, r6, #26
    2512:	d509      	bpl.n	2528 <_svfprintf_r+0x2a0>
    2514:	1dfb      	adds	r3, r7, #7
    2516:	2207      	movs	r2, #7
    2518:	4393      	bics	r3, r2
    251a:	1c1f      	adds	r7, r3, #0
    251c:	6818      	ldr	r0, [r3, #0]
    251e:	6859      	ldr	r1, [r3, #4]
    2520:	3708      	adds	r7, #8
    2522:	9008      	str	r0, [sp, #32]
    2524:	9109      	str	r1, [sp, #36]	; 0x24
    2526:	e00a      	b.n	253e <_svfprintf_r+0x2b6>
    2528:	1d3b      	adds	r3, r7, #4
    252a:	683a      	ldr	r2, [r7, #0]
    252c:	06f1      	lsls	r1, r6, #27
    252e:	d402      	bmi.n	2536 <_svfprintf_r+0x2ae>
    2530:	0675      	lsls	r5, r6, #25
    2532:	d500      	bpl.n	2536 <_svfprintf_r+0x2ae>
    2534:	b212      	sxth	r2, r2
    2536:	9208      	str	r2, [sp, #32]
    2538:	17d2      	asrs	r2, r2, #31
    253a:	9209      	str	r2, [sp, #36]	; 0x24
    253c:	1c1f      	adds	r7, r3, #0
    253e:	9809      	ldr	r0, [sp, #36]	; 0x24
    2540:	2800      	cmp	r0, #0
    2542:	db00      	blt.n	2546 <_svfprintf_r+0x2be>
    2544:	e226      	b.n	2994 <_svfprintf_r+0x70c>
    2546:	9808      	ldr	r0, [sp, #32]
    2548:	9909      	ldr	r1, [sp, #36]	; 0x24
    254a:	2300      	movs	r3, #0
    254c:	4242      	negs	r2, r0
    254e:	418b      	sbcs	r3, r1
    2550:	9208      	str	r2, [sp, #32]
    2552:	9309      	str	r3, [sp, #36]	; 0x24
    2554:	466b      	mov	r3, sp
    2556:	222d      	movs	r2, #45	; 0x2d
    2558:	337f      	adds	r3, #127	; 0x7f
    255a:	701a      	strb	r2, [r3, #0]
    255c:	e21a      	b.n	2994 <_svfprintf_r+0x70c>
    255e:	466a      	mov	r2, sp
    2560:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    2562:	327f      	adds	r2, #127	; 0x7f
    2564:	7013      	strb	r3, [r2, #0]
    2566:	1dfb      	adds	r3, r7, #7
    2568:	2207      	movs	r2, #7
    256a:	4393      	bics	r3, r2
    256c:	9613      	str	r6, [sp, #76]	; 0x4c
    256e:	9515      	str	r5, [sp, #84]	; 0x54
    2570:	681d      	ldr	r5, [r3, #0]
    2572:	1c1f      	adds	r7, r3, #0
    2574:	9516      	str	r5, [sp, #88]	; 0x58
    2576:	685b      	ldr	r3, [r3, #4]
    2578:	9816      	ldr	r0, [sp, #88]	; 0x58
    257a:	9318      	str	r3, [sp, #96]	; 0x60
    257c:	9918      	ldr	r1, [sp, #96]	; 0x60
    257e:	3708      	adds	r7, #8
    2580:	f002 fc32 	bl	4de8 <__fpclassifyd>
    2584:	2801      	cmp	r0, #1
    2586:	d112      	bne.n	25ae <_svfprintf_r+0x326>
    2588:	9816      	ldr	r0, [sp, #88]	; 0x58
    258a:	9918      	ldr	r1, [sp, #96]	; 0x60
    258c:	4b6f      	ldr	r3, [pc, #444]	; (274c <_svfprintf_r+0x4c4>)
    258e:	4a6e      	ldr	r2, [pc, #440]	; (2748 <_svfprintf_r+0x4c0>)
    2590:	f003 fb62 	bl	5c58 <__aeabi_dcmplt>
    2594:	2800      	cmp	r0, #0
    2596:	d003      	beq.n	25a0 <_svfprintf_r+0x318>
    2598:	466b      	mov	r3, sp
    259a:	222d      	movs	r2, #45	; 0x2d
    259c:	337f      	adds	r3, #127	; 0x7f
    259e:	701a      	strb	r2, [r3, #0]
    25a0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    25a2:	2d47      	cmp	r5, #71	; 0x47
    25a4:	dc01      	bgt.n	25aa <_svfprintf_r+0x322>
    25a6:	4d6b      	ldr	r5, [pc, #428]	; (2754 <_svfprintf_r+0x4cc>)
    25a8:	e00d      	b.n	25c6 <_svfprintf_r+0x33e>
    25aa:	4d6b      	ldr	r5, [pc, #428]	; (2758 <_svfprintf_r+0x4d0>)
    25ac:	e00b      	b.n	25c6 <_svfprintf_r+0x33e>
    25ae:	9816      	ldr	r0, [sp, #88]	; 0x58
    25b0:	9918      	ldr	r1, [sp, #96]	; 0x60
    25b2:	f002 fc19 	bl	4de8 <__fpclassifyd>
    25b6:	2800      	cmp	r0, #0
    25b8:	d10a      	bne.n	25d0 <_svfprintf_r+0x348>
    25ba:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    25bc:	2d47      	cmp	r5, #71	; 0x47
    25be:	dc01      	bgt.n	25c4 <_svfprintf_r+0x33c>
    25c0:	4d66      	ldr	r5, [pc, #408]	; (275c <_svfprintf_r+0x4d4>)
    25c2:	e000      	b.n	25c6 <_svfprintf_r+0x33e>
    25c4:	4d66      	ldr	r5, [pc, #408]	; (2760 <_svfprintf_r+0x4d8>)
    25c6:	2380      	movs	r3, #128	; 0x80
    25c8:	950e      	str	r5, [sp, #56]	; 0x38
    25ca:	439e      	bics	r6, r3
    25cc:	2503      	movs	r5, #3
    25ce:	e184      	b.n	28da <_svfprintf_r+0x652>
    25d0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    25d2:	3501      	adds	r5, #1
    25d4:	d009      	beq.n	25ea <_svfprintf_r+0x362>
    25d6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    25d8:	2320      	movs	r3, #32
    25da:	439d      	bics	r5, r3
    25dc:	2d47      	cmp	r5, #71	; 0x47
    25de:	d106      	bne.n	25ee <_svfprintf_r+0x366>
    25e0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    25e2:	2d00      	cmp	r5, #0
    25e4:	d103      	bne.n	25ee <_svfprintf_r+0x366>
    25e6:	2501      	movs	r5, #1
    25e8:	e000      	b.n	25ec <_svfprintf_r+0x364>
    25ea:	2506      	movs	r5, #6
    25ec:	950a      	str	r5, [sp, #40]	; 0x28
    25ee:	2380      	movs	r3, #128	; 0x80
    25f0:	005b      	lsls	r3, r3, #1
    25f2:	431e      	orrs	r6, r3
    25f4:	9b18      	ldr	r3, [sp, #96]	; 0x60
    25f6:	2b00      	cmp	r3, #0
    25f8:	da06      	bge.n	2608 <_svfprintf_r+0x380>
    25fa:	9d18      	ldr	r5, [sp, #96]	; 0x60
    25fc:	2080      	movs	r0, #128	; 0x80
    25fe:	0600      	lsls	r0, r0, #24
    2600:	1828      	adds	r0, r5, r0
    2602:	900f      	str	r0, [sp, #60]	; 0x3c
    2604:	252d      	movs	r5, #45	; 0x2d
    2606:	e002      	b.n	260e <_svfprintf_r+0x386>
    2608:	9d18      	ldr	r5, [sp, #96]	; 0x60
    260a:	950f      	str	r5, [sp, #60]	; 0x3c
    260c:	2500      	movs	r5, #0
    260e:	951b      	str	r5, [sp, #108]	; 0x6c
    2610:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    2612:	2320      	movs	r3, #32
    2614:	439d      	bics	r5, r3
    2616:	9511      	str	r5, [sp, #68]	; 0x44
    2618:	2d46      	cmp	r5, #70	; 0x46
    261a:	d004      	beq.n	2626 <_svfprintf_r+0x39e>
    261c:	2d45      	cmp	r5, #69	; 0x45
    261e:	d105      	bne.n	262c <_svfprintf_r+0x3a4>
    2620:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    2622:	3501      	adds	r5, #1
    2624:	e003      	b.n	262e <_svfprintf_r+0x3a6>
    2626:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    2628:	2303      	movs	r3, #3
    262a:	e001      	b.n	2630 <_svfprintf_r+0x3a8>
    262c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    262e:	2302      	movs	r3, #2
    2630:	9300      	str	r3, [sp, #0]
    2632:	ab21      	add	r3, sp, #132	; 0x84
    2634:	9302      	str	r3, [sp, #8]
    2636:	ab22      	add	r3, sp, #136	; 0x88
    2638:	9303      	str	r3, [sp, #12]
    263a:	ab25      	add	r3, sp, #148	; 0x94
    263c:	9304      	str	r3, [sp, #16]
    263e:	9501      	str	r5, [sp, #4]
    2640:	980d      	ldr	r0, [sp, #52]	; 0x34
    2642:	9a16      	ldr	r2, [sp, #88]	; 0x58
    2644:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2646:	f000 feb7 	bl	33b8 <_dtoa_r>
    264a:	900e      	str	r0, [sp, #56]	; 0x38
    264c:	9811      	ldr	r0, [sp, #68]	; 0x44
    264e:	2847      	cmp	r0, #71	; 0x47
    2650:	d10b      	bne.n	266a <_svfprintf_r+0x3e2>
    2652:	9913      	ldr	r1, [sp, #76]	; 0x4c
    2654:	07c9      	lsls	r1, r1, #31
    2656:	d408      	bmi.n	266a <_svfprintf_r+0x3e2>
    2658:	9d25      	ldr	r5, [sp, #148]	; 0x94
    265a:	980e      	ldr	r0, [sp, #56]	; 0x38
    265c:	9a21      	ldr	r2, [sp, #132]	; 0x84
    265e:	1a2d      	subs	r5, r5, r0
    2660:	9510      	str	r5, [sp, #64]	; 0x40
    2662:	9d11      	ldr	r5, [sp, #68]	; 0x44
    2664:	2d47      	cmp	r5, #71	; 0x47
    2666:	d136      	bne.n	26d6 <_svfprintf_r+0x44e>
    2668:	e02b      	b.n	26c2 <_svfprintf_r+0x43a>
    266a:	980e      	ldr	r0, [sp, #56]	; 0x38
    266c:	9911      	ldr	r1, [sp, #68]	; 0x44
    266e:	1940      	adds	r0, r0, r5
    2670:	9010      	str	r0, [sp, #64]	; 0x40
    2672:	2946      	cmp	r1, #70	; 0x46
    2674:	d112      	bne.n	269c <_svfprintf_r+0x414>
    2676:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    2678:	7813      	ldrb	r3, [r2, #0]
    267a:	2b30      	cmp	r3, #48	; 0x30
    267c:	d10a      	bne.n	2694 <_svfprintf_r+0x40c>
    267e:	9816      	ldr	r0, [sp, #88]	; 0x58
    2680:	990f      	ldr	r1, [sp, #60]	; 0x3c
    2682:	4b32      	ldr	r3, [pc, #200]	; (274c <_svfprintf_r+0x4c4>)
    2684:	4a30      	ldr	r2, [pc, #192]	; (2748 <_svfprintf_r+0x4c0>)
    2686:	f003 fae1 	bl	5c4c <__aeabi_dcmpeq>
    268a:	2800      	cmp	r0, #0
    268c:	d102      	bne.n	2694 <_svfprintf_r+0x40c>
    268e:	2301      	movs	r3, #1
    2690:	1b5d      	subs	r5, r3, r5
    2692:	9521      	str	r5, [sp, #132]	; 0x84
    2694:	9d10      	ldr	r5, [sp, #64]	; 0x40
    2696:	9821      	ldr	r0, [sp, #132]	; 0x84
    2698:	182d      	adds	r5, r5, r0
    269a:	9510      	str	r5, [sp, #64]	; 0x40
    269c:	9816      	ldr	r0, [sp, #88]	; 0x58
    269e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    26a0:	4b2a      	ldr	r3, [pc, #168]	; (274c <_svfprintf_r+0x4c4>)
    26a2:	4a29      	ldr	r2, [pc, #164]	; (2748 <_svfprintf_r+0x4c0>)
    26a4:	f003 fad2 	bl	5c4c <__aeabi_dcmpeq>
    26a8:	2800      	cmp	r0, #0
    26aa:	d001      	beq.n	26b0 <_svfprintf_r+0x428>
    26ac:	9d10      	ldr	r5, [sp, #64]	; 0x40
    26ae:	9525      	str	r5, [sp, #148]	; 0x94
    26b0:	9b25      	ldr	r3, [sp, #148]	; 0x94
    26b2:	9d10      	ldr	r5, [sp, #64]	; 0x40
    26b4:	42ab      	cmp	r3, r5
    26b6:	d2cf      	bcs.n	2658 <_svfprintf_r+0x3d0>
    26b8:	1c5a      	adds	r2, r3, #1
    26ba:	9225      	str	r2, [sp, #148]	; 0x94
    26bc:	2230      	movs	r2, #48	; 0x30
    26be:	701a      	strb	r2, [r3, #0]
    26c0:	e7f6      	b.n	26b0 <_svfprintf_r+0x428>
    26c2:	1cd0      	adds	r0, r2, #3
    26c4:	db03      	blt.n	26ce <_svfprintf_r+0x446>
    26c6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    26c8:	42aa      	cmp	r2, r5
    26ca:	dc00      	bgt.n	26ce <_svfprintf_r+0x446>
    26cc:	e07e      	b.n	27cc <_svfprintf_r+0x544>
    26ce:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    26d0:	3d02      	subs	r5, #2
    26d2:	950b      	str	r5, [sp, #44]	; 0x2c
    26d4:	e002      	b.n	26dc <_svfprintf_r+0x454>
    26d6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    26d8:	2d65      	cmp	r5, #101	; 0x65
    26da:	dc5e      	bgt.n	279a <_svfprintf_r+0x512>
    26dc:	980b      	ldr	r0, [sp, #44]	; 0x2c
    26de:	1e55      	subs	r5, r2, #1
    26e0:	ab23      	add	r3, sp, #140	; 0x8c
    26e2:	7018      	strb	r0, [r3, #0]
    26e4:	9521      	str	r5, [sp, #132]	; 0x84
    26e6:	3301      	adds	r3, #1
    26e8:	222b      	movs	r2, #43	; 0x2b
    26ea:	2d00      	cmp	r5, #0
    26ec:	da01      	bge.n	26f2 <_svfprintf_r+0x46a>
    26ee:	426d      	negs	r5, r5
    26f0:	222d      	movs	r2, #45	; 0x2d
    26f2:	701a      	strb	r2, [r3, #0]
    26f4:	2d09      	cmp	r5, #9
    26f6:	dd35      	ble.n	2764 <_svfprintf_r+0x4dc>
    26f8:	4669      	mov	r1, sp
    26fa:	319a      	adds	r1, #154	; 0x9a
    26fc:	910a      	str	r1, [sp, #40]	; 0x28
    26fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2700:	1c28      	adds	r0, r5, #0
    2702:	210a      	movs	r1, #10
    2704:	9211      	str	r2, [sp, #68]	; 0x44
    2706:	f003 fa87 	bl	5c18 <__aeabi_idivmod>
    270a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    270c:	3130      	adds	r1, #48	; 0x30
    270e:	7019      	strb	r1, [r3, #0]
    2710:	1c28      	adds	r0, r5, #0
    2712:	210a      	movs	r1, #10
    2714:	f003 fa2a 	bl	5b6c <__aeabi_idiv>
    2718:	1c05      	adds	r5, r0, #0
    271a:	980a      	ldr	r0, [sp, #40]	; 0x28
    271c:	3801      	subs	r0, #1
    271e:	900a      	str	r0, [sp, #40]	; 0x28
    2720:	2d09      	cmp	r5, #9
    2722:	dcec      	bgt.n	26fe <_svfprintf_r+0x476>
    2724:	9a11      	ldr	r2, [sp, #68]	; 0x44
    2726:	3530      	adds	r5, #48	; 0x30
    2728:	3a01      	subs	r2, #1
    272a:	466b      	mov	r3, sp
    272c:	7015      	strb	r5, [r2, #0]
    272e:	338f      	adds	r3, #143	; 0x8f
    2730:	1c10      	adds	r0, r2, #0
    2732:	4669      	mov	r1, sp
    2734:	319b      	adds	r1, #155	; 0x9b
    2736:	1e5a      	subs	r2, r3, #1
    2738:	3301      	adds	r3, #1
    273a:	4288      	cmp	r0, r1
    273c:	d219      	bcs.n	2772 <_svfprintf_r+0x4ea>
    273e:	7801      	ldrb	r1, [r0, #0]
    2740:	1e9a      	subs	r2, r3, #2
    2742:	7011      	strb	r1, [r2, #0]
    2744:	3001      	adds	r0, #1
    2746:	e7f4      	b.n	2732 <_svfprintf_r+0x4aa>
	...
    2750:	00007aaa 	.word	0x00007aaa
    2754:	00007a9a 	.word	0x00007a9a
    2758:	00007a9e 	.word	0x00007a9e
    275c:	00007aa2 	.word	0x00007aa2
    2760:	00007aa6 	.word	0x00007aa6
    2764:	2230      	movs	r2, #48	; 0x30
    2766:	466b      	mov	r3, sp
    2768:	338e      	adds	r3, #142	; 0x8e
    276a:	18ad      	adds	r5, r5, r2
    276c:	701a      	strb	r2, [r3, #0]
    276e:	705d      	strb	r5, [r3, #1]
    2770:	aa24      	add	r2, sp, #144	; 0x90
    2772:	ab23      	add	r3, sp, #140	; 0x8c
    2774:	9d10      	ldr	r5, [sp, #64]	; 0x40
    2776:	1ad3      	subs	r3, r2, r3
    2778:	195d      	adds	r5, r3, r5
    277a:	950a      	str	r5, [sp, #40]	; 0x28
    277c:	9d10      	ldr	r5, [sp, #64]	; 0x40
    277e:	931c      	str	r3, [sp, #112]	; 0x70
    2780:	2d01      	cmp	r5, #1
    2782:	dc04      	bgt.n	278e <_svfprintf_r+0x506>
    2784:	2500      	movs	r5, #0
    2786:	9511      	str	r5, [sp, #68]	; 0x44
    2788:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    278a:	07ed      	lsls	r5, r5, #31
    278c:	d536      	bpl.n	27fc <_svfprintf_r+0x574>
    278e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    2790:	3501      	adds	r5, #1
    2792:	950a      	str	r5, [sp, #40]	; 0x28
    2794:	2500      	movs	r5, #0
    2796:	9511      	str	r5, [sp, #68]	; 0x44
    2798:	e030      	b.n	27fc <_svfprintf_r+0x574>
    279a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    279c:	2d66      	cmp	r5, #102	; 0x66
    279e:	d115      	bne.n	27cc <_svfprintf_r+0x544>
    27a0:	1c13      	adds	r3, r2, #0
    27a2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    27a4:	2a00      	cmp	r2, #0
    27a6:	dd08      	ble.n	27ba <_svfprintf_r+0x532>
    27a8:	2d00      	cmp	r5, #0
    27aa:	d102      	bne.n	27b2 <_svfprintf_r+0x52a>
    27ac:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    27ae:	07ed      	lsls	r5, r5, #31
    27b0:	d520      	bpl.n	27f4 <_svfprintf_r+0x56c>
    27b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    27b4:	3301      	adds	r3, #1
    27b6:	18d3      	adds	r3, r2, r3
    27b8:	e01c      	b.n	27f4 <_svfprintf_r+0x56c>
    27ba:	2d00      	cmp	r5, #0
    27bc:	d103      	bne.n	27c6 <_svfprintf_r+0x53e>
    27be:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    27c0:	2301      	movs	r3, #1
    27c2:	421d      	tst	r5, r3
    27c4:	d016      	beq.n	27f4 <_svfprintf_r+0x56c>
    27c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    27c8:	3302      	adds	r3, #2
    27ca:	e013      	b.n	27f4 <_svfprintf_r+0x56c>
    27cc:	9d10      	ldr	r5, [sp, #64]	; 0x40
    27ce:	1e13      	subs	r3, r2, #0
    27d0:	42ab      	cmp	r3, r5
    27d2:	db06      	blt.n	27e2 <_svfprintf_r+0x55a>
    27d4:	2567      	movs	r5, #103	; 0x67
    27d6:	9515      	str	r5, [sp, #84]	; 0x54
    27d8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
    27da:	07ed      	lsls	r5, r5, #31
    27dc:	d50a      	bpl.n	27f4 <_svfprintf_r+0x56c>
    27de:	1c53      	adds	r3, r2, #1
    27e0:	e008      	b.n	27f4 <_svfprintf_r+0x56c>
    27e2:	2301      	movs	r3, #1
    27e4:	2a00      	cmp	r2, #0
    27e6:	dc01      	bgt.n	27ec <_svfprintf_r+0x564>
    27e8:	2302      	movs	r3, #2
    27ea:	1a9b      	subs	r3, r3, r2
    27ec:	9d10      	ldr	r5, [sp, #64]	; 0x40
    27ee:	18eb      	adds	r3, r5, r3
    27f0:	2567      	movs	r5, #103	; 0x67
    27f2:	9515      	str	r5, [sp, #84]	; 0x54
    27f4:	9d15      	ldr	r5, [sp, #84]	; 0x54
    27f6:	9211      	str	r2, [sp, #68]	; 0x44
    27f8:	950b      	str	r5, [sp, #44]	; 0x2c
    27fa:	930a      	str	r3, [sp, #40]	; 0x28
    27fc:	981b      	ldr	r0, [sp, #108]	; 0x6c
    27fe:	2500      	movs	r5, #0
    2800:	42a8      	cmp	r0, r5
    2802:	d100      	bne.n	2806 <_svfprintf_r+0x57e>
    2804:	e14e      	b.n	2aa4 <_svfprintf_r+0x81c>
    2806:	466b      	mov	r3, sp
    2808:	222d      	movs	r2, #45	; 0x2d
    280a:	337f      	adds	r3, #127	; 0x7f
    280c:	701a      	strb	r2, [r3, #0]
    280e:	e149      	b.n	2aa4 <_svfprintf_r+0x81c>
    2810:	466a      	mov	r2, sp
    2812:	327f      	adds	r2, #127	; 0x7f
    2814:	7013      	strb	r3, [r2, #0]
    2816:	1d3b      	adds	r3, r7, #4
    2818:	06b1      	lsls	r1, r6, #26
    281a:	d505      	bpl.n	2828 <_svfprintf_r+0x5a0>
    281c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    281e:	683a      	ldr	r2, [r7, #0]
    2820:	17e9      	asrs	r1, r5, #31
    2822:	6015      	str	r5, [r2, #0]
    2824:	6051      	str	r1, [r2, #4]
    2826:	e00a      	b.n	283e <_svfprintf_r+0x5b6>
    2828:	06f0      	lsls	r0, r6, #27
    282a:	d405      	bmi.n	2838 <_svfprintf_r+0x5b0>
    282c:	0670      	lsls	r0, r6, #25
    282e:	d503      	bpl.n	2838 <_svfprintf_r+0x5b0>
    2830:	683a      	ldr	r2, [r7, #0]
    2832:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    2834:	8015      	strh	r5, [r2, #0]
    2836:	e002      	b.n	283e <_svfprintf_r+0x5b6>
    2838:	683a      	ldr	r2, [r7, #0]
    283a:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    283c:	6015      	str	r5, [r2, #0]
    283e:	1c1f      	adds	r7, r3, #0
    2840:	e551      	b.n	22e6 <_svfprintf_r+0x5e>
    2842:	2310      	movs	r3, #16
    2844:	431e      	orrs	r6, r3
    2846:	2320      	movs	r3, #32
    2848:	4033      	ands	r3, r6
    284a:	d00a      	beq.n	2862 <_svfprintf_r+0x5da>
    284c:	1dfb      	adds	r3, r7, #7
    284e:	2207      	movs	r2, #7
    2850:	4393      	bics	r3, r2
    2852:	6818      	ldr	r0, [r3, #0]
    2854:	6859      	ldr	r1, [r3, #4]
    2856:	9008      	str	r0, [sp, #32]
    2858:	9109      	str	r1, [sp, #36]	; 0x24
    285a:	1c1f      	adds	r7, r3, #0
    285c:	3708      	adds	r7, #8
    285e:	2300      	movs	r3, #0
    2860:	e093      	b.n	298a <_svfprintf_r+0x702>
    2862:	2110      	movs	r1, #16
    2864:	4031      	ands	r1, r6
    2866:	1d3a      	adds	r2, r7, #4
    2868:	2900      	cmp	r1, #0
    286a:	d107      	bne.n	287c <_svfprintf_r+0x5f4>
    286c:	2340      	movs	r3, #64	; 0x40
    286e:	4033      	ands	r3, r6
    2870:	d004      	beq.n	287c <_svfprintf_r+0x5f4>
    2872:	883f      	ldrh	r7, [r7, #0]
    2874:	9109      	str	r1, [sp, #36]	; 0x24
    2876:	9708      	str	r7, [sp, #32]
    2878:	1c17      	adds	r7, r2, #0
    287a:	e7f0      	b.n	285e <_svfprintf_r+0x5d6>
    287c:	683f      	ldr	r7, [r7, #0]
    287e:	9309      	str	r3, [sp, #36]	; 0x24
    2880:	9708      	str	r7, [sp, #32]
    2882:	1c17      	adds	r7, r2, #0
    2884:	e081      	b.n	298a <_svfprintf_r+0x702>
    2886:	6839      	ldr	r1, [r7, #0]
    2888:	2200      	movs	r2, #0
    288a:	9108      	str	r1, [sp, #32]
    288c:	9209      	str	r2, [sp, #36]	; 0x24
    288e:	2130      	movs	r1, #48	; 0x30
    2890:	aa20      	add	r2, sp, #128	; 0x80
    2892:	4dc2      	ldr	r5, [pc, #776]	; (2b9c <_svfprintf_r+0x914>)
    2894:	2302      	movs	r3, #2
    2896:	7011      	strb	r1, [r2, #0]
    2898:	2178      	movs	r1, #120	; 0x78
    289a:	431e      	orrs	r6, r3
    289c:	7051      	strb	r1, [r2, #1]
    289e:	3704      	adds	r7, #4
    28a0:	951d      	str	r5, [sp, #116]	; 0x74
    28a2:	910b      	str	r1, [sp, #44]	; 0x2c
    28a4:	e071      	b.n	298a <_svfprintf_r+0x702>
    28a6:	683b      	ldr	r3, [r7, #0]
    28a8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    28aa:	930e      	str	r3, [sp, #56]	; 0x38
    28ac:	980a      	ldr	r0, [sp, #40]	; 0x28
    28ae:	466b      	mov	r3, sp
    28b0:	9511      	str	r5, [sp, #68]	; 0x44
    28b2:	337f      	adds	r3, #127	; 0x7f
    28b4:	2500      	movs	r5, #0
    28b6:	3704      	adds	r7, #4
    28b8:	701d      	strb	r5, [r3, #0]
    28ba:	42a8      	cmp	r0, r5
    28bc:	db10      	blt.n	28e0 <_svfprintf_r+0x658>
    28be:	980e      	ldr	r0, [sp, #56]	; 0x38
    28c0:	1c29      	adds	r1, r5, #0
    28c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    28c4:	f001 fe96 	bl	45f4 <memchr>
    28c8:	42a8      	cmp	r0, r5
    28ca:	d100      	bne.n	28ce <_svfprintf_r+0x646>
    28cc:	e0e8      	b.n	2aa0 <_svfprintf_r+0x818>
    28ce:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    28d0:	1b40      	subs	r0, r0, r5
    28d2:	9d11      	ldr	r5, [sp, #68]	; 0x44
    28d4:	900a      	str	r0, [sp, #40]	; 0x28
    28d6:	42a8      	cmp	r0, r5
    28d8:	dd00      	ble.n	28dc <_svfprintf_r+0x654>
    28da:	950a      	str	r5, [sp, #40]	; 0x28
    28dc:	2500      	movs	r5, #0
    28de:	e0e0      	b.n	2aa2 <_svfprintf_r+0x81a>
    28e0:	980e      	ldr	r0, [sp, #56]	; 0x38
    28e2:	f002 fac7 	bl	4e74 <strlen>
    28e6:	900a      	str	r0, [sp, #40]	; 0x28
    28e8:	e0db      	b.n	2aa2 <_svfprintf_r+0x81a>
    28ea:	2310      	movs	r3, #16
    28ec:	431e      	orrs	r6, r3
    28ee:	2220      	movs	r2, #32
    28f0:	4032      	ands	r2, r6
    28f2:	d009      	beq.n	2908 <_svfprintf_r+0x680>
    28f4:	1dfb      	adds	r3, r7, #7
    28f6:	2207      	movs	r2, #7
    28f8:	4393      	bics	r3, r2
    28fa:	1c1f      	adds	r7, r3, #0
    28fc:	6818      	ldr	r0, [r3, #0]
    28fe:	6859      	ldr	r1, [r3, #4]
    2900:	3708      	adds	r7, #8
    2902:	9008      	str	r0, [sp, #32]
    2904:	9109      	str	r1, [sp, #36]	; 0x24
    2906:	e00f      	b.n	2928 <_svfprintf_r+0x6a0>
    2908:	2110      	movs	r1, #16
    290a:	4031      	ands	r1, r6
    290c:	1d3b      	adds	r3, r7, #4
    290e:	2900      	cmp	r1, #0
    2910:	d106      	bne.n	2920 <_svfprintf_r+0x698>
    2912:	2240      	movs	r2, #64	; 0x40
    2914:	4032      	ands	r2, r6
    2916:	d003      	beq.n	2920 <_svfprintf_r+0x698>
    2918:	883f      	ldrh	r7, [r7, #0]
    291a:	9109      	str	r1, [sp, #36]	; 0x24
    291c:	9708      	str	r7, [sp, #32]
    291e:	e002      	b.n	2926 <_svfprintf_r+0x69e>
    2920:	683f      	ldr	r7, [r7, #0]
    2922:	9209      	str	r2, [sp, #36]	; 0x24
    2924:	9708      	str	r7, [sp, #32]
    2926:	1c1f      	adds	r7, r3, #0
    2928:	2301      	movs	r3, #1
    292a:	e02e      	b.n	298a <_svfprintf_r+0x702>
    292c:	466a      	mov	r2, sp
    292e:	327f      	adds	r2, #127	; 0x7f
    2930:	4d9a      	ldr	r5, [pc, #616]	; (2b9c <_svfprintf_r+0x914>)
    2932:	7013      	strb	r3, [r2, #0]
    2934:	2220      	movs	r2, #32
    2936:	951d      	str	r5, [sp, #116]	; 0x74
    2938:	4032      	ands	r2, r6
    293a:	d009      	beq.n	2950 <_svfprintf_r+0x6c8>
    293c:	1dfb      	adds	r3, r7, #7
    293e:	2207      	movs	r2, #7
    2940:	4393      	bics	r3, r2
    2942:	1c1f      	adds	r7, r3, #0
    2944:	6818      	ldr	r0, [r3, #0]
    2946:	6859      	ldr	r1, [r3, #4]
    2948:	3708      	adds	r7, #8
    294a:	9008      	str	r0, [sp, #32]
    294c:	9109      	str	r1, [sp, #36]	; 0x24
    294e:	e00f      	b.n	2970 <_svfprintf_r+0x6e8>
    2950:	2110      	movs	r1, #16
    2952:	4031      	ands	r1, r6
    2954:	1d3b      	adds	r3, r7, #4
    2956:	2900      	cmp	r1, #0
    2958:	d106      	bne.n	2968 <_svfprintf_r+0x6e0>
    295a:	2240      	movs	r2, #64	; 0x40
    295c:	4032      	ands	r2, r6
    295e:	d003      	beq.n	2968 <_svfprintf_r+0x6e0>
    2960:	883f      	ldrh	r7, [r7, #0]
    2962:	9109      	str	r1, [sp, #36]	; 0x24
    2964:	9708      	str	r7, [sp, #32]
    2966:	e002      	b.n	296e <_svfprintf_r+0x6e6>
    2968:	683f      	ldr	r7, [r7, #0]
    296a:	9209      	str	r2, [sp, #36]	; 0x24
    296c:	9708      	str	r7, [sp, #32]
    296e:	1c1f      	adds	r7, r3, #0
    2970:	2302      	movs	r3, #2
    2972:	07f1      	lsls	r1, r6, #31
    2974:	d509      	bpl.n	298a <_svfprintf_r+0x702>
    2976:	9a08      	ldr	r2, [sp, #32]
    2978:	9d09      	ldr	r5, [sp, #36]	; 0x24
    297a:	432a      	orrs	r2, r5
    297c:	d005      	beq.n	298a <_svfprintf_r+0x702>
    297e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    2980:	aa20      	add	r2, sp, #128	; 0x80
    2982:	2130      	movs	r1, #48	; 0x30
    2984:	7011      	strb	r1, [r2, #0]
    2986:	7055      	strb	r5, [r2, #1]
    2988:	431e      	orrs	r6, r3
    298a:	466a      	mov	r2, sp
    298c:	2100      	movs	r1, #0
    298e:	327f      	adds	r2, #127	; 0x7f
    2990:	7011      	strb	r1, [r2, #0]
    2992:	e000      	b.n	2996 <_svfprintf_r+0x70e>
    2994:	2301      	movs	r3, #1
    2996:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    2998:	2d00      	cmp	r5, #0
    299a:	db01      	blt.n	29a0 <_svfprintf_r+0x718>
    299c:	2280      	movs	r2, #128	; 0x80
    299e:	4396      	bics	r6, r2
    29a0:	9a08      	ldr	r2, [sp, #32]
    29a2:	9809      	ldr	r0, [sp, #36]	; 0x24
    29a4:	4302      	orrs	r2, r0
    29a6:	d102      	bne.n	29ae <_svfprintf_r+0x726>
    29a8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    29aa:	2d00      	cmp	r5, #0
    29ac:	d056      	beq.n	2a5c <_svfprintf_r+0x7d4>
    29ae:	466d      	mov	r5, sp
    29b0:	35cf      	adds	r5, #207	; 0xcf
    29b2:	2b01      	cmp	r3, #1
    29b4:	d01e      	beq.n	29f4 <_svfprintf_r+0x76c>
    29b6:	2b02      	cmp	r3, #2
    29b8:	d03a      	beq.n	2a30 <_svfprintf_r+0x7a8>
    29ba:	9808      	ldr	r0, [sp, #32]
    29bc:	2307      	movs	r3, #7
    29be:	4003      	ands	r3, r0
    29c0:	3330      	adds	r3, #48	; 0x30
    29c2:	9909      	ldr	r1, [sp, #36]	; 0x24
    29c4:	9a08      	ldr	r2, [sp, #32]
    29c6:	950e      	str	r5, [sp, #56]	; 0x38
    29c8:	702b      	strb	r3, [r5, #0]
    29ca:	9d09      	ldr	r5, [sp, #36]	; 0x24
    29cc:	0748      	lsls	r0, r1, #29
    29ce:	08d1      	lsrs	r1, r2, #3
    29d0:	08ea      	lsrs	r2, r5, #3
    29d2:	4308      	orrs	r0, r1
    29d4:	9209      	str	r2, [sp, #36]	; 0x24
    29d6:	9008      	str	r0, [sp, #32]
    29d8:	1c02      	adds	r2, r0, #0
    29da:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    29dc:	9809      	ldr	r0, [sp, #36]	; 0x24
    29de:	3d01      	subs	r5, #1
    29e0:	4302      	orrs	r2, r0
    29e2:	d1ea      	bne.n	29ba <_svfprintf_r+0x732>
    29e4:	07f1      	lsls	r1, r6, #31
    29e6:	d543      	bpl.n	2a70 <_svfprintf_r+0x7e8>
    29e8:	2b30      	cmp	r3, #48	; 0x30
    29ea:	d041      	beq.n	2a70 <_svfprintf_r+0x7e8>
    29ec:	2230      	movs	r2, #48	; 0x30
    29ee:	950e      	str	r5, [sp, #56]	; 0x38
    29f0:	702a      	strb	r2, [r5, #0]
    29f2:	e03d      	b.n	2a70 <_svfprintf_r+0x7e8>
    29f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    29f6:	2a00      	cmp	r2, #0
    29f8:	d104      	bne.n	2a04 <_svfprintf_r+0x77c>
    29fa:	9b08      	ldr	r3, [sp, #32]
    29fc:	2b09      	cmp	r3, #9
    29fe:	d801      	bhi.n	2a04 <_svfprintf_r+0x77c>
    2a00:	3330      	adds	r3, #48	; 0x30
    2a02:	e033      	b.n	2a6c <_svfprintf_r+0x7e4>
    2a04:	9808      	ldr	r0, [sp, #32]
    2a06:	9909      	ldr	r1, [sp, #36]	; 0x24
    2a08:	220a      	movs	r2, #10
    2a0a:	2300      	movs	r3, #0
    2a0c:	950e      	str	r5, [sp, #56]	; 0x38
    2a0e:	f7fe ff75 	bl	18fc <__aeabi_uldivmod>
    2a12:	9808      	ldr	r0, [sp, #32]
    2a14:	9909      	ldr	r1, [sp, #36]	; 0x24
    2a16:	3230      	adds	r2, #48	; 0x30
    2a18:	702a      	strb	r2, [r5, #0]
    2a1a:	220a      	movs	r2, #10
    2a1c:	2300      	movs	r3, #0
    2a1e:	f7fe ff6d 	bl	18fc <__aeabi_uldivmod>
    2a22:	1c03      	adds	r3, r0, #0
    2a24:	9008      	str	r0, [sp, #32]
    2a26:	9109      	str	r1, [sp, #36]	; 0x24
    2a28:	3d01      	subs	r5, #1
    2a2a:	430b      	orrs	r3, r1
    2a2c:	d1ea      	bne.n	2a04 <_svfprintf_r+0x77c>
    2a2e:	e01f      	b.n	2a70 <_svfprintf_r+0x7e8>
    2a30:	9808      	ldr	r0, [sp, #32]
    2a32:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2a34:	991d      	ldr	r1, [sp, #116]	; 0x74
    2a36:	230f      	movs	r3, #15
    2a38:	4003      	ands	r3, r0
    2a3a:	5ccb      	ldrb	r3, [r1, r3]
    2a3c:	0711      	lsls	r1, r2, #28
    2a3e:	0902      	lsrs	r2, r0, #4
    2a40:	9809      	ldr	r0, [sp, #36]	; 0x24
    2a42:	702b      	strb	r3, [r5, #0]
    2a44:	0903      	lsrs	r3, r0, #4
    2a46:	4311      	orrs	r1, r2
    2a48:	9309      	str	r3, [sp, #36]	; 0x24
    2a4a:	9108      	str	r1, [sp, #32]
    2a4c:	1c0b      	adds	r3, r1, #0
    2a4e:	9909      	ldr	r1, [sp, #36]	; 0x24
    2a50:	950e      	str	r5, [sp, #56]	; 0x38
    2a52:	430b      	orrs	r3, r1
    2a54:	3d01      	subs	r5, #1
    2a56:	2b00      	cmp	r3, #0
    2a58:	d1ea      	bne.n	2a30 <_svfprintf_r+0x7a8>
    2a5a:	e009      	b.n	2a70 <_svfprintf_r+0x7e8>
    2a5c:	ad34      	add	r5, sp, #208	; 0xd0
    2a5e:	950e      	str	r5, [sp, #56]	; 0x38
    2a60:	2b00      	cmp	r3, #0
    2a62:	d105      	bne.n	2a70 <_svfprintf_r+0x7e8>
    2a64:	07f0      	lsls	r0, r6, #31
    2a66:	d503      	bpl.n	2a70 <_svfprintf_r+0x7e8>
    2a68:	3d01      	subs	r5, #1
    2a6a:	2330      	movs	r3, #48	; 0x30
    2a6c:	702b      	strb	r3, [r5, #0]
    2a6e:	950e      	str	r5, [sp, #56]	; 0x38
    2a70:	990e      	ldr	r1, [sp, #56]	; 0x38
    2a72:	ab34      	add	r3, sp, #208	; 0xd0
    2a74:	1a5b      	subs	r3, r3, r1
    2a76:	2200      	movs	r2, #0
    2a78:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    2a7a:	9211      	str	r2, [sp, #68]	; 0x44
    2a7c:	930a      	str	r3, [sp, #40]	; 0x28
    2a7e:	e011      	b.n	2aa4 <_svfprintf_r+0x81c>
    2a80:	466a      	mov	r2, sp
    2a82:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    2a84:	327f      	adds	r2, #127	; 0x7f
    2a86:	7013      	strb	r3, [r2, #0]
    2a88:	2d00      	cmp	r5, #0
    2a8a:	d100      	bne.n	2a8e <_svfprintf_r+0x806>
    2a8c:	e392      	b.n	31b4 <_svfprintf_r+0xf2c>
    2a8e:	ab2a      	add	r3, sp, #168	; 0xa8
    2a90:	701d      	strb	r5, [r3, #0]
    2a92:	2001      	movs	r0, #1
    2a94:	2500      	movs	r5, #0
    2a96:	7015      	strb	r5, [r2, #0]
    2a98:	900a      	str	r0, [sp, #40]	; 0x28
    2a9a:	9511      	str	r5, [sp, #68]	; 0x44
    2a9c:	930e      	str	r3, [sp, #56]	; 0x38
    2a9e:	e001      	b.n	2aa4 <_svfprintf_r+0x81c>
    2aa0:	1c05      	adds	r5, r0, #0
    2aa2:	9511      	str	r5, [sp, #68]	; 0x44
    2aa4:	990a      	ldr	r1, [sp, #40]	; 0x28
    2aa6:	9113      	str	r1, [sp, #76]	; 0x4c
    2aa8:	42a9      	cmp	r1, r5
    2aaa:	da00      	bge.n	2aae <_svfprintf_r+0x826>
    2aac:	9513      	str	r5, [sp, #76]	; 0x4c
    2aae:	466b      	mov	r3, sp
    2ab0:	337f      	adds	r3, #127	; 0x7f
    2ab2:	781b      	ldrb	r3, [r3, #0]
    2ab4:	1e5a      	subs	r2, r3, #1
    2ab6:	4193      	sbcs	r3, r2
    2ab8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    2aba:	18d2      	adds	r2, r2, r3
    2abc:	2302      	movs	r3, #2
    2abe:	4033      	ands	r3, r6
    2ac0:	9213      	str	r2, [sp, #76]	; 0x4c
    2ac2:	9315      	str	r3, [sp, #84]	; 0x54
    2ac4:	d001      	beq.n	2aca <_svfprintf_r+0x842>
    2ac6:	3202      	adds	r2, #2
    2ac8:	9213      	str	r2, [sp, #76]	; 0x4c
    2aca:	2384      	movs	r3, #132	; 0x84
    2acc:	4033      	ands	r3, r6
    2ace:	931b      	str	r3, [sp, #108]	; 0x6c
    2ad0:	d137      	bne.n	2b42 <_svfprintf_r+0x8ba>
    2ad2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    2ad4:	9813      	ldr	r0, [sp, #76]	; 0x4c
    2ad6:	1a1b      	subs	r3, r3, r0
    2ad8:	930f      	str	r3, [sp, #60]	; 0x3c
    2ada:	2b00      	cmp	r3, #0
    2adc:	dd31      	ble.n	2b42 <_svfprintf_r+0x8ba>
    2ade:	4b30      	ldr	r3, [pc, #192]	; (2ba0 <_svfprintf_r+0x918>)
    2ae0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    2ae2:	6023      	str	r3, [r4, #0]
    2ae4:	2a10      	cmp	r2, #16
    2ae6:	dd18      	ble.n	2b1a <_svfprintf_r+0x892>
    2ae8:	2310      	movs	r3, #16
    2aea:	6063      	str	r3, [r4, #4]
    2aec:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    2aee:	3310      	adds	r3, #16
    2af0:	9329      	str	r3, [sp, #164]	; 0xa4
    2af2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    2af4:	3301      	adds	r3, #1
    2af6:	9328      	str	r3, [sp, #160]	; 0xa0
    2af8:	2b07      	cmp	r3, #7
    2afa:	dc01      	bgt.n	2b00 <_svfprintf_r+0x878>
    2afc:	3408      	adds	r4, #8
    2afe:	e008      	b.n	2b12 <_svfprintf_r+0x88a>
    2b00:	980d      	ldr	r0, [sp, #52]	; 0x34
    2b02:	990c      	ldr	r1, [sp, #48]	; 0x30
    2b04:	aa27      	add	r2, sp, #156	; 0x9c
    2b06:	f002 f9bd 	bl	4e84 <__ssprint_r>
    2b0a:	2800      	cmp	r0, #0
    2b0c:	d000      	beq.n	2b10 <_svfprintf_r+0x888>
    2b0e:	e359      	b.n	31c4 <_svfprintf_r+0xf3c>
    2b10:	ac34      	add	r4, sp, #208	; 0xd0
    2b12:	990f      	ldr	r1, [sp, #60]	; 0x3c
    2b14:	3910      	subs	r1, #16
    2b16:	910f      	str	r1, [sp, #60]	; 0x3c
    2b18:	e7e1      	b.n	2ade <_svfprintf_r+0x856>
    2b1a:	9829      	ldr	r0, [sp, #164]	; 0xa4
    2b1c:	6062      	str	r2, [r4, #4]
    2b1e:	1813      	adds	r3, r2, r0
    2b20:	9329      	str	r3, [sp, #164]	; 0xa4
    2b22:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    2b24:	3301      	adds	r3, #1
    2b26:	9328      	str	r3, [sp, #160]	; 0xa0
    2b28:	2b07      	cmp	r3, #7
    2b2a:	dc01      	bgt.n	2b30 <_svfprintf_r+0x8a8>
    2b2c:	3408      	adds	r4, #8
    2b2e:	e008      	b.n	2b42 <_svfprintf_r+0x8ba>
    2b30:	980d      	ldr	r0, [sp, #52]	; 0x34
    2b32:	990c      	ldr	r1, [sp, #48]	; 0x30
    2b34:	aa27      	add	r2, sp, #156	; 0x9c
    2b36:	f002 f9a5 	bl	4e84 <__ssprint_r>
    2b3a:	2800      	cmp	r0, #0
    2b3c:	d000      	beq.n	2b40 <_svfprintf_r+0x8b8>
    2b3e:	e341      	b.n	31c4 <_svfprintf_r+0xf3c>
    2b40:	ac34      	add	r4, sp, #208	; 0xd0
    2b42:	466b      	mov	r3, sp
    2b44:	337f      	adds	r3, #127	; 0x7f
    2b46:	781a      	ldrb	r2, [r3, #0]
    2b48:	2a00      	cmp	r2, #0
    2b4a:	d015      	beq.n	2b78 <_svfprintf_r+0x8f0>
    2b4c:	6023      	str	r3, [r4, #0]
    2b4e:	2301      	movs	r3, #1
    2b50:	6063      	str	r3, [r4, #4]
    2b52:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    2b54:	3301      	adds	r3, #1
    2b56:	9329      	str	r3, [sp, #164]	; 0xa4
    2b58:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    2b5a:	3301      	adds	r3, #1
    2b5c:	9328      	str	r3, [sp, #160]	; 0xa0
    2b5e:	2b07      	cmp	r3, #7
    2b60:	dc01      	bgt.n	2b66 <_svfprintf_r+0x8de>
    2b62:	3408      	adds	r4, #8
    2b64:	e008      	b.n	2b78 <_svfprintf_r+0x8f0>
    2b66:	980d      	ldr	r0, [sp, #52]	; 0x34
    2b68:	990c      	ldr	r1, [sp, #48]	; 0x30
    2b6a:	aa27      	add	r2, sp, #156	; 0x9c
    2b6c:	f002 f98a 	bl	4e84 <__ssprint_r>
    2b70:	2800      	cmp	r0, #0
    2b72:	d000      	beq.n	2b76 <_svfprintf_r+0x8ee>
    2b74:	e326      	b.n	31c4 <_svfprintf_r+0xf3c>
    2b76:	ac34      	add	r4, sp, #208	; 0xd0
    2b78:	9915      	ldr	r1, [sp, #84]	; 0x54
    2b7a:	2900      	cmp	r1, #0
    2b7c:	d01b      	beq.n	2bb6 <_svfprintf_r+0x92e>
    2b7e:	ab20      	add	r3, sp, #128	; 0x80
    2b80:	6023      	str	r3, [r4, #0]
    2b82:	2302      	movs	r3, #2
    2b84:	6063      	str	r3, [r4, #4]
    2b86:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    2b88:	3302      	adds	r3, #2
    2b8a:	9329      	str	r3, [sp, #164]	; 0xa4
    2b8c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    2b8e:	3301      	adds	r3, #1
    2b90:	9328      	str	r3, [sp, #160]	; 0xa0
    2b92:	2b07      	cmp	r3, #7
    2b94:	dc06      	bgt.n	2ba4 <_svfprintf_r+0x91c>
    2b96:	3408      	adds	r4, #8
    2b98:	e00d      	b.n	2bb6 <_svfprintf_r+0x92e>
    2b9a:	46c0      	nop			; (mov r8, r8)
    2b9c:	00007abb 	.word	0x00007abb
    2ba0:	00007a7a 	.word	0x00007a7a
    2ba4:	980d      	ldr	r0, [sp, #52]	; 0x34
    2ba6:	990c      	ldr	r1, [sp, #48]	; 0x30
    2ba8:	aa27      	add	r2, sp, #156	; 0x9c
    2baa:	f002 f96b 	bl	4e84 <__ssprint_r>
    2bae:	2800      	cmp	r0, #0
    2bb0:	d000      	beq.n	2bb4 <_svfprintf_r+0x92c>
    2bb2:	e307      	b.n	31c4 <_svfprintf_r+0xf3c>
    2bb4:	ac34      	add	r4, sp, #208	; 0xd0
    2bb6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    2bb8:	2a80      	cmp	r2, #128	; 0x80
    2bba:	d138      	bne.n	2c2e <_svfprintf_r+0x9a6>
    2bbc:	9b14      	ldr	r3, [sp, #80]	; 0x50
    2bbe:	9813      	ldr	r0, [sp, #76]	; 0x4c
    2bc0:	1a1b      	subs	r3, r3, r0
    2bc2:	930f      	str	r3, [sp, #60]	; 0x3c
    2bc4:	2b00      	cmp	r3, #0
    2bc6:	dd32      	ble.n	2c2e <_svfprintf_r+0x9a6>
    2bc8:	4bc9      	ldr	r3, [pc, #804]	; (2ef0 <_svfprintf_r+0xc68>)
    2bca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    2bcc:	3310      	adds	r3, #16
    2bce:	6023      	str	r3, [r4, #0]
    2bd0:	2a10      	cmp	r2, #16
    2bd2:	dd18      	ble.n	2c06 <_svfprintf_r+0x97e>
    2bd4:	2310      	movs	r3, #16
    2bd6:	6063      	str	r3, [r4, #4]
    2bd8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    2bda:	3310      	adds	r3, #16
    2bdc:	9329      	str	r3, [sp, #164]	; 0xa4
    2bde:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    2be0:	3301      	adds	r3, #1
    2be2:	9328      	str	r3, [sp, #160]	; 0xa0
    2be4:	2b07      	cmp	r3, #7
    2be6:	dc01      	bgt.n	2bec <_svfprintf_r+0x964>
    2be8:	3408      	adds	r4, #8
    2bea:	e008      	b.n	2bfe <_svfprintf_r+0x976>
    2bec:	980d      	ldr	r0, [sp, #52]	; 0x34
    2bee:	990c      	ldr	r1, [sp, #48]	; 0x30
    2bf0:	aa27      	add	r2, sp, #156	; 0x9c
    2bf2:	f002 f947 	bl	4e84 <__ssprint_r>
    2bf6:	2800      	cmp	r0, #0
    2bf8:	d000      	beq.n	2bfc <_svfprintf_r+0x974>
    2bfa:	e2e3      	b.n	31c4 <_svfprintf_r+0xf3c>
    2bfc:	ac34      	add	r4, sp, #208	; 0xd0
    2bfe:	990f      	ldr	r1, [sp, #60]	; 0x3c
    2c00:	3910      	subs	r1, #16
    2c02:	910f      	str	r1, [sp, #60]	; 0x3c
    2c04:	e7e0      	b.n	2bc8 <_svfprintf_r+0x940>
    2c06:	9829      	ldr	r0, [sp, #164]	; 0xa4
    2c08:	6062      	str	r2, [r4, #4]
    2c0a:	1813      	adds	r3, r2, r0
    2c0c:	9329      	str	r3, [sp, #164]	; 0xa4
    2c0e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    2c10:	3301      	adds	r3, #1
    2c12:	9328      	str	r3, [sp, #160]	; 0xa0
    2c14:	2b07      	cmp	r3, #7
    2c16:	dc01      	bgt.n	2c1c <_svfprintf_r+0x994>
    2c18:	3408      	adds	r4, #8
    2c1a:	e008      	b.n	2c2e <_svfprintf_r+0x9a6>
    2c1c:	980d      	ldr	r0, [sp, #52]	; 0x34
    2c1e:	990c      	ldr	r1, [sp, #48]	; 0x30
    2c20:	aa27      	add	r2, sp, #156	; 0x9c
    2c22:	f002 f92f 	bl	4e84 <__ssprint_r>
    2c26:	2800      	cmp	r0, #0
    2c28:	d000      	beq.n	2c2c <_svfprintf_r+0x9a4>
    2c2a:	e2cb      	b.n	31c4 <_svfprintf_r+0xf3c>
    2c2c:	ac34      	add	r4, sp, #208	; 0xd0
    2c2e:	990a      	ldr	r1, [sp, #40]	; 0x28
    2c30:	1a6d      	subs	r5, r5, r1
    2c32:	2d00      	cmp	r5, #0
    2c34:	dd2f      	ble.n	2c96 <_svfprintf_r+0xa0e>
    2c36:	4bae      	ldr	r3, [pc, #696]	; (2ef0 <_svfprintf_r+0xc68>)
    2c38:	3310      	adds	r3, #16
    2c3a:	6023      	str	r3, [r4, #0]
    2c3c:	2d10      	cmp	r5, #16
    2c3e:	dd16      	ble.n	2c6e <_svfprintf_r+0x9e6>
    2c40:	2310      	movs	r3, #16
    2c42:	6063      	str	r3, [r4, #4]
    2c44:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    2c46:	3310      	adds	r3, #16
    2c48:	9329      	str	r3, [sp, #164]	; 0xa4
    2c4a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    2c4c:	3301      	adds	r3, #1
    2c4e:	9328      	str	r3, [sp, #160]	; 0xa0
    2c50:	2b07      	cmp	r3, #7
    2c52:	dc01      	bgt.n	2c58 <_svfprintf_r+0x9d0>
    2c54:	3408      	adds	r4, #8
    2c56:	e008      	b.n	2c6a <_svfprintf_r+0x9e2>
    2c58:	980d      	ldr	r0, [sp, #52]	; 0x34
    2c5a:	990c      	ldr	r1, [sp, #48]	; 0x30
    2c5c:	aa27      	add	r2, sp, #156	; 0x9c
    2c5e:	f002 f911 	bl	4e84 <__ssprint_r>
    2c62:	2800      	cmp	r0, #0
    2c64:	d000      	beq.n	2c68 <_svfprintf_r+0x9e0>
    2c66:	e2ad      	b.n	31c4 <_svfprintf_r+0xf3c>
    2c68:	ac34      	add	r4, sp, #208	; 0xd0
    2c6a:	3d10      	subs	r5, #16
    2c6c:	e7e3      	b.n	2c36 <_svfprintf_r+0x9ae>
    2c6e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    2c70:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    2c72:	6065      	str	r5, [r4, #4]
    2c74:	3301      	adds	r3, #1
    2c76:	18ad      	adds	r5, r5, r2
    2c78:	9529      	str	r5, [sp, #164]	; 0xa4
    2c7a:	9328      	str	r3, [sp, #160]	; 0xa0
    2c7c:	2b07      	cmp	r3, #7
    2c7e:	dc01      	bgt.n	2c84 <_svfprintf_r+0x9fc>
    2c80:	3408      	adds	r4, #8
    2c82:	e008      	b.n	2c96 <_svfprintf_r+0xa0e>
    2c84:	980d      	ldr	r0, [sp, #52]	; 0x34
    2c86:	990c      	ldr	r1, [sp, #48]	; 0x30
    2c88:	aa27      	add	r2, sp, #156	; 0x9c
    2c8a:	f002 f8fb 	bl	4e84 <__ssprint_r>
    2c8e:	2800      	cmp	r0, #0
    2c90:	d000      	beq.n	2c94 <_svfprintf_r+0xa0c>
    2c92:	e297      	b.n	31c4 <_svfprintf_r+0xf3c>
    2c94:	ac34      	add	r4, sp, #208	; 0xd0
    2c96:	05f3      	lsls	r3, r6, #23
    2c98:	d403      	bmi.n	2ca2 <_svfprintf_r+0xa1a>
    2c9a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    2c9c:	6025      	str	r5, [r4, #0]
    2c9e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    2ca0:	e0d7      	b.n	2e52 <_svfprintf_r+0xbca>
    2ca2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    2ca4:	2d65      	cmp	r5, #101	; 0x65
    2ca6:	dc00      	bgt.n	2caa <_svfprintf_r+0xa22>
    2ca8:	e1b7      	b.n	301a <_svfprintf_r+0xd92>
    2caa:	9816      	ldr	r0, [sp, #88]	; 0x58
    2cac:	9918      	ldr	r1, [sp, #96]	; 0x60
    2cae:	4b8f      	ldr	r3, [pc, #572]	; (2eec <_svfprintf_r+0xc64>)
    2cb0:	4a8d      	ldr	r2, [pc, #564]	; (2ee8 <_svfprintf_r+0xc60>)
    2cb2:	f002 ffcb 	bl	5c4c <__aeabi_dcmpeq>
    2cb6:	2800      	cmp	r0, #0
    2cb8:	d05a      	beq.n	2d70 <_svfprintf_r+0xae8>
    2cba:	4b8e      	ldr	r3, [pc, #568]	; (2ef4 <_svfprintf_r+0xc6c>)
    2cbc:	6023      	str	r3, [r4, #0]
    2cbe:	2301      	movs	r3, #1
    2cc0:	6063      	str	r3, [r4, #4]
    2cc2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    2cc4:	3301      	adds	r3, #1
    2cc6:	9329      	str	r3, [sp, #164]	; 0xa4
    2cc8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    2cca:	3301      	adds	r3, #1
    2ccc:	9328      	str	r3, [sp, #160]	; 0xa0
    2cce:	2b07      	cmp	r3, #7
    2cd0:	dc01      	bgt.n	2cd6 <_svfprintf_r+0xa4e>
    2cd2:	3408      	adds	r4, #8
    2cd4:	e008      	b.n	2ce8 <_svfprintf_r+0xa60>
    2cd6:	980d      	ldr	r0, [sp, #52]	; 0x34
    2cd8:	990c      	ldr	r1, [sp, #48]	; 0x30
    2cda:	aa27      	add	r2, sp, #156	; 0x9c
    2cdc:	f002 f8d2 	bl	4e84 <__ssprint_r>
    2ce0:	2800      	cmp	r0, #0
    2ce2:	d000      	beq.n	2ce6 <_svfprintf_r+0xa5e>
    2ce4:	e26e      	b.n	31c4 <_svfprintf_r+0xf3c>
    2ce6:	ac34      	add	r4, sp, #208	; 0xd0
    2ce8:	9821      	ldr	r0, [sp, #132]	; 0x84
    2cea:	9d10      	ldr	r5, [sp, #64]	; 0x40
    2cec:	42a8      	cmp	r0, r5
    2cee:	db02      	blt.n	2cf6 <_svfprintf_r+0xa6e>
    2cf0:	07f0      	lsls	r0, r6, #31
    2cf2:	d400      	bmi.n	2cf6 <_svfprintf_r+0xa6e>
    2cf4:	e214      	b.n	3120 <_svfprintf_r+0xe98>
    2cf6:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    2cf8:	9829      	ldr	r0, [sp, #164]	; 0xa4
    2cfa:	6025      	str	r5, [r4, #0]
    2cfc:	9d19      	ldr	r5, [sp, #100]	; 0x64
    2cfe:	182b      	adds	r3, r5, r0
    2d00:	9329      	str	r3, [sp, #164]	; 0xa4
    2d02:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    2d04:	6065      	str	r5, [r4, #4]
    2d06:	3301      	adds	r3, #1
    2d08:	9328      	str	r3, [sp, #160]	; 0xa0
    2d0a:	2b07      	cmp	r3, #7
    2d0c:	dc01      	bgt.n	2d12 <_svfprintf_r+0xa8a>
    2d0e:	3408      	adds	r4, #8
    2d10:	e008      	b.n	2d24 <_svfprintf_r+0xa9c>
    2d12:	980d      	ldr	r0, [sp, #52]	; 0x34
    2d14:	990c      	ldr	r1, [sp, #48]	; 0x30
    2d16:	aa27      	add	r2, sp, #156	; 0x9c
    2d18:	f002 f8b4 	bl	4e84 <__ssprint_r>
    2d1c:	2800      	cmp	r0, #0
    2d1e:	d000      	beq.n	2d22 <_svfprintf_r+0xa9a>
    2d20:	e250      	b.n	31c4 <_svfprintf_r+0xf3c>
    2d22:	ac34      	add	r4, sp, #208	; 0xd0
    2d24:	9d10      	ldr	r5, [sp, #64]	; 0x40
    2d26:	3d01      	subs	r5, #1
    2d28:	2d00      	cmp	r5, #0
    2d2a:	dc00      	bgt.n	2d2e <_svfprintf_r+0xaa6>
    2d2c:	e1f8      	b.n	3120 <_svfprintf_r+0xe98>
    2d2e:	4b70      	ldr	r3, [pc, #448]	; (2ef0 <_svfprintf_r+0xc68>)
    2d30:	3310      	adds	r3, #16
    2d32:	6023      	str	r3, [r4, #0]
    2d34:	2d10      	cmp	r5, #16
    2d36:	dd16      	ble.n	2d66 <_svfprintf_r+0xade>
    2d38:	2310      	movs	r3, #16
    2d3a:	6063      	str	r3, [r4, #4]
    2d3c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    2d3e:	3310      	adds	r3, #16
    2d40:	9329      	str	r3, [sp, #164]	; 0xa4
    2d42:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    2d44:	3301      	adds	r3, #1
    2d46:	9328      	str	r3, [sp, #160]	; 0xa0
    2d48:	2b07      	cmp	r3, #7
    2d4a:	dc01      	bgt.n	2d50 <_svfprintf_r+0xac8>
    2d4c:	3408      	adds	r4, #8
    2d4e:	e008      	b.n	2d62 <_svfprintf_r+0xada>
    2d50:	980d      	ldr	r0, [sp, #52]	; 0x34
    2d52:	990c      	ldr	r1, [sp, #48]	; 0x30
    2d54:	aa27      	add	r2, sp, #156	; 0x9c
    2d56:	f002 f895 	bl	4e84 <__ssprint_r>
    2d5a:	2800      	cmp	r0, #0
    2d5c:	d000      	beq.n	2d60 <_svfprintf_r+0xad8>
    2d5e:	e231      	b.n	31c4 <_svfprintf_r+0xf3c>
    2d60:	ac34      	add	r4, sp, #208	; 0xd0
    2d62:	3d10      	subs	r5, #16
    2d64:	e7e3      	b.n	2d2e <_svfprintf_r+0xaa6>
    2d66:	9929      	ldr	r1, [sp, #164]	; 0xa4
    2d68:	6065      	str	r5, [r4, #4]
    2d6a:	186d      	adds	r5, r5, r1
    2d6c:	9529      	str	r5, [sp, #164]	; 0xa4
    2d6e:	e144      	b.n	2ffa <_svfprintf_r+0xd72>
    2d70:	9a21      	ldr	r2, [sp, #132]	; 0x84
    2d72:	2a00      	cmp	r2, #0
    2d74:	dc71      	bgt.n	2e5a <_svfprintf_r+0xbd2>
    2d76:	4b5f      	ldr	r3, [pc, #380]	; (2ef4 <_svfprintf_r+0xc6c>)
    2d78:	6023      	str	r3, [r4, #0]
    2d7a:	2301      	movs	r3, #1
    2d7c:	6063      	str	r3, [r4, #4]
    2d7e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    2d80:	3301      	adds	r3, #1
    2d82:	9329      	str	r3, [sp, #164]	; 0xa4
    2d84:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    2d86:	3301      	adds	r3, #1
    2d88:	9328      	str	r3, [sp, #160]	; 0xa0
    2d8a:	2b07      	cmp	r3, #7
    2d8c:	dc01      	bgt.n	2d92 <_svfprintf_r+0xb0a>
    2d8e:	3408      	adds	r4, #8
    2d90:	e008      	b.n	2da4 <_svfprintf_r+0xb1c>
    2d92:	980d      	ldr	r0, [sp, #52]	; 0x34
    2d94:	990c      	ldr	r1, [sp, #48]	; 0x30
    2d96:	aa27      	add	r2, sp, #156	; 0x9c
    2d98:	f002 f874 	bl	4e84 <__ssprint_r>
    2d9c:	2800      	cmp	r0, #0
    2d9e:	d000      	beq.n	2da2 <_svfprintf_r+0xb1a>
    2da0:	e210      	b.n	31c4 <_svfprintf_r+0xf3c>
    2da2:	ac34      	add	r4, sp, #208	; 0xd0
    2da4:	9b21      	ldr	r3, [sp, #132]	; 0x84
    2da6:	2b00      	cmp	r3, #0
    2da8:	d105      	bne.n	2db6 <_svfprintf_r+0xb2e>
    2daa:	9d10      	ldr	r5, [sp, #64]	; 0x40
    2dac:	2d00      	cmp	r5, #0
    2dae:	d102      	bne.n	2db6 <_svfprintf_r+0xb2e>
    2db0:	07f0      	lsls	r0, r6, #31
    2db2:	d400      	bmi.n	2db6 <_svfprintf_r+0xb2e>
    2db4:	e1b4      	b.n	3120 <_svfprintf_r+0xe98>
    2db6:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    2db8:	9829      	ldr	r0, [sp, #164]	; 0xa4
    2dba:	6025      	str	r5, [r4, #0]
    2dbc:	9d19      	ldr	r5, [sp, #100]	; 0x64
    2dbe:	182b      	adds	r3, r5, r0
    2dc0:	9329      	str	r3, [sp, #164]	; 0xa4
    2dc2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    2dc4:	6065      	str	r5, [r4, #4]
    2dc6:	3301      	adds	r3, #1
    2dc8:	9328      	str	r3, [sp, #160]	; 0xa0
    2dca:	2b07      	cmp	r3, #7
    2dcc:	dc01      	bgt.n	2dd2 <_svfprintf_r+0xb4a>
    2dce:	3408      	adds	r4, #8
    2dd0:	e008      	b.n	2de4 <_svfprintf_r+0xb5c>
    2dd2:	980d      	ldr	r0, [sp, #52]	; 0x34
    2dd4:	990c      	ldr	r1, [sp, #48]	; 0x30
    2dd6:	aa27      	add	r2, sp, #156	; 0x9c
    2dd8:	f002 f854 	bl	4e84 <__ssprint_r>
    2ddc:	2800      	cmp	r0, #0
    2dde:	d000      	beq.n	2de2 <_svfprintf_r+0xb5a>
    2de0:	e1f0      	b.n	31c4 <_svfprintf_r+0xf3c>
    2de2:	ac34      	add	r4, sp, #208	; 0xd0
    2de4:	9921      	ldr	r1, [sp, #132]	; 0x84
    2de6:	424d      	negs	r5, r1
    2de8:	2d00      	cmp	r5, #0
    2dea:	dd2f      	ble.n	2e4c <_svfprintf_r+0xbc4>
    2dec:	4b40      	ldr	r3, [pc, #256]	; (2ef0 <_svfprintf_r+0xc68>)
    2dee:	3310      	adds	r3, #16
    2df0:	6023      	str	r3, [r4, #0]
    2df2:	2d10      	cmp	r5, #16
    2df4:	dd16      	ble.n	2e24 <_svfprintf_r+0xb9c>
    2df6:	2310      	movs	r3, #16
    2df8:	6063      	str	r3, [r4, #4]
    2dfa:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    2dfc:	3310      	adds	r3, #16
    2dfe:	9329      	str	r3, [sp, #164]	; 0xa4
    2e00:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    2e02:	3301      	adds	r3, #1
    2e04:	9328      	str	r3, [sp, #160]	; 0xa0
    2e06:	2b07      	cmp	r3, #7
    2e08:	dc01      	bgt.n	2e0e <_svfprintf_r+0xb86>
    2e0a:	3408      	adds	r4, #8
    2e0c:	e008      	b.n	2e20 <_svfprintf_r+0xb98>
    2e0e:	980d      	ldr	r0, [sp, #52]	; 0x34
    2e10:	990c      	ldr	r1, [sp, #48]	; 0x30
    2e12:	aa27      	add	r2, sp, #156	; 0x9c
    2e14:	f002 f836 	bl	4e84 <__ssprint_r>
    2e18:	2800      	cmp	r0, #0
    2e1a:	d000      	beq.n	2e1e <_svfprintf_r+0xb96>
    2e1c:	e1d2      	b.n	31c4 <_svfprintf_r+0xf3c>
    2e1e:	ac34      	add	r4, sp, #208	; 0xd0
    2e20:	3d10      	subs	r5, #16
    2e22:	e7e3      	b.n	2dec <_svfprintf_r+0xb64>
    2e24:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    2e26:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    2e28:	6065      	str	r5, [r4, #4]
    2e2a:	3301      	adds	r3, #1
    2e2c:	18ad      	adds	r5, r5, r2
    2e2e:	9529      	str	r5, [sp, #164]	; 0xa4
    2e30:	9328      	str	r3, [sp, #160]	; 0xa0
    2e32:	2b07      	cmp	r3, #7
    2e34:	dc01      	bgt.n	2e3a <_svfprintf_r+0xbb2>
    2e36:	3408      	adds	r4, #8
    2e38:	e008      	b.n	2e4c <_svfprintf_r+0xbc4>
    2e3a:	980d      	ldr	r0, [sp, #52]	; 0x34
    2e3c:	990c      	ldr	r1, [sp, #48]	; 0x30
    2e3e:	aa27      	add	r2, sp, #156	; 0x9c
    2e40:	f002 f820 	bl	4e84 <__ssprint_r>
    2e44:	2800      	cmp	r0, #0
    2e46:	d000      	beq.n	2e4a <_svfprintf_r+0xbc2>
    2e48:	e1bc      	b.n	31c4 <_svfprintf_r+0xf3c>
    2e4a:	ac34      	add	r4, sp, #208	; 0xd0
    2e4c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    2e4e:	6025      	str	r5, [r4, #0]
    2e50:	9d10      	ldr	r5, [sp, #64]	; 0x40
    2e52:	6065      	str	r5, [r4, #4]
    2e54:	9829      	ldr	r0, [sp, #164]	; 0xa4
    2e56:	182b      	adds	r3, r5, r0
    2e58:	e0ce      	b.n	2ff8 <_svfprintf_r+0xd70>
    2e5a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    2e5c:	9810      	ldr	r0, [sp, #64]	; 0x40
    2e5e:	990e      	ldr	r1, [sp, #56]	; 0x38
    2e60:	9a11      	ldr	r2, [sp, #68]	; 0x44
    2e62:	182d      	adds	r5, r5, r0
    2e64:	950a      	str	r5, [sp, #40]	; 0x28
    2e66:	1a6d      	subs	r5, r5, r1
    2e68:	4295      	cmp	r5, r2
    2e6a:	dd00      	ble.n	2e6e <_svfprintf_r+0xbe6>
    2e6c:	1c15      	adds	r5, r2, #0
    2e6e:	2d00      	cmp	r5, #0
    2e70:	dd15      	ble.n	2e9e <_svfprintf_r+0xc16>
    2e72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2e74:	9829      	ldr	r0, [sp, #164]	; 0xa4
    2e76:	6023      	str	r3, [r4, #0]
    2e78:	182b      	adds	r3, r5, r0
    2e7a:	9329      	str	r3, [sp, #164]	; 0xa4
    2e7c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    2e7e:	6065      	str	r5, [r4, #4]
    2e80:	3301      	adds	r3, #1
    2e82:	9328      	str	r3, [sp, #160]	; 0xa0
    2e84:	2b07      	cmp	r3, #7
    2e86:	dc01      	bgt.n	2e8c <_svfprintf_r+0xc04>
    2e88:	3408      	adds	r4, #8
    2e8a:	e008      	b.n	2e9e <_svfprintf_r+0xc16>
    2e8c:	980d      	ldr	r0, [sp, #52]	; 0x34
    2e8e:	990c      	ldr	r1, [sp, #48]	; 0x30
    2e90:	aa27      	add	r2, sp, #156	; 0x9c
    2e92:	f001 fff7 	bl	4e84 <__ssprint_r>
    2e96:	2800      	cmp	r0, #0
    2e98:	d000      	beq.n	2e9c <_svfprintf_r+0xc14>
    2e9a:	e193      	b.n	31c4 <_svfprintf_r+0xf3c>
    2e9c:	ac34      	add	r4, sp, #208	; 0xd0
    2e9e:	43eb      	mvns	r3, r5
    2ea0:	17db      	asrs	r3, r3, #31
    2ea2:	9911      	ldr	r1, [sp, #68]	; 0x44
    2ea4:	401d      	ands	r5, r3
    2ea6:	1b4d      	subs	r5, r1, r5
    2ea8:	2d00      	cmp	r5, #0
    2eaa:	dd39      	ble.n	2f20 <_svfprintf_r+0xc98>
    2eac:	4b10      	ldr	r3, [pc, #64]	; (2ef0 <_svfprintf_r+0xc68>)
    2eae:	3310      	adds	r3, #16
    2eb0:	6023      	str	r3, [r4, #0]
    2eb2:	2d10      	cmp	r5, #16
    2eb4:	dd20      	ble.n	2ef8 <_svfprintf_r+0xc70>
    2eb6:	2310      	movs	r3, #16
    2eb8:	6063      	str	r3, [r4, #4]
    2eba:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    2ebc:	3310      	adds	r3, #16
    2ebe:	9329      	str	r3, [sp, #164]	; 0xa4
    2ec0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    2ec2:	3301      	adds	r3, #1
    2ec4:	9328      	str	r3, [sp, #160]	; 0xa0
    2ec6:	2b07      	cmp	r3, #7
    2ec8:	dc01      	bgt.n	2ece <_svfprintf_r+0xc46>
    2eca:	3408      	adds	r4, #8
    2ecc:	e008      	b.n	2ee0 <_svfprintf_r+0xc58>
    2ece:	980d      	ldr	r0, [sp, #52]	; 0x34
    2ed0:	990c      	ldr	r1, [sp, #48]	; 0x30
    2ed2:	aa27      	add	r2, sp, #156	; 0x9c
    2ed4:	f001 ffd6 	bl	4e84 <__ssprint_r>
    2ed8:	2800      	cmp	r0, #0
    2eda:	d000      	beq.n	2ede <_svfprintf_r+0xc56>
    2edc:	e172      	b.n	31c4 <_svfprintf_r+0xf3c>
    2ede:	ac34      	add	r4, sp, #208	; 0xd0
    2ee0:	3d10      	subs	r5, #16
    2ee2:	e7e3      	b.n	2eac <_svfprintf_r+0xc24>
    2ee4:	46c0      	nop			; (mov r8, r8)
    2ee6:	46c0      	nop			; (mov r8, r8)
	...
    2ef0:	00007a7a 	.word	0x00007a7a
    2ef4:	00007acc 	.word	0x00007acc
    2ef8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    2efa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    2efc:	6065      	str	r5, [r4, #4]
    2efe:	3301      	adds	r3, #1
    2f00:	18ad      	adds	r5, r5, r2
    2f02:	9529      	str	r5, [sp, #164]	; 0xa4
    2f04:	9328      	str	r3, [sp, #160]	; 0xa0
    2f06:	2b07      	cmp	r3, #7
    2f08:	dc01      	bgt.n	2f0e <_svfprintf_r+0xc86>
    2f0a:	3408      	adds	r4, #8
    2f0c:	e008      	b.n	2f20 <_svfprintf_r+0xc98>
    2f0e:	980d      	ldr	r0, [sp, #52]	; 0x34
    2f10:	990c      	ldr	r1, [sp, #48]	; 0x30
    2f12:	aa27      	add	r2, sp, #156	; 0x9c
    2f14:	f001 ffb6 	bl	4e84 <__ssprint_r>
    2f18:	2800      	cmp	r0, #0
    2f1a:	d000      	beq.n	2f1e <_svfprintf_r+0xc96>
    2f1c:	e152      	b.n	31c4 <_svfprintf_r+0xf3c>
    2f1e:	ac34      	add	r4, sp, #208	; 0xd0
    2f20:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    2f22:	9811      	ldr	r0, [sp, #68]	; 0x44
    2f24:	9921      	ldr	r1, [sp, #132]	; 0x84
    2f26:	182d      	adds	r5, r5, r0
    2f28:	950e      	str	r5, [sp, #56]	; 0x38
    2f2a:	9d10      	ldr	r5, [sp, #64]	; 0x40
    2f2c:	42a9      	cmp	r1, r5
    2f2e:	db01      	blt.n	2f34 <_svfprintf_r+0xcac>
    2f30:	07f0      	lsls	r0, r6, #31
    2f32:	d516      	bpl.n	2f62 <_svfprintf_r+0xcda>
    2f34:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    2f36:	9829      	ldr	r0, [sp, #164]	; 0xa4
    2f38:	6025      	str	r5, [r4, #0]
    2f3a:	9d19      	ldr	r5, [sp, #100]	; 0x64
    2f3c:	182b      	adds	r3, r5, r0
    2f3e:	9329      	str	r3, [sp, #164]	; 0xa4
    2f40:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    2f42:	6065      	str	r5, [r4, #4]
    2f44:	3301      	adds	r3, #1
    2f46:	9328      	str	r3, [sp, #160]	; 0xa0
    2f48:	2b07      	cmp	r3, #7
    2f4a:	dc01      	bgt.n	2f50 <_svfprintf_r+0xcc8>
    2f4c:	3408      	adds	r4, #8
    2f4e:	e008      	b.n	2f62 <_svfprintf_r+0xcda>
    2f50:	980d      	ldr	r0, [sp, #52]	; 0x34
    2f52:	990c      	ldr	r1, [sp, #48]	; 0x30
    2f54:	aa27      	add	r2, sp, #156	; 0x9c
    2f56:	f001 ff95 	bl	4e84 <__ssprint_r>
    2f5a:	2800      	cmp	r0, #0
    2f5c:	d000      	beq.n	2f60 <_svfprintf_r+0xcd8>
    2f5e:	e131      	b.n	31c4 <_svfprintf_r+0xf3c>
    2f60:	ac34      	add	r4, sp, #208	; 0xd0
    2f62:	9d10      	ldr	r5, [sp, #64]	; 0x40
    2f64:	9821      	ldr	r0, [sp, #132]	; 0x84
    2f66:	990a      	ldr	r1, [sp, #40]	; 0x28
    2f68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    2f6a:	1a2b      	subs	r3, r5, r0
    2f6c:	1a8d      	subs	r5, r1, r2
    2f6e:	429d      	cmp	r5, r3
    2f70:	dd00      	ble.n	2f74 <_svfprintf_r+0xcec>
    2f72:	1c1d      	adds	r5, r3, #0
    2f74:	2d00      	cmp	r5, #0
    2f76:	dd15      	ble.n	2fa4 <_svfprintf_r+0xd1c>
    2f78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2f7a:	9829      	ldr	r0, [sp, #164]	; 0xa4
    2f7c:	6023      	str	r3, [r4, #0]
    2f7e:	182b      	adds	r3, r5, r0
    2f80:	9329      	str	r3, [sp, #164]	; 0xa4
    2f82:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    2f84:	6065      	str	r5, [r4, #4]
    2f86:	3301      	adds	r3, #1
    2f88:	9328      	str	r3, [sp, #160]	; 0xa0
    2f8a:	2b07      	cmp	r3, #7
    2f8c:	dc01      	bgt.n	2f92 <_svfprintf_r+0xd0a>
    2f8e:	3408      	adds	r4, #8
    2f90:	e008      	b.n	2fa4 <_svfprintf_r+0xd1c>
    2f92:	980d      	ldr	r0, [sp, #52]	; 0x34
    2f94:	990c      	ldr	r1, [sp, #48]	; 0x30
    2f96:	aa27      	add	r2, sp, #156	; 0x9c
    2f98:	f001 ff74 	bl	4e84 <__ssprint_r>
    2f9c:	2800      	cmp	r0, #0
    2f9e:	d000      	beq.n	2fa2 <_svfprintf_r+0xd1a>
    2fa0:	e110      	b.n	31c4 <_svfprintf_r+0xf3c>
    2fa2:	ac34      	add	r4, sp, #208	; 0xd0
    2fa4:	43eb      	mvns	r3, r5
    2fa6:	1c2a      	adds	r2, r5, #0
    2fa8:	9821      	ldr	r0, [sp, #132]	; 0x84
    2faa:	9d10      	ldr	r5, [sp, #64]	; 0x40
    2fac:	17db      	asrs	r3, r3, #31
    2fae:	401a      	ands	r2, r3
    2fb0:	1a2b      	subs	r3, r5, r0
    2fb2:	1a9d      	subs	r5, r3, r2
    2fb4:	2d00      	cmp	r5, #0
    2fb6:	dc00      	bgt.n	2fba <_svfprintf_r+0xd32>
    2fb8:	e0b2      	b.n	3120 <_svfprintf_r+0xe98>
    2fba:	4b89      	ldr	r3, [pc, #548]	; (31e0 <_svfprintf_r+0xf58>)
    2fbc:	3310      	adds	r3, #16
    2fbe:	6023      	str	r3, [r4, #0]
    2fc0:	2d10      	cmp	r5, #16
    2fc2:	dd16      	ble.n	2ff2 <_svfprintf_r+0xd6a>
    2fc4:	2310      	movs	r3, #16
    2fc6:	6063      	str	r3, [r4, #4]
    2fc8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    2fca:	3310      	adds	r3, #16
    2fcc:	9329      	str	r3, [sp, #164]	; 0xa4
    2fce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    2fd0:	3301      	adds	r3, #1
    2fd2:	9328      	str	r3, [sp, #160]	; 0xa0
    2fd4:	2b07      	cmp	r3, #7
    2fd6:	dc01      	bgt.n	2fdc <_svfprintf_r+0xd54>
    2fd8:	3408      	adds	r4, #8
    2fda:	e008      	b.n	2fee <_svfprintf_r+0xd66>
    2fdc:	980d      	ldr	r0, [sp, #52]	; 0x34
    2fde:	990c      	ldr	r1, [sp, #48]	; 0x30
    2fe0:	aa27      	add	r2, sp, #156	; 0x9c
    2fe2:	f001 ff4f 	bl	4e84 <__ssprint_r>
    2fe6:	2800      	cmp	r0, #0
    2fe8:	d000      	beq.n	2fec <_svfprintf_r+0xd64>
    2fea:	e0eb      	b.n	31c4 <_svfprintf_r+0xf3c>
    2fec:	ac34      	add	r4, sp, #208	; 0xd0
    2fee:	3d10      	subs	r5, #16
    2ff0:	e7e3      	b.n	2fba <_svfprintf_r+0xd32>
    2ff2:	9929      	ldr	r1, [sp, #164]	; 0xa4
    2ff4:	6065      	str	r5, [r4, #4]
    2ff6:	186b      	adds	r3, r5, r1
    2ff8:	9329      	str	r3, [sp, #164]	; 0xa4
    2ffa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    2ffc:	3301      	adds	r3, #1
    2ffe:	9328      	str	r3, [sp, #160]	; 0xa0
    3000:	2b07      	cmp	r3, #7
    3002:	dc00      	bgt.n	3006 <_svfprintf_r+0xd7e>
    3004:	e08b      	b.n	311e <_svfprintf_r+0xe96>
    3006:	980d      	ldr	r0, [sp, #52]	; 0x34
    3008:	990c      	ldr	r1, [sp, #48]	; 0x30
    300a:	aa27      	add	r2, sp, #156	; 0x9c
    300c:	f001 ff3a 	bl	4e84 <__ssprint_r>
    3010:	2800      	cmp	r0, #0
    3012:	d000      	beq.n	3016 <_svfprintf_r+0xd8e>
    3014:	e0d6      	b.n	31c4 <_svfprintf_r+0xf3c>
    3016:	ac34      	add	r4, sp, #208	; 0xd0
    3018:	e082      	b.n	3120 <_svfprintf_r+0xe98>
    301a:	9d10      	ldr	r5, [sp, #64]	; 0x40
    301c:	2d01      	cmp	r5, #1
    301e:	dc02      	bgt.n	3026 <_svfprintf_r+0xd9e>
    3020:	2301      	movs	r3, #1
    3022:	421e      	tst	r6, r3
    3024:	d06f      	beq.n	3106 <_svfprintf_r+0xe7e>
    3026:	2301      	movs	r3, #1
    3028:	6063      	str	r3, [r4, #4]
    302a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    302c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    302e:	3301      	adds	r3, #1
    3030:	9329      	str	r3, [sp, #164]	; 0xa4
    3032:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    3034:	6025      	str	r5, [r4, #0]
    3036:	3301      	adds	r3, #1
    3038:	9328      	str	r3, [sp, #160]	; 0xa0
    303a:	2b07      	cmp	r3, #7
    303c:	dc01      	bgt.n	3042 <_svfprintf_r+0xdba>
    303e:	3408      	adds	r4, #8
    3040:	e008      	b.n	3054 <_svfprintf_r+0xdcc>
    3042:	980d      	ldr	r0, [sp, #52]	; 0x34
    3044:	990c      	ldr	r1, [sp, #48]	; 0x30
    3046:	aa27      	add	r2, sp, #156	; 0x9c
    3048:	f001 ff1c 	bl	4e84 <__ssprint_r>
    304c:	2800      	cmp	r0, #0
    304e:	d000      	beq.n	3052 <_svfprintf_r+0xdca>
    3050:	e0b8      	b.n	31c4 <_svfprintf_r+0xf3c>
    3052:	ac34      	add	r4, sp, #208	; 0xd0
    3054:	9d1a      	ldr	r5, [sp, #104]	; 0x68
    3056:	9829      	ldr	r0, [sp, #164]	; 0xa4
    3058:	6025      	str	r5, [r4, #0]
    305a:	9d19      	ldr	r5, [sp, #100]	; 0x64
    305c:	182b      	adds	r3, r5, r0
    305e:	9329      	str	r3, [sp, #164]	; 0xa4
    3060:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    3062:	6065      	str	r5, [r4, #4]
    3064:	3301      	adds	r3, #1
    3066:	9328      	str	r3, [sp, #160]	; 0xa0
    3068:	2b07      	cmp	r3, #7
    306a:	dc01      	bgt.n	3070 <_svfprintf_r+0xde8>
    306c:	3408      	adds	r4, #8
    306e:	e008      	b.n	3082 <_svfprintf_r+0xdfa>
    3070:	980d      	ldr	r0, [sp, #52]	; 0x34
    3072:	990c      	ldr	r1, [sp, #48]	; 0x30
    3074:	aa27      	add	r2, sp, #156	; 0x9c
    3076:	f001 ff05 	bl	4e84 <__ssprint_r>
    307a:	2800      	cmp	r0, #0
    307c:	d000      	beq.n	3080 <_svfprintf_r+0xdf8>
    307e:	e0a1      	b.n	31c4 <_svfprintf_r+0xf3c>
    3080:	ac34      	add	r4, sp, #208	; 0xd0
    3082:	9816      	ldr	r0, [sp, #88]	; 0x58
    3084:	9918      	ldr	r1, [sp, #96]	; 0x60
    3086:	4b55      	ldr	r3, [pc, #340]	; (31dc <_svfprintf_r+0xf54>)
    3088:	4a53      	ldr	r2, [pc, #332]	; (31d8 <_svfprintf_r+0xf50>)
    308a:	f002 fddf 	bl	5c4c <__aeabi_dcmpeq>
    308e:	9d10      	ldr	r5, [sp, #64]	; 0x40
    3090:	3d01      	subs	r5, #1
    3092:	2800      	cmp	r0, #0
    3094:	d108      	bne.n	30a8 <_svfprintf_r+0xe20>
    3096:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3098:	6065      	str	r5, [r4, #4]
    309a:	3301      	adds	r3, #1
    309c:	6023      	str	r3, [r4, #0]
    309e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    30a0:	9d10      	ldr	r5, [sp, #64]	; 0x40
    30a2:	3b01      	subs	r3, #1
    30a4:	195b      	adds	r3, r3, r5
    30a6:	e033      	b.n	3110 <_svfprintf_r+0xe88>
    30a8:	2d00      	cmp	r5, #0
    30aa:	dd34      	ble.n	3116 <_svfprintf_r+0xe8e>
    30ac:	4b4c      	ldr	r3, [pc, #304]	; (31e0 <_svfprintf_r+0xf58>)
    30ae:	3310      	adds	r3, #16
    30b0:	6023      	str	r3, [r4, #0]
    30b2:	2d10      	cmp	r5, #16
    30b4:	dd15      	ble.n	30e2 <_svfprintf_r+0xe5a>
    30b6:	2310      	movs	r3, #16
    30b8:	6063      	str	r3, [r4, #4]
    30ba:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    30bc:	3310      	adds	r3, #16
    30be:	9329      	str	r3, [sp, #164]	; 0xa4
    30c0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    30c2:	3301      	adds	r3, #1
    30c4:	9328      	str	r3, [sp, #160]	; 0xa0
    30c6:	2b07      	cmp	r3, #7
    30c8:	dc01      	bgt.n	30ce <_svfprintf_r+0xe46>
    30ca:	3408      	adds	r4, #8
    30cc:	e007      	b.n	30de <_svfprintf_r+0xe56>
    30ce:	980d      	ldr	r0, [sp, #52]	; 0x34
    30d0:	990c      	ldr	r1, [sp, #48]	; 0x30
    30d2:	aa27      	add	r2, sp, #156	; 0x9c
    30d4:	f001 fed6 	bl	4e84 <__ssprint_r>
    30d8:	2800      	cmp	r0, #0
    30da:	d173      	bne.n	31c4 <_svfprintf_r+0xf3c>
    30dc:	ac34      	add	r4, sp, #208	; 0xd0
    30de:	3d10      	subs	r5, #16
    30e0:	e7e4      	b.n	30ac <_svfprintf_r+0xe24>
    30e2:	9829      	ldr	r0, [sp, #164]	; 0xa4
    30e4:	6065      	str	r5, [r4, #4]
    30e6:	182d      	adds	r5, r5, r0
    30e8:	9529      	str	r5, [sp, #164]	; 0xa4
    30ea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    30ec:	3301      	adds	r3, #1
    30ee:	9328      	str	r3, [sp, #160]	; 0xa0
    30f0:	2b07      	cmp	r3, #7
    30f2:	dd0f      	ble.n	3114 <_svfprintf_r+0xe8c>
    30f4:	980d      	ldr	r0, [sp, #52]	; 0x34
    30f6:	990c      	ldr	r1, [sp, #48]	; 0x30
    30f8:	aa27      	add	r2, sp, #156	; 0x9c
    30fa:	f001 fec3 	bl	4e84 <__ssprint_r>
    30fe:	2800      	cmp	r0, #0
    3100:	d160      	bne.n	31c4 <_svfprintf_r+0xf3c>
    3102:	ac34      	add	r4, sp, #208	; 0xd0
    3104:	e007      	b.n	3116 <_svfprintf_r+0xe8e>
    3106:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    3108:	6063      	str	r3, [r4, #4]
    310a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    310c:	6025      	str	r5, [r4, #0]
    310e:	3301      	adds	r3, #1
    3110:	9329      	str	r3, [sp, #164]	; 0xa4
    3112:	e7ea      	b.n	30ea <_svfprintf_r+0xe62>
    3114:	3408      	adds	r4, #8
    3116:	ab23      	add	r3, sp, #140	; 0x8c
    3118:	6023      	str	r3, [r4, #0]
    311a:	9d1c      	ldr	r5, [sp, #112]	; 0x70
    311c:	e699      	b.n	2e52 <_svfprintf_r+0xbca>
    311e:	3408      	adds	r4, #8
    3120:	0771      	lsls	r1, r6, #29
    3122:	d40b      	bmi.n	313c <_svfprintf_r+0xeb4>
    3124:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    3126:	9d14      	ldr	r5, [sp, #80]	; 0x50
    3128:	42ab      	cmp	r3, r5
    312a:	da00      	bge.n	312e <_svfprintf_r+0xea6>
    312c:	1c2b      	adds	r3, r5, #0
    312e:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    3130:	9829      	ldr	r0, [sp, #164]	; 0xa4
    3132:	18ed      	adds	r5, r5, r3
    3134:	9517      	str	r5, [sp, #92]	; 0x5c
    3136:	2800      	cmp	r0, #0
    3138:	d037      	beq.n	31aa <_svfprintf_r+0xf22>
    313a:	e02f      	b.n	319c <_svfprintf_r+0xf14>
    313c:	9914      	ldr	r1, [sp, #80]	; 0x50
    313e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    3140:	1a8d      	subs	r5, r1, r2
    3142:	2d00      	cmp	r5, #0
    3144:	ddee      	ble.n	3124 <_svfprintf_r+0xe9c>
    3146:	4b26      	ldr	r3, [pc, #152]	; (31e0 <_svfprintf_r+0xf58>)
    3148:	6023      	str	r3, [r4, #0]
    314a:	2d10      	cmp	r5, #16
    314c:	dd15      	ble.n	317a <_svfprintf_r+0xef2>
    314e:	2310      	movs	r3, #16
    3150:	6063      	str	r3, [r4, #4]
    3152:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    3154:	3310      	adds	r3, #16
    3156:	9329      	str	r3, [sp, #164]	; 0xa4
    3158:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    315a:	3301      	adds	r3, #1
    315c:	9328      	str	r3, [sp, #160]	; 0xa0
    315e:	2b07      	cmp	r3, #7
    3160:	dc01      	bgt.n	3166 <_svfprintf_r+0xede>
    3162:	3408      	adds	r4, #8
    3164:	e007      	b.n	3176 <_svfprintf_r+0xeee>
    3166:	980d      	ldr	r0, [sp, #52]	; 0x34
    3168:	990c      	ldr	r1, [sp, #48]	; 0x30
    316a:	aa27      	add	r2, sp, #156	; 0x9c
    316c:	f001 fe8a 	bl	4e84 <__ssprint_r>
    3170:	2800      	cmp	r0, #0
    3172:	d127      	bne.n	31c4 <_svfprintf_r+0xf3c>
    3174:	ac34      	add	r4, sp, #208	; 0xd0
    3176:	3d10      	subs	r5, #16
    3178:	e7e5      	b.n	3146 <_svfprintf_r+0xebe>
    317a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    317c:	6065      	str	r5, [r4, #4]
    317e:	18ed      	adds	r5, r5, r3
    3180:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    3182:	9529      	str	r5, [sp, #164]	; 0xa4
    3184:	3301      	adds	r3, #1
    3186:	9328      	str	r3, [sp, #160]	; 0xa0
    3188:	2b07      	cmp	r3, #7
    318a:	ddcb      	ble.n	3124 <_svfprintf_r+0xe9c>
    318c:	980d      	ldr	r0, [sp, #52]	; 0x34
    318e:	990c      	ldr	r1, [sp, #48]	; 0x30
    3190:	aa27      	add	r2, sp, #156	; 0x9c
    3192:	f001 fe77 	bl	4e84 <__ssprint_r>
    3196:	2800      	cmp	r0, #0
    3198:	d0c4      	beq.n	3124 <_svfprintf_r+0xe9c>
    319a:	e013      	b.n	31c4 <_svfprintf_r+0xf3c>
    319c:	980d      	ldr	r0, [sp, #52]	; 0x34
    319e:	990c      	ldr	r1, [sp, #48]	; 0x30
    31a0:	aa27      	add	r2, sp, #156	; 0x9c
    31a2:	f001 fe6f 	bl	4e84 <__ssprint_r>
    31a6:	2800      	cmp	r0, #0
    31a8:	d10c      	bne.n	31c4 <_svfprintf_r+0xf3c>
    31aa:	2300      	movs	r3, #0
    31ac:	9328      	str	r3, [sp, #160]	; 0xa0
    31ae:	ac34      	add	r4, sp, #208	; 0xd0
    31b0:	f7ff f899 	bl	22e6 <_svfprintf_r+0x5e>
    31b4:	9d29      	ldr	r5, [sp, #164]	; 0xa4
    31b6:	2d00      	cmp	r5, #0
    31b8:	d004      	beq.n	31c4 <_svfprintf_r+0xf3c>
    31ba:	980d      	ldr	r0, [sp, #52]	; 0x34
    31bc:	990c      	ldr	r1, [sp, #48]	; 0x30
    31be:	aa27      	add	r2, sp, #156	; 0x9c
    31c0:	f001 fe60 	bl	4e84 <__ssprint_r>
    31c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    31c6:	9817      	ldr	r0, [sp, #92]	; 0x5c
    31c8:	89ab      	ldrh	r3, [r5, #12]
    31ca:	0659      	lsls	r1, r3, #25
    31cc:	d501      	bpl.n	31d2 <_svfprintf_r+0xf4a>
    31ce:	2001      	movs	r0, #1
    31d0:	4240      	negs	r0, r0
    31d2:	b045      	add	sp, #276	; 0x114
    31d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    31d6:	46c0      	nop			; (mov r8, r8)
	...
    31e0:	00007a7a 	.word	0x00007a7a
    31e4:	46c0      	nop			; (mov r8, r8)
    31e6:	46c0      	nop			; (mov r8, r8)

000031e8 <__register_exitproc>:
    31e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    31ea:	1c1e      	adds	r6, r3, #0
    31ec:	4b23      	ldr	r3, [pc, #140]	; (327c <__register_exitproc+0x94>)
    31ee:	1c05      	adds	r5, r0, #0
    31f0:	681b      	ldr	r3, [r3, #0]
    31f2:	9101      	str	r1, [sp, #4]
    31f4:	1c1c      	adds	r4, r3, #0
    31f6:	34fc      	adds	r4, #252	; 0xfc
    31f8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    31fa:	1c17      	adds	r7, r2, #0
    31fc:	2800      	cmp	r0, #0
    31fe:	d103      	bne.n	3208 <__register_exitproc+0x20>
    3200:	22a6      	movs	r2, #166	; 0xa6
    3202:	0052      	lsls	r2, r2, #1
    3204:	1898      	adds	r0, r3, r2
    3206:	64e0      	str	r0, [r4, #76]	; 0x4c
    3208:	6843      	ldr	r3, [r0, #4]
    320a:	2b1f      	cmp	r3, #31
    320c:	dd16      	ble.n	323c <__register_exitproc+0x54>
    320e:	4b1c      	ldr	r3, [pc, #112]	; (3280 <__register_exitproc+0x98>)
    3210:	2b00      	cmp	r3, #0
    3212:	d102      	bne.n	321a <__register_exitproc+0x32>
    3214:	2001      	movs	r0, #1
    3216:	4240      	negs	r0, r0
    3218:	e02e      	b.n	3278 <__register_exitproc+0x90>
    321a:	20c8      	movs	r0, #200	; 0xc8
    321c:	0040      	lsls	r0, r0, #1
    321e:	e000      	b.n	3222 <__register_exitproc+0x3a>
    3220:	bf00      	nop
    3222:	2800      	cmp	r0, #0
    3224:	d0f6      	beq.n	3214 <__register_exitproc+0x2c>
    3226:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    3228:	2300      	movs	r3, #0
    322a:	6002      	str	r2, [r0, #0]
    322c:	22c4      	movs	r2, #196	; 0xc4
    322e:	0052      	lsls	r2, r2, #1
    3230:	6043      	str	r3, [r0, #4]
    3232:	64e0      	str	r0, [r4, #76]	; 0x4c
    3234:	5083      	str	r3, [r0, r2]
    3236:	22c6      	movs	r2, #198	; 0xc6
    3238:	0052      	lsls	r2, r2, #1
    323a:	5083      	str	r3, [r0, r2]
    323c:	6843      	ldr	r3, [r0, #4]
    323e:	2d00      	cmp	r5, #0
    3240:	d013      	beq.n	326a <__register_exitproc+0x82>
    3242:	009c      	lsls	r4, r3, #2
    3244:	1904      	adds	r4, r0, r4
    3246:	1c22      	adds	r2, r4, #0
    3248:	3288      	adds	r2, #136	; 0x88
    324a:	6017      	str	r7, [r2, #0]
    324c:	27c2      	movs	r7, #194	; 0xc2
    324e:	007f      	lsls	r7, r7, #1
    3250:	19c2      	adds	r2, r0, r7
    3252:	6857      	ldr	r7, [r2, #4]
    3254:	2101      	movs	r1, #1
    3256:	4099      	lsls	r1, r3
    3258:	430f      	orrs	r7, r1
    325a:	34fc      	adds	r4, #252	; 0xfc
    325c:	6057      	str	r7, [r2, #4]
    325e:	60e6      	str	r6, [r4, #12]
    3260:	2d02      	cmp	r5, #2
    3262:	d102      	bne.n	326a <__register_exitproc+0x82>
    3264:	6894      	ldr	r4, [r2, #8]
    3266:	4321      	orrs	r1, r4
    3268:	6091      	str	r1, [r2, #8]
    326a:	1c5a      	adds	r2, r3, #1
    326c:	9f01      	ldr	r7, [sp, #4]
    326e:	3302      	adds	r3, #2
    3270:	009b      	lsls	r3, r3, #2
    3272:	6042      	str	r2, [r0, #4]
    3274:	501f      	str	r7, [r3, r0]
    3276:	2000      	movs	r0, #0
    3278:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    327a:	46c0      	nop			; (mov r8, r8)
    327c:	00007a74 	.word	0x00007a74
    3280:	00000000 	.word	0x00000000

00003284 <register_fini>:
    3284:	b508      	push	{r3, lr}
    3286:	4b03      	ldr	r3, [pc, #12]	; (3294 <register_fini+0x10>)
    3288:	2b00      	cmp	r3, #0
    328a:	d002      	beq.n	3292 <register_fini+0xe>
    328c:	4802      	ldr	r0, [pc, #8]	; (3298 <register_fini+0x14>)
    328e:	f7fe ff63 	bl	2158 <atexit>
    3292:	bd08      	pop	{r3, pc}
    3294:	00000000 	.word	0x00000000
    3298:	00002169 	.word	0x00002169
    329c:	00000000 	.word	0x00000000

000032a0 <quorem>:
    32a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    32a2:	b089      	sub	sp, #36	; 0x24
    32a4:	9106      	str	r1, [sp, #24]
    32a6:	690b      	ldr	r3, [r1, #16]
    32a8:	6901      	ldr	r1, [r0, #16]
    32aa:	1c05      	adds	r5, r0, #0
    32ac:	2600      	movs	r6, #0
    32ae:	4299      	cmp	r1, r3
    32b0:	db7f      	blt.n	33b2 <quorem+0x112>
    32b2:	9c06      	ldr	r4, [sp, #24]
    32b4:	1e5f      	subs	r7, r3, #1
    32b6:	3414      	adds	r4, #20
    32b8:	9404      	str	r4, [sp, #16]
    32ba:	9904      	ldr	r1, [sp, #16]
    32bc:	00bc      	lsls	r4, r7, #2
    32be:	1909      	adds	r1, r1, r4
    32c0:	1c02      	adds	r2, r0, #0
    32c2:	680b      	ldr	r3, [r1, #0]
    32c4:	3214      	adds	r2, #20
    32c6:	9105      	str	r1, [sp, #20]
    32c8:	1914      	adds	r4, r2, r4
    32ca:	1c19      	adds	r1, r3, #0
    32cc:	3101      	adds	r1, #1
    32ce:	6820      	ldr	r0, [r4, #0]
    32d0:	9203      	str	r2, [sp, #12]
    32d2:	f7fe fac3 	bl	185c <__aeabi_uidiv>
    32d6:	9002      	str	r0, [sp, #8]
    32d8:	42b0      	cmp	r0, r6
    32da:	d038      	beq.n	334e <quorem+0xae>
    32dc:	9904      	ldr	r1, [sp, #16]
    32de:	9b03      	ldr	r3, [sp, #12]
    32e0:	468c      	mov	ip, r1
    32e2:	9601      	str	r6, [sp, #4]
    32e4:	9607      	str	r6, [sp, #28]
    32e6:	4662      	mov	r2, ip
    32e8:	3204      	adds	r2, #4
    32ea:	4694      	mov	ip, r2
    32ec:	3a04      	subs	r2, #4
    32ee:	ca40      	ldmia	r2!, {r6}
    32f0:	9902      	ldr	r1, [sp, #8]
    32f2:	b2b0      	uxth	r0, r6
    32f4:	4348      	muls	r0, r1
    32f6:	0c31      	lsrs	r1, r6, #16
    32f8:	9e02      	ldr	r6, [sp, #8]
    32fa:	9a01      	ldr	r2, [sp, #4]
    32fc:	4371      	muls	r1, r6
    32fe:	1810      	adds	r0, r2, r0
    3300:	0c02      	lsrs	r2, r0, #16
    3302:	1851      	adds	r1, r2, r1
    3304:	0c0a      	lsrs	r2, r1, #16
    3306:	9201      	str	r2, [sp, #4]
    3308:	681a      	ldr	r2, [r3, #0]
    330a:	b280      	uxth	r0, r0
    330c:	b296      	uxth	r6, r2
    330e:	9a07      	ldr	r2, [sp, #28]
    3310:	b289      	uxth	r1, r1
    3312:	18b6      	adds	r6, r6, r2
    3314:	1a30      	subs	r0, r6, r0
    3316:	681e      	ldr	r6, [r3, #0]
    3318:	0c32      	lsrs	r2, r6, #16
    331a:	1a52      	subs	r2, r2, r1
    331c:	1406      	asrs	r6, r0, #16
    331e:	1992      	adds	r2, r2, r6
    3320:	1411      	asrs	r1, r2, #16
    3322:	b280      	uxth	r0, r0
    3324:	0412      	lsls	r2, r2, #16
    3326:	9e05      	ldr	r6, [sp, #20]
    3328:	4310      	orrs	r0, r2
    332a:	9107      	str	r1, [sp, #28]
    332c:	c301      	stmia	r3!, {r0}
    332e:	4566      	cmp	r6, ip
    3330:	d2d9      	bcs.n	32e6 <quorem+0x46>
    3332:	6821      	ldr	r1, [r4, #0]
    3334:	2900      	cmp	r1, #0
    3336:	d10a      	bne.n	334e <quorem+0xae>
    3338:	9e03      	ldr	r6, [sp, #12]
    333a:	3c04      	subs	r4, #4
    333c:	42b4      	cmp	r4, r6
    333e:	d801      	bhi.n	3344 <quorem+0xa4>
    3340:	612f      	str	r7, [r5, #16]
    3342:	e004      	b.n	334e <quorem+0xae>
    3344:	6821      	ldr	r1, [r4, #0]
    3346:	2900      	cmp	r1, #0
    3348:	d1fa      	bne.n	3340 <quorem+0xa0>
    334a:	3f01      	subs	r7, #1
    334c:	e7f4      	b.n	3338 <quorem+0x98>
    334e:	1c28      	adds	r0, r5, #0
    3350:	9906      	ldr	r1, [sp, #24]
    3352:	f001 fb81 	bl	4a58 <__mcmp>
    3356:	2800      	cmp	r0, #0
    3358:	db2a      	blt.n	33b0 <quorem+0x110>
    335a:	9c02      	ldr	r4, [sp, #8]
    335c:	9a03      	ldr	r2, [sp, #12]
    335e:	3401      	adds	r4, #1
    3360:	9b04      	ldr	r3, [sp, #16]
    3362:	9402      	str	r4, [sp, #8]
    3364:	2400      	movs	r4, #0
    3366:	6811      	ldr	r1, [r2, #0]
    3368:	cb40      	ldmia	r3!, {r6}
    336a:	b288      	uxth	r0, r1
    336c:	1900      	adds	r0, r0, r4
    336e:	6814      	ldr	r4, [r2, #0]
    3370:	b2b1      	uxth	r1, r6
    3372:	1a40      	subs	r0, r0, r1
    3374:	0c36      	lsrs	r6, r6, #16
    3376:	0c21      	lsrs	r1, r4, #16
    3378:	1b89      	subs	r1, r1, r6
    337a:	1404      	asrs	r4, r0, #16
    337c:	1909      	adds	r1, r1, r4
    337e:	140c      	asrs	r4, r1, #16
    3380:	b280      	uxth	r0, r0
    3382:	0409      	lsls	r1, r1, #16
    3384:	9e05      	ldr	r6, [sp, #20]
    3386:	4301      	orrs	r1, r0
    3388:	c202      	stmia	r2!, {r1}
    338a:	429e      	cmp	r6, r3
    338c:	d2eb      	bcs.n	3366 <quorem+0xc6>
    338e:	9c03      	ldr	r4, [sp, #12]
    3390:	00bb      	lsls	r3, r7, #2
    3392:	18e3      	adds	r3, r4, r3
    3394:	681e      	ldr	r6, [r3, #0]
    3396:	2e00      	cmp	r6, #0
    3398:	d10a      	bne.n	33b0 <quorem+0x110>
    339a:	9c03      	ldr	r4, [sp, #12]
    339c:	3b04      	subs	r3, #4
    339e:	42a3      	cmp	r3, r4
    33a0:	d801      	bhi.n	33a6 <quorem+0x106>
    33a2:	612f      	str	r7, [r5, #16]
    33a4:	e004      	b.n	33b0 <quorem+0x110>
    33a6:	681e      	ldr	r6, [r3, #0]
    33a8:	2e00      	cmp	r6, #0
    33aa:	d1fa      	bne.n	33a2 <quorem+0x102>
    33ac:	3f01      	subs	r7, #1
    33ae:	e7f4      	b.n	339a <quorem+0xfa>
    33b0:	9e02      	ldr	r6, [sp, #8]
    33b2:	1c30      	adds	r0, r6, #0
    33b4:	b009      	add	sp, #36	; 0x24
    33b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000033b8 <_dtoa_r>:
    33b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    33ba:	6c01      	ldr	r1, [r0, #64]	; 0x40
    33bc:	b09b      	sub	sp, #108	; 0x6c
    33be:	9007      	str	r0, [sp, #28]
    33c0:	9d23      	ldr	r5, [sp, #140]	; 0x8c
    33c2:	9204      	str	r2, [sp, #16]
    33c4:	9305      	str	r3, [sp, #20]
    33c6:	2900      	cmp	r1, #0
    33c8:	d009      	beq.n	33de <_dtoa_r+0x26>
    33ca:	6c43      	ldr	r3, [r0, #68]	; 0x44
    33cc:	2201      	movs	r2, #1
    33ce:	409a      	lsls	r2, r3
    33d0:	604b      	str	r3, [r1, #4]
    33d2:	608a      	str	r2, [r1, #8]
    33d4:	f001 f944 	bl	4660 <_Bfree>
    33d8:	9c07      	ldr	r4, [sp, #28]
    33da:	2300      	movs	r3, #0
    33dc:	6423      	str	r3, [r4, #64]	; 0x40
    33de:	9805      	ldr	r0, [sp, #20]
    33e0:	2800      	cmp	r0, #0
    33e2:	da05      	bge.n	33f0 <_dtoa_r+0x38>
    33e4:	2301      	movs	r3, #1
    33e6:	602b      	str	r3, [r5, #0]
    33e8:	0043      	lsls	r3, r0, #1
    33ea:	085b      	lsrs	r3, r3, #1
    33ec:	9305      	str	r3, [sp, #20]
    33ee:	e001      	b.n	33f4 <_dtoa_r+0x3c>
    33f0:	2300      	movs	r3, #0
    33f2:	602b      	str	r3, [r5, #0]
    33f4:	9e05      	ldr	r6, [sp, #20]
    33f6:	4bbe      	ldr	r3, [pc, #760]	; (36f0 <_dtoa_r+0x338>)
    33f8:	1c32      	adds	r2, r6, #0
    33fa:	401a      	ands	r2, r3
    33fc:	429a      	cmp	r2, r3
    33fe:	d118      	bne.n	3432 <_dtoa_r+0x7a>
    3400:	4bbc      	ldr	r3, [pc, #752]	; (36f4 <_dtoa_r+0x33c>)
    3402:	9c22      	ldr	r4, [sp, #136]	; 0x88
    3404:	9d04      	ldr	r5, [sp, #16]
    3406:	6023      	str	r3, [r4, #0]
    3408:	2d00      	cmp	r5, #0
    340a:	d101      	bne.n	3410 <_dtoa_r+0x58>
    340c:	0336      	lsls	r6, r6, #12
    340e:	d001      	beq.n	3414 <_dtoa_r+0x5c>
    3410:	48b9      	ldr	r0, [pc, #740]	; (36f8 <_dtoa_r+0x340>)
    3412:	e000      	b.n	3416 <_dtoa_r+0x5e>
    3414:	48b9      	ldr	r0, [pc, #740]	; (36fc <_dtoa_r+0x344>)
    3416:	9c24      	ldr	r4, [sp, #144]	; 0x90
    3418:	2c00      	cmp	r4, #0
    341a:	d101      	bne.n	3420 <_dtoa_r+0x68>
    341c:	f000 fd92 	bl	3f44 <_dtoa_r+0xb8c>
    3420:	78c2      	ldrb	r2, [r0, #3]
    3422:	1cc3      	adds	r3, r0, #3
    3424:	2a00      	cmp	r2, #0
    3426:	d000      	beq.n	342a <_dtoa_r+0x72>
    3428:	3305      	adds	r3, #5
    342a:	9d24      	ldr	r5, [sp, #144]	; 0x90
    342c:	602b      	str	r3, [r5, #0]
    342e:	f000 fd89 	bl	3f44 <_dtoa_r+0xb8c>
    3432:	9c04      	ldr	r4, [sp, #16]
    3434:	9d05      	ldr	r5, [sp, #20]
    3436:	4ba5      	ldr	r3, [pc, #660]	; (36cc <_dtoa_r+0x314>)
    3438:	4aa3      	ldr	r2, [pc, #652]	; (36c8 <_dtoa_r+0x310>)
    343a:	1c20      	adds	r0, r4, #0
    343c:	1c29      	adds	r1, r5, #0
    343e:	f002 fc05 	bl	5c4c <__aeabi_dcmpeq>
    3442:	1e07      	subs	r7, r0, #0
    3444:	d00c      	beq.n	3460 <_dtoa_r+0xa8>
    3446:	9c22      	ldr	r4, [sp, #136]	; 0x88
    3448:	9d24      	ldr	r5, [sp, #144]	; 0x90
    344a:	2301      	movs	r3, #1
    344c:	6023      	str	r3, [r4, #0]
    344e:	2d00      	cmp	r5, #0
    3450:	d101      	bne.n	3456 <_dtoa_r+0x9e>
    3452:	f000 fd74 	bl	3f3e <_dtoa_r+0xb86>
    3456:	48aa      	ldr	r0, [pc, #680]	; (3700 <_dtoa_r+0x348>)
    3458:	6028      	str	r0, [r5, #0]
    345a:	3801      	subs	r0, #1
    345c:	f000 fd72 	bl	3f44 <_dtoa_r+0xb8c>
    3460:	ab19      	add	r3, sp, #100	; 0x64
    3462:	9300      	str	r3, [sp, #0]
    3464:	ab18      	add	r3, sp, #96	; 0x60
    3466:	9301      	str	r3, [sp, #4]
    3468:	9807      	ldr	r0, [sp, #28]
    346a:	1c2b      	adds	r3, r5, #0
    346c:	1c22      	adds	r2, r4, #0
    346e:	f001 fbe7 	bl	4c40 <__d2b>
    3472:	0073      	lsls	r3, r6, #1
    3474:	900a      	str	r0, [sp, #40]	; 0x28
    3476:	0d5b      	lsrs	r3, r3, #21
    3478:	d009      	beq.n	348e <_dtoa_r+0xd6>
    347a:	1c20      	adds	r0, r4, #0
    347c:	4ca1      	ldr	r4, [pc, #644]	; (3704 <_dtoa_r+0x34c>)
    347e:	032a      	lsls	r2, r5, #12
    3480:	0b12      	lsrs	r2, r2, #12
    3482:	1c21      	adds	r1, r4, #0
    3484:	4311      	orrs	r1, r2
    3486:	4aa0      	ldr	r2, [pc, #640]	; (3708 <_dtoa_r+0x350>)
    3488:	9716      	str	r7, [sp, #88]	; 0x58
    348a:	189e      	adds	r6, r3, r2
    348c:	e01b      	b.n	34c6 <_dtoa_r+0x10e>
    348e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    3490:	9c19      	ldr	r4, [sp, #100]	; 0x64
    3492:	191d      	adds	r5, r3, r4
    3494:	4b9d      	ldr	r3, [pc, #628]	; (370c <_dtoa_r+0x354>)
    3496:	429d      	cmp	r5, r3
    3498:	db09      	blt.n	34ae <_dtoa_r+0xf6>
    349a:	499d      	ldr	r1, [pc, #628]	; (3710 <_dtoa_r+0x358>)
    349c:	9a04      	ldr	r2, [sp, #16]
    349e:	4b9d      	ldr	r3, [pc, #628]	; (3714 <_dtoa_r+0x35c>)
    34a0:	1868      	adds	r0, r5, r1
    34a2:	40c2      	lsrs	r2, r0
    34a4:	1b5b      	subs	r3, r3, r5
    34a6:	1c10      	adds	r0, r2, #0
    34a8:	409e      	lsls	r6, r3
    34aa:	4330      	orrs	r0, r6
    34ac:	e004      	b.n	34b8 <_dtoa_r+0x100>
    34ae:	489a      	ldr	r0, [pc, #616]	; (3718 <_dtoa_r+0x360>)
    34b0:	9b04      	ldr	r3, [sp, #16]
    34b2:	1b40      	subs	r0, r0, r5
    34b4:	4083      	lsls	r3, r0
    34b6:	1c18      	adds	r0, r3, #0
    34b8:	f004 f9c4 	bl	7844 <__aeabi_ui2d>
    34bc:	4c97      	ldr	r4, [pc, #604]	; (371c <_dtoa_r+0x364>)
    34be:	1e6e      	subs	r6, r5, #1
    34c0:	2501      	movs	r5, #1
    34c2:	1909      	adds	r1, r1, r4
    34c4:	9516      	str	r5, [sp, #88]	; 0x58
    34c6:	4a82      	ldr	r2, [pc, #520]	; (36d0 <_dtoa_r+0x318>)
    34c8:	4b82      	ldr	r3, [pc, #520]	; (36d4 <_dtoa_r+0x31c>)
    34ca:	f003 fe13 	bl	70f4 <__aeabi_dsub>
    34ce:	4a82      	ldr	r2, [pc, #520]	; (36d8 <_dtoa_r+0x320>)
    34d0:	4b82      	ldr	r3, [pc, #520]	; (36dc <_dtoa_r+0x324>)
    34d2:	f003 fb7d 	bl	6bd0 <__aeabi_dmul>
    34d6:	4a82      	ldr	r2, [pc, #520]	; (36e0 <_dtoa_r+0x328>)
    34d8:	4b82      	ldr	r3, [pc, #520]	; (36e4 <_dtoa_r+0x32c>)
    34da:	f002 fbe5 	bl	5ca8 <__aeabi_dadd>
    34de:	1c04      	adds	r4, r0, #0
    34e0:	1c30      	adds	r0, r6, #0
    34e2:	1c0d      	adds	r5, r1, #0
    34e4:	f004 f970 	bl	77c8 <__aeabi_i2d>
    34e8:	4a7f      	ldr	r2, [pc, #508]	; (36e8 <_dtoa_r+0x330>)
    34ea:	4b80      	ldr	r3, [pc, #512]	; (36ec <_dtoa_r+0x334>)
    34ec:	f003 fb70 	bl	6bd0 <__aeabi_dmul>
    34f0:	1c02      	adds	r2, r0, #0
    34f2:	1c0b      	adds	r3, r1, #0
    34f4:	1c20      	adds	r0, r4, #0
    34f6:	1c29      	adds	r1, r5, #0
    34f8:	f002 fbd6 	bl	5ca8 <__aeabi_dadd>
    34fc:	1c04      	adds	r4, r0, #0
    34fe:	1c0d      	adds	r5, r1, #0
    3500:	f004 f92e 	bl	7760 <__aeabi_d2iz>
    3504:	4b71      	ldr	r3, [pc, #452]	; (36cc <_dtoa_r+0x314>)
    3506:	4a70      	ldr	r2, [pc, #448]	; (36c8 <_dtoa_r+0x310>)
    3508:	9006      	str	r0, [sp, #24]
    350a:	1c29      	adds	r1, r5, #0
    350c:	1c20      	adds	r0, r4, #0
    350e:	f002 fba3 	bl	5c58 <__aeabi_dcmplt>
    3512:	2800      	cmp	r0, #0
    3514:	d00d      	beq.n	3532 <_dtoa_r+0x17a>
    3516:	9806      	ldr	r0, [sp, #24]
    3518:	f004 f956 	bl	77c8 <__aeabi_i2d>
    351c:	1c0b      	adds	r3, r1, #0
    351e:	1c02      	adds	r2, r0, #0
    3520:	1c29      	adds	r1, r5, #0
    3522:	1c20      	adds	r0, r4, #0
    3524:	f002 fb92 	bl	5c4c <__aeabi_dcmpeq>
    3528:	9c06      	ldr	r4, [sp, #24]
    352a:	4243      	negs	r3, r0
    352c:	4143      	adcs	r3, r0
    352e:	1ae4      	subs	r4, r4, r3
    3530:	9406      	str	r4, [sp, #24]
    3532:	9c06      	ldr	r4, [sp, #24]
    3534:	2501      	movs	r5, #1
    3536:	9513      	str	r5, [sp, #76]	; 0x4c
    3538:	2c16      	cmp	r4, #22
    353a:	d810      	bhi.n	355e <_dtoa_r+0x1a6>
    353c:	4a78      	ldr	r2, [pc, #480]	; (3720 <_dtoa_r+0x368>)
    353e:	00e3      	lsls	r3, r4, #3
    3540:	18d3      	adds	r3, r2, r3
    3542:	6818      	ldr	r0, [r3, #0]
    3544:	6859      	ldr	r1, [r3, #4]
    3546:	9a04      	ldr	r2, [sp, #16]
    3548:	9b05      	ldr	r3, [sp, #20]
    354a:	f002 fb99 	bl	5c80 <__aeabi_dcmpgt>
    354e:	2800      	cmp	r0, #0
    3550:	d004      	beq.n	355c <_dtoa_r+0x1a4>
    3552:	3c01      	subs	r4, #1
    3554:	2500      	movs	r5, #0
    3556:	9406      	str	r4, [sp, #24]
    3558:	9513      	str	r5, [sp, #76]	; 0x4c
    355a:	e000      	b.n	355e <_dtoa_r+0x1a6>
    355c:	9013      	str	r0, [sp, #76]	; 0x4c
    355e:	9818      	ldr	r0, [sp, #96]	; 0x60
    3560:	2400      	movs	r4, #0
    3562:	1b86      	subs	r6, r0, r6
    3564:	1c35      	adds	r5, r6, #0
    3566:	9402      	str	r4, [sp, #8]
    3568:	3d01      	subs	r5, #1
    356a:	9509      	str	r5, [sp, #36]	; 0x24
    356c:	d504      	bpl.n	3578 <_dtoa_r+0x1c0>
    356e:	9c09      	ldr	r4, [sp, #36]	; 0x24
    3570:	2500      	movs	r5, #0
    3572:	4264      	negs	r4, r4
    3574:	9402      	str	r4, [sp, #8]
    3576:	9509      	str	r5, [sp, #36]	; 0x24
    3578:	9c06      	ldr	r4, [sp, #24]
    357a:	2c00      	cmp	r4, #0
    357c:	db06      	blt.n	358c <_dtoa_r+0x1d4>
    357e:	9d09      	ldr	r5, [sp, #36]	; 0x24
    3580:	9412      	str	r4, [sp, #72]	; 0x48
    3582:	192d      	adds	r5, r5, r4
    3584:	2400      	movs	r4, #0
    3586:	9509      	str	r5, [sp, #36]	; 0x24
    3588:	940d      	str	r4, [sp, #52]	; 0x34
    358a:	e007      	b.n	359c <_dtoa_r+0x1e4>
    358c:	9c06      	ldr	r4, [sp, #24]
    358e:	9d02      	ldr	r5, [sp, #8]
    3590:	1b2d      	subs	r5, r5, r4
    3592:	9502      	str	r5, [sp, #8]
    3594:	4265      	negs	r5, r4
    3596:	2400      	movs	r4, #0
    3598:	950d      	str	r5, [sp, #52]	; 0x34
    359a:	9412      	str	r4, [sp, #72]	; 0x48
    359c:	9d20      	ldr	r5, [sp, #128]	; 0x80
    359e:	2401      	movs	r4, #1
    35a0:	2d09      	cmp	r5, #9
    35a2:	d824      	bhi.n	35ee <_dtoa_r+0x236>
    35a4:	2d05      	cmp	r5, #5
    35a6:	dd02      	ble.n	35ae <_dtoa_r+0x1f6>
    35a8:	3d04      	subs	r5, #4
    35aa:	9520      	str	r5, [sp, #128]	; 0x80
    35ac:	2400      	movs	r4, #0
    35ae:	9820      	ldr	r0, [sp, #128]	; 0x80
    35b0:	3802      	subs	r0, #2
    35b2:	2803      	cmp	r0, #3
    35b4:	d823      	bhi.n	35fe <_dtoa_r+0x246>
    35b6:	f002 fac5 	bl	5b44 <__gnu_thumb1_case_uqi>
    35ba:	0e06      	.short	0x0e06
    35bc:	0402      	.short	0x0402
    35be:	2501      	movs	r5, #1
    35c0:	e002      	b.n	35c8 <_dtoa_r+0x210>
    35c2:	2501      	movs	r5, #1
    35c4:	e008      	b.n	35d8 <_dtoa_r+0x220>
    35c6:	2500      	movs	r5, #0
    35c8:	9510      	str	r5, [sp, #64]	; 0x40
    35ca:	9d21      	ldr	r5, [sp, #132]	; 0x84
    35cc:	2d00      	cmp	r5, #0
    35ce:	dd1f      	ble.n	3610 <_dtoa_r+0x258>
    35d0:	950c      	str	r5, [sp, #48]	; 0x30
    35d2:	9508      	str	r5, [sp, #32]
    35d4:	e009      	b.n	35ea <_dtoa_r+0x232>
    35d6:	2500      	movs	r5, #0
    35d8:	9510      	str	r5, [sp, #64]	; 0x40
    35da:	9806      	ldr	r0, [sp, #24]
    35dc:	9d21      	ldr	r5, [sp, #132]	; 0x84
    35de:	182d      	adds	r5, r5, r0
    35e0:	950c      	str	r5, [sp, #48]	; 0x30
    35e2:	3501      	adds	r5, #1
    35e4:	9508      	str	r5, [sp, #32]
    35e6:	2d00      	cmp	r5, #0
    35e8:	dd18      	ble.n	361c <_dtoa_r+0x264>
    35ea:	1c2b      	adds	r3, r5, #0
    35ec:	e017      	b.n	361e <_dtoa_r+0x266>
    35ee:	4263      	negs	r3, r4
    35f0:	2500      	movs	r5, #0
    35f2:	930c      	str	r3, [sp, #48]	; 0x30
    35f4:	9308      	str	r3, [sp, #32]
    35f6:	9520      	str	r5, [sp, #128]	; 0x80
    35f8:	9410      	str	r4, [sp, #64]	; 0x40
    35fa:	2312      	movs	r3, #18
    35fc:	e006      	b.n	360c <_dtoa_r+0x254>
    35fe:	2501      	movs	r5, #1
    3600:	426b      	negs	r3, r5
    3602:	9510      	str	r5, [sp, #64]	; 0x40
    3604:	930c      	str	r3, [sp, #48]	; 0x30
    3606:	9308      	str	r3, [sp, #32]
    3608:	2500      	movs	r5, #0
    360a:	2312      	movs	r3, #18
    360c:	9521      	str	r5, [sp, #132]	; 0x84
    360e:	e006      	b.n	361e <_dtoa_r+0x266>
    3610:	2501      	movs	r5, #1
    3612:	950c      	str	r5, [sp, #48]	; 0x30
    3614:	9508      	str	r5, [sp, #32]
    3616:	1c2b      	adds	r3, r5, #0
    3618:	9521      	str	r5, [sp, #132]	; 0x84
    361a:	e000      	b.n	361e <_dtoa_r+0x266>
    361c:	2301      	movs	r3, #1
    361e:	9d07      	ldr	r5, [sp, #28]
    3620:	2200      	movs	r2, #0
    3622:	646a      	str	r2, [r5, #68]	; 0x44
    3624:	2204      	movs	r2, #4
    3626:	9d07      	ldr	r5, [sp, #28]
    3628:	1c10      	adds	r0, r2, #0
    362a:	3014      	adds	r0, #20
    362c:	6c69      	ldr	r1, [r5, #68]	; 0x44
    362e:	4298      	cmp	r0, r3
    3630:	d804      	bhi.n	363c <_dtoa_r+0x284>
    3632:	9d07      	ldr	r5, [sp, #28]
    3634:	3101      	adds	r1, #1
    3636:	6469      	str	r1, [r5, #68]	; 0x44
    3638:	0052      	lsls	r2, r2, #1
    363a:	e7f4      	b.n	3626 <_dtoa_r+0x26e>
    363c:	1c28      	adds	r0, r5, #0
    363e:	f000 ffe7 	bl	4610 <_Balloc>
    3642:	6428      	str	r0, [r5, #64]	; 0x40
    3644:	9d08      	ldr	r5, [sp, #32]
    3646:	900b      	str	r0, [sp, #44]	; 0x2c
    3648:	2d0e      	cmp	r5, #14
    364a:	d900      	bls.n	364e <_dtoa_r+0x296>
    364c:	e188      	b.n	3960 <_dtoa_r+0x5a8>
    364e:	2c00      	cmp	r4, #0
    3650:	d100      	bne.n	3654 <_dtoa_r+0x29c>
    3652:	e185      	b.n	3960 <_dtoa_r+0x5a8>
    3654:	9c04      	ldr	r4, [sp, #16]
    3656:	9d05      	ldr	r5, [sp, #20]
    3658:	9414      	str	r4, [sp, #80]	; 0x50
    365a:	9515      	str	r5, [sp, #84]	; 0x54
    365c:	9d06      	ldr	r5, [sp, #24]
    365e:	2d00      	cmp	r5, #0
    3660:	dd62      	ble.n	3728 <_dtoa_r+0x370>
    3662:	1c2a      	adds	r2, r5, #0
    3664:	230f      	movs	r3, #15
    3666:	401a      	ands	r2, r3
    3668:	492d      	ldr	r1, [pc, #180]	; (3720 <_dtoa_r+0x368>)
    366a:	00d2      	lsls	r2, r2, #3
    366c:	188a      	adds	r2, r1, r2
    366e:	6814      	ldr	r4, [r2, #0]
    3670:	6855      	ldr	r5, [r2, #4]
    3672:	940e      	str	r4, [sp, #56]	; 0x38
    3674:	950f      	str	r5, [sp, #60]	; 0x3c
    3676:	9d06      	ldr	r5, [sp, #24]
    3678:	4c2a      	ldr	r4, [pc, #168]	; (3724 <_dtoa_r+0x36c>)
    367a:	112f      	asrs	r7, r5, #4
    367c:	2502      	movs	r5, #2
    367e:	06f8      	lsls	r0, r7, #27
    3680:	d517      	bpl.n	36b2 <_dtoa_r+0x2fa>
    3682:	401f      	ands	r7, r3
    3684:	9814      	ldr	r0, [sp, #80]	; 0x50
    3686:	9915      	ldr	r1, [sp, #84]	; 0x54
    3688:	6a22      	ldr	r2, [r4, #32]
    368a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    368c:	f002 fe30 	bl	62f0 <__aeabi_ddiv>
    3690:	2503      	movs	r5, #3
    3692:	9004      	str	r0, [sp, #16]
    3694:	9105      	str	r1, [sp, #20]
    3696:	e00c      	b.n	36b2 <_dtoa_r+0x2fa>
    3698:	07f9      	lsls	r1, r7, #31
    369a:	d508      	bpl.n	36ae <_dtoa_r+0x2f6>
    369c:	980e      	ldr	r0, [sp, #56]	; 0x38
    369e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    36a0:	6822      	ldr	r2, [r4, #0]
    36a2:	6863      	ldr	r3, [r4, #4]
    36a4:	f003 fa94 	bl	6bd0 <__aeabi_dmul>
    36a8:	900e      	str	r0, [sp, #56]	; 0x38
    36aa:	910f      	str	r1, [sp, #60]	; 0x3c
    36ac:	3501      	adds	r5, #1
    36ae:	107f      	asrs	r7, r7, #1
    36b0:	3408      	adds	r4, #8
    36b2:	2f00      	cmp	r7, #0
    36b4:	d1f0      	bne.n	3698 <_dtoa_r+0x2e0>
    36b6:	9804      	ldr	r0, [sp, #16]
    36b8:	9905      	ldr	r1, [sp, #20]
    36ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    36bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    36be:	f002 fe17 	bl	62f0 <__aeabi_ddiv>
    36c2:	e04f      	b.n	3764 <_dtoa_r+0x3ac>
    36c4:	46c0      	nop			; (mov r8, r8)
    36c6:	46c0      	nop			; (mov r8, r8)
	...
    36d4:	3ff80000 	.word	0x3ff80000
    36d8:	636f4361 	.word	0x636f4361
    36dc:	3fd287a7 	.word	0x3fd287a7
    36e0:	8b60c8b3 	.word	0x8b60c8b3
    36e4:	3fc68a28 	.word	0x3fc68a28
    36e8:	509f79fb 	.word	0x509f79fb
    36ec:	3fd34413 	.word	0x3fd34413
    36f0:	7ff00000 	.word	0x7ff00000
    36f4:	0000270f 	.word	0x0000270f
    36f8:	00007ad7 	.word	0x00007ad7
    36fc:	00007ace 	.word	0x00007ace
    3700:	00007acd 	.word	0x00007acd
    3704:	3ff00000 	.word	0x3ff00000
    3708:	fffffc01 	.word	0xfffffc01
    370c:	fffffbef 	.word	0xfffffbef
    3710:	00000412 	.word	0x00000412
    3714:	fffffc0e 	.word	0xfffffc0e
    3718:	fffffbee 	.word	0xfffffbee
    371c:	fe100000 	.word	0xfe100000
    3720:	00007af8 	.word	0x00007af8
    3724:	00007be8 	.word	0x00007be8
    3728:	9c06      	ldr	r4, [sp, #24]
    372a:	2502      	movs	r5, #2
    372c:	4267      	negs	r7, r4
    372e:	2f00      	cmp	r7, #0
    3730:	d01a      	beq.n	3768 <_dtoa_r+0x3b0>
    3732:	230f      	movs	r3, #15
    3734:	403b      	ands	r3, r7
    3736:	4acc      	ldr	r2, [pc, #816]	; (3a68 <_dtoa_r+0x6b0>)
    3738:	00db      	lsls	r3, r3, #3
    373a:	18d3      	adds	r3, r2, r3
    373c:	9814      	ldr	r0, [sp, #80]	; 0x50
    373e:	9915      	ldr	r1, [sp, #84]	; 0x54
    3740:	681a      	ldr	r2, [r3, #0]
    3742:	685b      	ldr	r3, [r3, #4]
    3744:	f003 fa44 	bl	6bd0 <__aeabi_dmul>
    3748:	4ec8      	ldr	r6, [pc, #800]	; (3a6c <_dtoa_r+0x6b4>)
    374a:	113f      	asrs	r7, r7, #4
    374c:	2f00      	cmp	r7, #0
    374e:	d009      	beq.n	3764 <_dtoa_r+0x3ac>
    3750:	07fa      	lsls	r2, r7, #31
    3752:	d504      	bpl.n	375e <_dtoa_r+0x3a6>
    3754:	6832      	ldr	r2, [r6, #0]
    3756:	6873      	ldr	r3, [r6, #4]
    3758:	3501      	adds	r5, #1
    375a:	f003 fa39 	bl	6bd0 <__aeabi_dmul>
    375e:	107f      	asrs	r7, r7, #1
    3760:	3608      	adds	r6, #8
    3762:	e7f3      	b.n	374c <_dtoa_r+0x394>
    3764:	9004      	str	r0, [sp, #16]
    3766:	9105      	str	r1, [sp, #20]
    3768:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    376a:	2c00      	cmp	r4, #0
    376c:	d01e      	beq.n	37ac <_dtoa_r+0x3f4>
    376e:	9e04      	ldr	r6, [sp, #16]
    3770:	9f05      	ldr	r7, [sp, #20]
    3772:	4bb4      	ldr	r3, [pc, #720]	; (3a44 <_dtoa_r+0x68c>)
    3774:	4ab2      	ldr	r2, [pc, #712]	; (3a40 <_dtoa_r+0x688>)
    3776:	1c30      	adds	r0, r6, #0
    3778:	1c39      	adds	r1, r7, #0
    377a:	f002 fa6d 	bl	5c58 <__aeabi_dcmplt>
    377e:	2800      	cmp	r0, #0
    3780:	d014      	beq.n	37ac <_dtoa_r+0x3f4>
    3782:	9c08      	ldr	r4, [sp, #32]
    3784:	2c00      	cmp	r4, #0
    3786:	d011      	beq.n	37ac <_dtoa_r+0x3f4>
    3788:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    378a:	2c00      	cmp	r4, #0
    378c:	dc00      	bgt.n	3790 <_dtoa_r+0x3d8>
    378e:	e0e3      	b.n	3958 <_dtoa_r+0x5a0>
    3790:	9c06      	ldr	r4, [sp, #24]
    3792:	1c30      	adds	r0, r6, #0
    3794:	3c01      	subs	r4, #1
    3796:	1c39      	adds	r1, r7, #0
    3798:	4aab      	ldr	r2, [pc, #684]	; (3a48 <_dtoa_r+0x690>)
    379a:	4bac      	ldr	r3, [pc, #688]	; (3a4c <_dtoa_r+0x694>)
    379c:	9411      	str	r4, [sp, #68]	; 0x44
    379e:	f003 fa17 	bl	6bd0 <__aeabi_dmul>
    37a2:	3501      	adds	r5, #1
    37a4:	9004      	str	r0, [sp, #16]
    37a6:	9105      	str	r1, [sp, #20]
    37a8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    37aa:	e002      	b.n	37b2 <_dtoa_r+0x3fa>
    37ac:	9c06      	ldr	r4, [sp, #24]
    37ae:	9411      	str	r4, [sp, #68]	; 0x44
    37b0:	9c08      	ldr	r4, [sp, #32]
    37b2:	1c28      	adds	r0, r5, #0
    37b4:	9e04      	ldr	r6, [sp, #16]
    37b6:	9f05      	ldr	r7, [sp, #20]
    37b8:	940e      	str	r4, [sp, #56]	; 0x38
    37ba:	f004 f805 	bl	77c8 <__aeabi_i2d>
    37be:	1c32      	adds	r2, r6, #0
    37c0:	1c3b      	adds	r3, r7, #0
    37c2:	f003 fa05 	bl	6bd0 <__aeabi_dmul>
    37c6:	4aa2      	ldr	r2, [pc, #648]	; (3a50 <_dtoa_r+0x698>)
    37c8:	4ba2      	ldr	r3, [pc, #648]	; (3a54 <_dtoa_r+0x69c>)
    37ca:	f002 fa6d 	bl	5ca8 <__aeabi_dadd>
    37ce:	1c04      	adds	r4, r0, #0
    37d0:	48a7      	ldr	r0, [pc, #668]	; (3a70 <_dtoa_r+0x6b8>)
    37d2:	1808      	adds	r0, r1, r0
    37d4:	990e      	ldr	r1, [sp, #56]	; 0x38
    37d6:	9004      	str	r0, [sp, #16]
    37d8:	1c05      	adds	r5, r0, #0
    37da:	2900      	cmp	r1, #0
    37dc:	d11b      	bne.n	3816 <_dtoa_r+0x45e>
    37de:	4a9e      	ldr	r2, [pc, #632]	; (3a58 <_dtoa_r+0x6a0>)
    37e0:	4b9e      	ldr	r3, [pc, #632]	; (3a5c <_dtoa_r+0x6a4>)
    37e2:	1c30      	adds	r0, r6, #0
    37e4:	1c39      	adds	r1, r7, #0
    37e6:	f003 fc85 	bl	70f4 <__aeabi_dsub>
    37ea:	1c22      	adds	r2, r4, #0
    37ec:	9b04      	ldr	r3, [sp, #16]
    37ee:	1c06      	adds	r6, r0, #0
    37f0:	1c0f      	adds	r7, r1, #0
    37f2:	f002 fa45 	bl	5c80 <__aeabi_dcmpgt>
    37f6:	2800      	cmp	r0, #0
    37f8:	d000      	beq.n	37fc <_dtoa_r+0x444>
    37fa:	e25c      	b.n	3cb6 <_dtoa_r+0x8fe>
    37fc:	1c22      	adds	r2, r4, #0
    37fe:	2580      	movs	r5, #128	; 0x80
    3800:	9c04      	ldr	r4, [sp, #16]
    3802:	062d      	lsls	r5, r5, #24
    3804:	1c30      	adds	r0, r6, #0
    3806:	1c39      	adds	r1, r7, #0
    3808:	1963      	adds	r3, r4, r5
    380a:	f002 fa25 	bl	5c58 <__aeabi_dcmplt>
    380e:	2800      	cmp	r0, #0
    3810:	d000      	beq.n	3814 <_dtoa_r+0x45c>
    3812:	e247      	b.n	3ca4 <_dtoa_r+0x8ec>
    3814:	e0a0      	b.n	3958 <_dtoa_r+0x5a0>
    3816:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    3818:	4b93      	ldr	r3, [pc, #588]	; (3a68 <_dtoa_r+0x6b0>)
    381a:	3a01      	subs	r2, #1
    381c:	9810      	ldr	r0, [sp, #64]	; 0x40
    381e:	00d2      	lsls	r2, r2, #3
    3820:	189b      	adds	r3, r3, r2
    3822:	2800      	cmp	r0, #0
    3824:	d049      	beq.n	38ba <_dtoa_r+0x502>
    3826:	681a      	ldr	r2, [r3, #0]
    3828:	685b      	ldr	r3, [r3, #4]
    382a:	488d      	ldr	r0, [pc, #564]	; (3a60 <_dtoa_r+0x6a8>)
    382c:	498d      	ldr	r1, [pc, #564]	; (3a64 <_dtoa_r+0x6ac>)
    382e:	f002 fd5f 	bl	62f0 <__aeabi_ddiv>
    3832:	1c2b      	adds	r3, r5, #0
    3834:	1c22      	adds	r2, r4, #0
    3836:	f003 fc5d 	bl	70f4 <__aeabi_dsub>
    383a:	9004      	str	r0, [sp, #16]
    383c:	9105      	str	r1, [sp, #20]
    383e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    3840:	1c39      	adds	r1, r7, #0
    3842:	1c30      	adds	r0, r6, #0
    3844:	f003 ff8c 	bl	7760 <__aeabi_d2iz>
    3848:	1c04      	adds	r4, r0, #0
    384a:	f003 ffbd 	bl	77c8 <__aeabi_i2d>
    384e:	1c02      	adds	r2, r0, #0
    3850:	1c0b      	adds	r3, r1, #0
    3852:	1c30      	adds	r0, r6, #0
    3854:	1c39      	adds	r1, r7, #0
    3856:	f003 fc4d 	bl	70f4 <__aeabi_dsub>
    385a:	3501      	adds	r5, #1
    385c:	1e6b      	subs	r3, r5, #1
    385e:	3430      	adds	r4, #48	; 0x30
    3860:	701c      	strb	r4, [r3, #0]
    3862:	9a04      	ldr	r2, [sp, #16]
    3864:	9b05      	ldr	r3, [sp, #20]
    3866:	1c06      	adds	r6, r0, #0
    3868:	1c0f      	adds	r7, r1, #0
    386a:	f002 f9f5 	bl	5c58 <__aeabi_dcmplt>
    386e:	2800      	cmp	r0, #0
    3870:	d000      	beq.n	3874 <_dtoa_r+0x4bc>
    3872:	e353      	b.n	3f1c <_dtoa_r+0xb64>
    3874:	1c32      	adds	r2, r6, #0
    3876:	1c3b      	adds	r3, r7, #0
    3878:	4972      	ldr	r1, [pc, #456]	; (3a44 <_dtoa_r+0x68c>)
    387a:	4871      	ldr	r0, [pc, #452]	; (3a40 <_dtoa_r+0x688>)
    387c:	f003 fc3a 	bl	70f4 <__aeabi_dsub>
    3880:	9a04      	ldr	r2, [sp, #16]
    3882:	9b05      	ldr	r3, [sp, #20]
    3884:	f002 f9e8 	bl	5c58 <__aeabi_dcmplt>
    3888:	2800      	cmp	r0, #0
    388a:	d000      	beq.n	388e <_dtoa_r+0x4d6>
    388c:	e0cb      	b.n	3a26 <_dtoa_r+0x66e>
    388e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    3890:	1b2b      	subs	r3, r5, r4
    3892:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    3894:	42a3      	cmp	r3, r4
    3896:	da5f      	bge.n	3958 <_dtoa_r+0x5a0>
    3898:	9804      	ldr	r0, [sp, #16]
    389a:	9905      	ldr	r1, [sp, #20]
    389c:	4a6a      	ldr	r2, [pc, #424]	; (3a48 <_dtoa_r+0x690>)
    389e:	4b6b      	ldr	r3, [pc, #428]	; (3a4c <_dtoa_r+0x694>)
    38a0:	f003 f996 	bl	6bd0 <__aeabi_dmul>
    38a4:	4a68      	ldr	r2, [pc, #416]	; (3a48 <_dtoa_r+0x690>)
    38a6:	4b69      	ldr	r3, [pc, #420]	; (3a4c <_dtoa_r+0x694>)
    38a8:	9004      	str	r0, [sp, #16]
    38aa:	9105      	str	r1, [sp, #20]
    38ac:	1c30      	adds	r0, r6, #0
    38ae:	1c39      	adds	r1, r7, #0
    38b0:	f003 f98e 	bl	6bd0 <__aeabi_dmul>
    38b4:	1c06      	adds	r6, r0, #0
    38b6:	1c0f      	adds	r7, r1, #0
    38b8:	e7c2      	b.n	3840 <_dtoa_r+0x488>
    38ba:	6818      	ldr	r0, [r3, #0]
    38bc:	6859      	ldr	r1, [r3, #4]
    38be:	1c22      	adds	r2, r4, #0
    38c0:	1c2b      	adds	r3, r5, #0
    38c2:	f003 f985 	bl	6bd0 <__aeabi_dmul>
    38c6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    38c8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    38ca:	9004      	str	r0, [sp, #16]
    38cc:	9105      	str	r1, [sp, #20]
    38ce:	1965      	adds	r5, r4, r5
    38d0:	9517      	str	r5, [sp, #92]	; 0x5c
    38d2:	1c39      	adds	r1, r7, #0
    38d4:	1c30      	adds	r0, r6, #0
    38d6:	f003 ff43 	bl	7760 <__aeabi_d2iz>
    38da:	1c05      	adds	r5, r0, #0
    38dc:	f003 ff74 	bl	77c8 <__aeabi_i2d>
    38e0:	1c02      	adds	r2, r0, #0
    38e2:	1c0b      	adds	r3, r1, #0
    38e4:	1c30      	adds	r0, r6, #0
    38e6:	1c39      	adds	r1, r7, #0
    38e8:	f003 fc04 	bl	70f4 <__aeabi_dsub>
    38ec:	3530      	adds	r5, #48	; 0x30
    38ee:	7025      	strb	r5, [r4, #0]
    38f0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
    38f2:	3401      	adds	r4, #1
    38f4:	1c06      	adds	r6, r0, #0
    38f6:	1c0f      	adds	r7, r1, #0
    38f8:	42ac      	cmp	r4, r5
    38fa:	d126      	bne.n	394a <_dtoa_r+0x592>
    38fc:	980e      	ldr	r0, [sp, #56]	; 0x38
    38fe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    3900:	4a57      	ldr	r2, [pc, #348]	; (3a60 <_dtoa_r+0x6a8>)
    3902:	4b58      	ldr	r3, [pc, #352]	; (3a64 <_dtoa_r+0x6ac>)
    3904:	1825      	adds	r5, r4, r0
    3906:	9804      	ldr	r0, [sp, #16]
    3908:	9905      	ldr	r1, [sp, #20]
    390a:	f002 f9cd 	bl	5ca8 <__aeabi_dadd>
    390e:	1c02      	adds	r2, r0, #0
    3910:	1c0b      	adds	r3, r1, #0
    3912:	1c30      	adds	r0, r6, #0
    3914:	1c39      	adds	r1, r7, #0
    3916:	f002 f9b3 	bl	5c80 <__aeabi_dcmpgt>
    391a:	2800      	cmp	r0, #0
    391c:	d000      	beq.n	3920 <_dtoa_r+0x568>
    391e:	e082      	b.n	3a26 <_dtoa_r+0x66e>
    3920:	9a04      	ldr	r2, [sp, #16]
    3922:	9b05      	ldr	r3, [sp, #20]
    3924:	484e      	ldr	r0, [pc, #312]	; (3a60 <_dtoa_r+0x6a8>)
    3926:	494f      	ldr	r1, [pc, #316]	; (3a64 <_dtoa_r+0x6ac>)
    3928:	f003 fbe4 	bl	70f4 <__aeabi_dsub>
    392c:	1c02      	adds	r2, r0, #0
    392e:	1c0b      	adds	r3, r1, #0
    3930:	1c30      	adds	r0, r6, #0
    3932:	1c39      	adds	r1, r7, #0
    3934:	f002 f990 	bl	5c58 <__aeabi_dcmplt>
    3938:	2800      	cmp	r0, #0
    393a:	d00d      	beq.n	3958 <_dtoa_r+0x5a0>
    393c:	1e6b      	subs	r3, r5, #1
    393e:	781a      	ldrb	r2, [r3, #0]
    3940:	2a30      	cmp	r2, #48	; 0x30
    3942:	d000      	beq.n	3946 <_dtoa_r+0x58e>
    3944:	e2ea      	b.n	3f1c <_dtoa_r+0xb64>
    3946:	1c1d      	adds	r5, r3, #0
    3948:	e7f8      	b.n	393c <_dtoa_r+0x584>
    394a:	4a3f      	ldr	r2, [pc, #252]	; (3a48 <_dtoa_r+0x690>)
    394c:	4b3f      	ldr	r3, [pc, #252]	; (3a4c <_dtoa_r+0x694>)
    394e:	f003 f93f 	bl	6bd0 <__aeabi_dmul>
    3952:	1c06      	adds	r6, r0, #0
    3954:	1c0f      	adds	r7, r1, #0
    3956:	e7bc      	b.n	38d2 <_dtoa_r+0x51a>
    3958:	9c14      	ldr	r4, [sp, #80]	; 0x50
    395a:	9d15      	ldr	r5, [sp, #84]	; 0x54
    395c:	9404      	str	r4, [sp, #16]
    395e:	9505      	str	r5, [sp, #20]
    3960:	9b19      	ldr	r3, [sp, #100]	; 0x64
    3962:	2b00      	cmp	r3, #0
    3964:	da00      	bge.n	3968 <_dtoa_r+0x5b0>
    3966:	e09f      	b.n	3aa8 <_dtoa_r+0x6f0>
    3968:	9d06      	ldr	r5, [sp, #24]
    396a:	2d0e      	cmp	r5, #14
    396c:	dd00      	ble.n	3970 <_dtoa_r+0x5b8>
    396e:	e09b      	b.n	3aa8 <_dtoa_r+0x6f0>
    3970:	4a3d      	ldr	r2, [pc, #244]	; (3a68 <_dtoa_r+0x6b0>)
    3972:	00eb      	lsls	r3, r5, #3
    3974:	18d3      	adds	r3, r2, r3
    3976:	681c      	ldr	r4, [r3, #0]
    3978:	685d      	ldr	r5, [r3, #4]
    397a:	9402      	str	r4, [sp, #8]
    397c:	9503      	str	r5, [sp, #12]
    397e:	9d21      	ldr	r5, [sp, #132]	; 0x84
    3980:	2d00      	cmp	r5, #0
    3982:	da14      	bge.n	39ae <_dtoa_r+0x5f6>
    3984:	9c08      	ldr	r4, [sp, #32]
    3986:	2c00      	cmp	r4, #0
    3988:	dc11      	bgt.n	39ae <_dtoa_r+0x5f6>
    398a:	d000      	beq.n	398e <_dtoa_r+0x5d6>
    398c:	e18c      	b.n	3ca8 <_dtoa_r+0x8f0>
    398e:	4a32      	ldr	r2, [pc, #200]	; (3a58 <_dtoa_r+0x6a0>)
    3990:	4b32      	ldr	r3, [pc, #200]	; (3a5c <_dtoa_r+0x6a4>)
    3992:	9802      	ldr	r0, [sp, #8]
    3994:	9903      	ldr	r1, [sp, #12]
    3996:	f003 f91b 	bl	6bd0 <__aeabi_dmul>
    399a:	9a04      	ldr	r2, [sp, #16]
    399c:	9b05      	ldr	r3, [sp, #20]
    399e:	f002 f979 	bl	5c94 <__aeabi_dcmpge>
    39a2:	9f08      	ldr	r7, [sp, #32]
    39a4:	1c3e      	adds	r6, r7, #0
    39a6:	2800      	cmp	r0, #0
    39a8:	d000      	beq.n	39ac <_dtoa_r+0x5f4>
    39aa:	e17f      	b.n	3cac <_dtoa_r+0x8f4>
    39ac:	e187      	b.n	3cbe <_dtoa_r+0x906>
    39ae:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    39b0:	9e04      	ldr	r6, [sp, #16]
    39b2:	9f05      	ldr	r7, [sp, #20]
    39b4:	9a02      	ldr	r2, [sp, #8]
    39b6:	9b03      	ldr	r3, [sp, #12]
    39b8:	1c30      	adds	r0, r6, #0
    39ba:	1c39      	adds	r1, r7, #0
    39bc:	f002 fc98 	bl	62f0 <__aeabi_ddiv>
    39c0:	f003 fece 	bl	7760 <__aeabi_d2iz>
    39c4:	1c04      	adds	r4, r0, #0
    39c6:	f003 feff 	bl	77c8 <__aeabi_i2d>
    39ca:	9a02      	ldr	r2, [sp, #8]
    39cc:	9b03      	ldr	r3, [sp, #12]
    39ce:	f003 f8ff 	bl	6bd0 <__aeabi_dmul>
    39d2:	1c02      	adds	r2, r0, #0
    39d4:	1c0b      	adds	r3, r1, #0
    39d6:	1c30      	adds	r0, r6, #0
    39d8:	1c39      	adds	r1, r7, #0
    39da:	f003 fb8b 	bl	70f4 <__aeabi_dsub>
    39de:	3501      	adds	r5, #1
    39e0:	1c02      	adds	r2, r0, #0
    39e2:	1c20      	adds	r0, r4, #0
    39e4:	3030      	adds	r0, #48	; 0x30
    39e6:	1c0b      	adds	r3, r1, #0
    39e8:	1e69      	subs	r1, r5, #1
    39ea:	7008      	strb	r0, [r1, #0]
    39ec:	980b      	ldr	r0, [sp, #44]	; 0x2c
    39ee:	1a29      	subs	r1, r5, r0
    39f0:	9808      	ldr	r0, [sp, #32]
    39f2:	4281      	cmp	r1, r0
    39f4:	d148      	bne.n	3a88 <_dtoa_r+0x6d0>
    39f6:	1c10      	adds	r0, r2, #0
    39f8:	1c19      	adds	r1, r3, #0
    39fa:	f002 f955 	bl	5ca8 <__aeabi_dadd>
    39fe:	9a02      	ldr	r2, [sp, #8]
    3a00:	9b03      	ldr	r3, [sp, #12]
    3a02:	1c06      	adds	r6, r0, #0
    3a04:	1c0f      	adds	r7, r1, #0
    3a06:	f002 f93b 	bl	5c80 <__aeabi_dcmpgt>
    3a0a:	2800      	cmp	r0, #0
    3a0c:	d10d      	bne.n	3a2a <_dtoa_r+0x672>
    3a0e:	1c30      	adds	r0, r6, #0
    3a10:	1c39      	adds	r1, r7, #0
    3a12:	9a02      	ldr	r2, [sp, #8]
    3a14:	9b03      	ldr	r3, [sp, #12]
    3a16:	f002 f919 	bl	5c4c <__aeabi_dcmpeq>
    3a1a:	2800      	cmp	r0, #0
    3a1c:	d100      	bne.n	3a20 <_dtoa_r+0x668>
    3a1e:	e27f      	b.n	3f20 <_dtoa_r+0xb68>
    3a20:	07e1      	lsls	r1, r4, #31
    3a22:	d402      	bmi.n	3a2a <_dtoa_r+0x672>
    3a24:	e27c      	b.n	3f20 <_dtoa_r+0xb68>
    3a26:	9c11      	ldr	r4, [sp, #68]	; 0x44
    3a28:	9406      	str	r4, [sp, #24]
    3a2a:	1e6b      	subs	r3, r5, #1
    3a2c:	781a      	ldrb	r2, [r3, #0]
    3a2e:	2a39      	cmp	r2, #57	; 0x39
    3a30:	d126      	bne.n	3a80 <_dtoa_r+0x6c8>
    3a32:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    3a34:	42a3      	cmp	r3, r4
    3a36:	d01d      	beq.n	3a74 <_dtoa_r+0x6bc>
    3a38:	1c1d      	adds	r5, r3, #0
    3a3a:	e7f6      	b.n	3a2a <_dtoa_r+0x672>
    3a3c:	46c0      	nop			; (mov r8, r8)
    3a3e:	46c0      	nop			; (mov r8, r8)
    3a40:	00000000 	.word	0x00000000
    3a44:	3ff00000 	.word	0x3ff00000
    3a48:	00000000 	.word	0x00000000
    3a4c:	40240000 	.word	0x40240000
    3a50:	00000000 	.word	0x00000000
    3a54:	401c0000 	.word	0x401c0000
    3a58:	00000000 	.word	0x00000000
    3a5c:	40140000 	.word	0x40140000
    3a60:	00000000 	.word	0x00000000
    3a64:	3fe00000 	.word	0x3fe00000
    3a68:	00007af8 	.word	0x00007af8
    3a6c:	00007be8 	.word	0x00007be8
    3a70:	fcc00000 	.word	0xfcc00000
    3a74:	9c06      	ldr	r4, [sp, #24]
    3a76:	2230      	movs	r2, #48	; 0x30
    3a78:	3401      	adds	r4, #1
    3a7a:	9406      	str	r4, [sp, #24]
    3a7c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    3a7e:	7022      	strb	r2, [r4, #0]
    3a80:	781a      	ldrb	r2, [r3, #0]
    3a82:	3201      	adds	r2, #1
    3a84:	701a      	strb	r2, [r3, #0]
    3a86:	e24b      	b.n	3f20 <_dtoa_r+0xb68>
    3a88:	1c10      	adds	r0, r2, #0
    3a8a:	1c19      	adds	r1, r3, #0
    3a8c:	4bc9      	ldr	r3, [pc, #804]	; (3db4 <_dtoa_r+0x9fc>)
    3a8e:	4ac8      	ldr	r2, [pc, #800]	; (3db0 <_dtoa_r+0x9f8>)
    3a90:	f003 f89e 	bl	6bd0 <__aeabi_dmul>
    3a94:	4ac8      	ldr	r2, [pc, #800]	; (3db8 <_dtoa_r+0xa00>)
    3a96:	4bc9      	ldr	r3, [pc, #804]	; (3dbc <_dtoa_r+0xa04>)
    3a98:	1c06      	adds	r6, r0, #0
    3a9a:	1c0f      	adds	r7, r1, #0
    3a9c:	f002 f8d6 	bl	5c4c <__aeabi_dcmpeq>
    3aa0:	2800      	cmp	r0, #0
    3aa2:	d100      	bne.n	3aa6 <_dtoa_r+0x6ee>
    3aa4:	e786      	b.n	39b4 <_dtoa_r+0x5fc>
    3aa6:	e23b      	b.n	3f20 <_dtoa_r+0xb68>
    3aa8:	9d10      	ldr	r5, [sp, #64]	; 0x40
    3aaa:	2d00      	cmp	r5, #0
    3aac:	d031      	beq.n	3b12 <_dtoa_r+0x75a>
    3aae:	9c20      	ldr	r4, [sp, #128]	; 0x80
    3ab0:	2c01      	cmp	r4, #1
    3ab2:	dc0b      	bgt.n	3acc <_dtoa_r+0x714>
    3ab4:	9d16      	ldr	r5, [sp, #88]	; 0x58
    3ab6:	2d00      	cmp	r5, #0
    3ab8:	d002      	beq.n	3ac0 <_dtoa_r+0x708>
    3aba:	48c1      	ldr	r0, [pc, #772]	; (3dc0 <_dtoa_r+0xa08>)
    3abc:	181b      	adds	r3, r3, r0
    3abe:	e002      	b.n	3ac6 <_dtoa_r+0x70e>
    3ac0:	9918      	ldr	r1, [sp, #96]	; 0x60
    3ac2:	2336      	movs	r3, #54	; 0x36
    3ac4:	1a5b      	subs	r3, r3, r1
    3ac6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    3ac8:	9c02      	ldr	r4, [sp, #8]
    3aca:	e016      	b.n	3afa <_dtoa_r+0x742>
    3acc:	9d08      	ldr	r5, [sp, #32]
    3ace:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    3ad0:	3d01      	subs	r5, #1
    3ad2:	42ac      	cmp	r4, r5
    3ad4:	db01      	blt.n	3ada <_dtoa_r+0x722>
    3ad6:	1b65      	subs	r5, r4, r5
    3ad8:	e006      	b.n	3ae8 <_dtoa_r+0x730>
    3ada:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    3adc:	950d      	str	r5, [sp, #52]	; 0x34
    3ade:	1b2b      	subs	r3, r5, r4
    3ae0:	9c12      	ldr	r4, [sp, #72]	; 0x48
    3ae2:	2500      	movs	r5, #0
    3ae4:	18e4      	adds	r4, r4, r3
    3ae6:	9412      	str	r4, [sp, #72]	; 0x48
    3ae8:	9c08      	ldr	r4, [sp, #32]
    3aea:	2c00      	cmp	r4, #0
    3aec:	da03      	bge.n	3af6 <_dtoa_r+0x73e>
    3aee:	9802      	ldr	r0, [sp, #8]
    3af0:	2300      	movs	r3, #0
    3af2:	1b04      	subs	r4, r0, r4
    3af4:	e001      	b.n	3afa <_dtoa_r+0x742>
    3af6:	9c02      	ldr	r4, [sp, #8]
    3af8:	9b08      	ldr	r3, [sp, #32]
    3afa:	9902      	ldr	r1, [sp, #8]
    3afc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3afe:	18c9      	adds	r1, r1, r3
    3b00:	9102      	str	r1, [sp, #8]
    3b02:	18d2      	adds	r2, r2, r3
    3b04:	9807      	ldr	r0, [sp, #28]
    3b06:	2101      	movs	r1, #1
    3b08:	9209      	str	r2, [sp, #36]	; 0x24
    3b0a:	f000 fe7a 	bl	4802 <__i2b>
    3b0e:	1c06      	adds	r6, r0, #0
    3b10:	e002      	b.n	3b18 <_dtoa_r+0x760>
    3b12:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    3b14:	9c02      	ldr	r4, [sp, #8]
    3b16:	9e10      	ldr	r6, [sp, #64]	; 0x40
    3b18:	2c00      	cmp	r4, #0
    3b1a:	d00c      	beq.n	3b36 <_dtoa_r+0x77e>
    3b1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3b1e:	2b00      	cmp	r3, #0
    3b20:	dd09      	ble.n	3b36 <_dtoa_r+0x77e>
    3b22:	42a3      	cmp	r3, r4
    3b24:	dd00      	ble.n	3b28 <_dtoa_r+0x770>
    3b26:	1c23      	adds	r3, r4, #0
    3b28:	9802      	ldr	r0, [sp, #8]
    3b2a:	9909      	ldr	r1, [sp, #36]	; 0x24
    3b2c:	1ac0      	subs	r0, r0, r3
    3b2e:	1ac9      	subs	r1, r1, r3
    3b30:	9002      	str	r0, [sp, #8]
    3b32:	1ae4      	subs	r4, r4, r3
    3b34:	9109      	str	r1, [sp, #36]	; 0x24
    3b36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3b38:	2a00      	cmp	r2, #0
    3b3a:	dd21      	ble.n	3b80 <_dtoa_r+0x7c8>
    3b3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    3b3e:	2b00      	cmp	r3, #0
    3b40:	d018      	beq.n	3b74 <_dtoa_r+0x7bc>
    3b42:	2d00      	cmp	r5, #0
    3b44:	dd10      	ble.n	3b68 <_dtoa_r+0x7b0>
    3b46:	1c31      	adds	r1, r6, #0
    3b48:	1c2a      	adds	r2, r5, #0
    3b4a:	9807      	ldr	r0, [sp, #28]
    3b4c:	f000 fef1 	bl	4932 <__pow5mult>
    3b50:	1c06      	adds	r6, r0, #0
    3b52:	1c31      	adds	r1, r6, #0
    3b54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3b56:	9807      	ldr	r0, [sp, #28]
    3b58:	f000 fe5c 	bl	4814 <__multiply>
    3b5c:	990a      	ldr	r1, [sp, #40]	; 0x28
    3b5e:	1c07      	adds	r7, r0, #0
    3b60:	9807      	ldr	r0, [sp, #28]
    3b62:	f000 fd7d 	bl	4660 <_Bfree>
    3b66:	970a      	str	r7, [sp, #40]	; 0x28
    3b68:	980d      	ldr	r0, [sp, #52]	; 0x34
    3b6a:	1b42      	subs	r2, r0, r5
    3b6c:	d008      	beq.n	3b80 <_dtoa_r+0x7c8>
    3b6e:	9807      	ldr	r0, [sp, #28]
    3b70:	990a      	ldr	r1, [sp, #40]	; 0x28
    3b72:	e002      	b.n	3b7a <_dtoa_r+0x7c2>
    3b74:	9807      	ldr	r0, [sp, #28]
    3b76:	990a      	ldr	r1, [sp, #40]	; 0x28
    3b78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    3b7a:	f000 feda 	bl	4932 <__pow5mult>
    3b7e:	900a      	str	r0, [sp, #40]	; 0x28
    3b80:	9807      	ldr	r0, [sp, #28]
    3b82:	2101      	movs	r1, #1
    3b84:	f000 fe3d 	bl	4802 <__i2b>
    3b88:	9d12      	ldr	r5, [sp, #72]	; 0x48
    3b8a:	1c07      	adds	r7, r0, #0
    3b8c:	2d00      	cmp	r5, #0
    3b8e:	dd05      	ble.n	3b9c <_dtoa_r+0x7e4>
    3b90:	1c39      	adds	r1, r7, #0
    3b92:	9807      	ldr	r0, [sp, #28]
    3b94:	1c2a      	adds	r2, r5, #0
    3b96:	f000 fecc 	bl	4932 <__pow5mult>
    3b9a:	1c07      	adds	r7, r0, #0
    3b9c:	9820      	ldr	r0, [sp, #128]	; 0x80
    3b9e:	2500      	movs	r5, #0
    3ba0:	2801      	cmp	r0, #1
    3ba2:	dc10      	bgt.n	3bc6 <_dtoa_r+0x80e>
    3ba4:	9904      	ldr	r1, [sp, #16]
    3ba6:	42a9      	cmp	r1, r5
    3ba8:	d10d      	bne.n	3bc6 <_dtoa_r+0x80e>
    3baa:	9a05      	ldr	r2, [sp, #20]
    3bac:	0313      	lsls	r3, r2, #12
    3bae:	42ab      	cmp	r3, r5
    3bb0:	d109      	bne.n	3bc6 <_dtoa_r+0x80e>
    3bb2:	4b84      	ldr	r3, [pc, #528]	; (3dc4 <_dtoa_r+0xa0c>)
    3bb4:	4213      	tst	r3, r2
    3bb6:	d006      	beq.n	3bc6 <_dtoa_r+0x80e>
    3bb8:	9d02      	ldr	r5, [sp, #8]
    3bba:	3501      	adds	r5, #1
    3bbc:	9502      	str	r5, [sp, #8]
    3bbe:	9d09      	ldr	r5, [sp, #36]	; 0x24
    3bc0:	3501      	adds	r5, #1
    3bc2:	9509      	str	r5, [sp, #36]	; 0x24
    3bc4:	2501      	movs	r5, #1
    3bc6:	9912      	ldr	r1, [sp, #72]	; 0x48
    3bc8:	2001      	movs	r0, #1
    3bca:	2900      	cmp	r1, #0
    3bcc:	d008      	beq.n	3be0 <_dtoa_r+0x828>
    3bce:	693b      	ldr	r3, [r7, #16]
    3bd0:	3303      	adds	r3, #3
    3bd2:	009b      	lsls	r3, r3, #2
    3bd4:	18fb      	adds	r3, r7, r3
    3bd6:	6858      	ldr	r0, [r3, #4]
    3bd8:	f000 fdca 	bl	4770 <__hi0bits>
    3bdc:	2320      	movs	r3, #32
    3bde:	1a18      	subs	r0, r3, r0
    3be0:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3be2:	231f      	movs	r3, #31
    3be4:	1880      	adds	r0, r0, r2
    3be6:	4018      	ands	r0, r3
    3be8:	d00d      	beq.n	3c06 <_dtoa_r+0x84e>
    3bea:	2320      	movs	r3, #32
    3bec:	1a1b      	subs	r3, r3, r0
    3bee:	2b04      	cmp	r3, #4
    3bf0:	dd06      	ble.n	3c00 <_dtoa_r+0x848>
    3bf2:	231c      	movs	r3, #28
    3bf4:	1a18      	subs	r0, r3, r0
    3bf6:	9b02      	ldr	r3, [sp, #8]
    3bf8:	1824      	adds	r4, r4, r0
    3bfa:	181b      	adds	r3, r3, r0
    3bfc:	9302      	str	r3, [sp, #8]
    3bfe:	e008      	b.n	3c12 <_dtoa_r+0x85a>
    3c00:	2b04      	cmp	r3, #4
    3c02:	d008      	beq.n	3c16 <_dtoa_r+0x85e>
    3c04:	1c18      	adds	r0, r3, #0
    3c06:	9902      	ldr	r1, [sp, #8]
    3c08:	301c      	adds	r0, #28
    3c0a:	1809      	adds	r1, r1, r0
    3c0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3c0e:	9102      	str	r1, [sp, #8]
    3c10:	1824      	adds	r4, r4, r0
    3c12:	1812      	adds	r2, r2, r0
    3c14:	9209      	str	r2, [sp, #36]	; 0x24
    3c16:	9b02      	ldr	r3, [sp, #8]
    3c18:	2b00      	cmp	r3, #0
    3c1a:	dd05      	ble.n	3c28 <_dtoa_r+0x870>
    3c1c:	9807      	ldr	r0, [sp, #28]
    3c1e:	990a      	ldr	r1, [sp, #40]	; 0x28
    3c20:	1c1a      	adds	r2, r3, #0
    3c22:	f000 fec7 	bl	49b4 <__lshift>
    3c26:	900a      	str	r0, [sp, #40]	; 0x28
    3c28:	9809      	ldr	r0, [sp, #36]	; 0x24
    3c2a:	2800      	cmp	r0, #0
    3c2c:	dd05      	ble.n	3c3a <_dtoa_r+0x882>
    3c2e:	1c39      	adds	r1, r7, #0
    3c30:	9807      	ldr	r0, [sp, #28]
    3c32:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3c34:	f000 febe 	bl	49b4 <__lshift>
    3c38:	1c07      	adds	r7, r0, #0
    3c3a:	9913      	ldr	r1, [sp, #76]	; 0x4c
    3c3c:	2900      	cmp	r1, #0
    3c3e:	d01b      	beq.n	3c78 <_dtoa_r+0x8c0>
    3c40:	980a      	ldr	r0, [sp, #40]	; 0x28
    3c42:	1c39      	adds	r1, r7, #0
    3c44:	f000 ff08 	bl	4a58 <__mcmp>
    3c48:	2800      	cmp	r0, #0
    3c4a:	da15      	bge.n	3c78 <_dtoa_r+0x8c0>
    3c4c:	9a06      	ldr	r2, [sp, #24]
    3c4e:	2300      	movs	r3, #0
    3c50:	3a01      	subs	r2, #1
    3c52:	9206      	str	r2, [sp, #24]
    3c54:	9807      	ldr	r0, [sp, #28]
    3c56:	990a      	ldr	r1, [sp, #40]	; 0x28
    3c58:	220a      	movs	r2, #10
    3c5a:	f000 fd0b 	bl	4674 <__multadd>
    3c5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3c60:	900a      	str	r0, [sp, #40]	; 0x28
    3c62:	9810      	ldr	r0, [sp, #64]	; 0x40
    3c64:	9308      	str	r3, [sp, #32]
    3c66:	2800      	cmp	r0, #0
    3c68:	d006      	beq.n	3c78 <_dtoa_r+0x8c0>
    3c6a:	1c31      	adds	r1, r6, #0
    3c6c:	9807      	ldr	r0, [sp, #28]
    3c6e:	220a      	movs	r2, #10
    3c70:	2300      	movs	r3, #0
    3c72:	f000 fcff 	bl	4674 <__multadd>
    3c76:	1c06      	adds	r6, r0, #0
    3c78:	9908      	ldr	r1, [sp, #32]
    3c7a:	2900      	cmp	r1, #0
    3c7c:	dc2a      	bgt.n	3cd4 <_dtoa_r+0x91c>
    3c7e:	9a20      	ldr	r2, [sp, #128]	; 0x80
    3c80:	2a02      	cmp	r2, #2
    3c82:	dd27      	ble.n	3cd4 <_dtoa_r+0x91c>
    3c84:	2900      	cmp	r1, #0
    3c86:	d111      	bne.n	3cac <_dtoa_r+0x8f4>
    3c88:	1c39      	adds	r1, r7, #0
    3c8a:	9807      	ldr	r0, [sp, #28]
    3c8c:	2205      	movs	r2, #5
    3c8e:	9b08      	ldr	r3, [sp, #32]
    3c90:	f000 fcf0 	bl	4674 <__multadd>
    3c94:	1c07      	adds	r7, r0, #0
    3c96:	1c39      	adds	r1, r7, #0
    3c98:	980a      	ldr	r0, [sp, #40]	; 0x28
    3c9a:	f000 fedd 	bl	4a58 <__mcmp>
    3c9e:	2800      	cmp	r0, #0
    3ca0:	dc0d      	bgt.n	3cbe <_dtoa_r+0x906>
    3ca2:	e003      	b.n	3cac <_dtoa_r+0x8f4>
    3ca4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    3ca6:	e000      	b.n	3caa <_dtoa_r+0x8f2>
    3ca8:	2700      	movs	r7, #0
    3caa:	1c3e      	adds	r6, r7, #0
    3cac:	9c21      	ldr	r4, [sp, #132]	; 0x84
    3cae:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    3cb0:	43e4      	mvns	r4, r4
    3cb2:	9406      	str	r4, [sp, #24]
    3cb4:	e00b      	b.n	3cce <_dtoa_r+0x916>
    3cb6:	9d11      	ldr	r5, [sp, #68]	; 0x44
    3cb8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    3cba:	9506      	str	r5, [sp, #24]
    3cbc:	1c3e      	adds	r6, r7, #0
    3cbe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    3cc0:	2331      	movs	r3, #49	; 0x31
    3cc2:	7023      	strb	r3, [r4, #0]
    3cc4:	9c06      	ldr	r4, [sp, #24]
    3cc6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    3cc8:	3401      	adds	r4, #1
    3cca:	3501      	adds	r5, #1
    3ccc:	9406      	str	r4, [sp, #24]
    3cce:	9602      	str	r6, [sp, #8]
    3cd0:	2600      	movs	r6, #0
    3cd2:	e10f      	b.n	3ef4 <_dtoa_r+0xb3c>
    3cd4:	9810      	ldr	r0, [sp, #64]	; 0x40
    3cd6:	2800      	cmp	r0, #0
    3cd8:	d100      	bne.n	3cdc <_dtoa_r+0x924>
    3cda:	e0c5      	b.n	3e68 <_dtoa_r+0xab0>
    3cdc:	2c00      	cmp	r4, #0
    3cde:	dd05      	ble.n	3cec <_dtoa_r+0x934>
    3ce0:	1c31      	adds	r1, r6, #0
    3ce2:	9807      	ldr	r0, [sp, #28]
    3ce4:	1c22      	adds	r2, r4, #0
    3ce6:	f000 fe65 	bl	49b4 <__lshift>
    3cea:	1c06      	adds	r6, r0, #0
    3cec:	9602      	str	r6, [sp, #8]
    3cee:	2d00      	cmp	r5, #0
    3cf0:	d012      	beq.n	3d18 <_dtoa_r+0x960>
    3cf2:	6871      	ldr	r1, [r6, #4]
    3cf4:	9807      	ldr	r0, [sp, #28]
    3cf6:	f000 fc8b 	bl	4610 <_Balloc>
    3cfa:	6932      	ldr	r2, [r6, #16]
    3cfc:	1c31      	adds	r1, r6, #0
    3cfe:	3202      	adds	r2, #2
    3d00:	1c04      	adds	r4, r0, #0
    3d02:	0092      	lsls	r2, r2, #2
    3d04:	310c      	adds	r1, #12
    3d06:	300c      	adds	r0, #12
    3d08:	f7fe fa68 	bl	21dc <memcpy>
    3d0c:	9807      	ldr	r0, [sp, #28]
    3d0e:	1c21      	adds	r1, r4, #0
    3d10:	2201      	movs	r2, #1
    3d12:	f000 fe4f 	bl	49b4 <__lshift>
    3d16:	9002      	str	r0, [sp, #8]
    3d18:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    3d1a:	9d08      	ldr	r5, [sp, #32]
    3d1c:	1c23      	adds	r3, r4, #0
    3d1e:	3b01      	subs	r3, #1
    3d20:	195b      	adds	r3, r3, r5
    3d22:	9409      	str	r4, [sp, #36]	; 0x24
    3d24:	9310      	str	r3, [sp, #64]	; 0x40
    3d26:	1c39      	adds	r1, r7, #0
    3d28:	980a      	ldr	r0, [sp, #40]	; 0x28
    3d2a:	f7ff fab9 	bl	32a0 <quorem>
    3d2e:	1c31      	adds	r1, r6, #0
    3d30:	900d      	str	r0, [sp, #52]	; 0x34
    3d32:	1c04      	adds	r4, r0, #0
    3d34:	980a      	ldr	r0, [sp, #40]	; 0x28
    3d36:	f000 fe8f 	bl	4a58 <__mcmp>
    3d3a:	1c39      	adds	r1, r7, #0
    3d3c:	900c      	str	r0, [sp, #48]	; 0x30
    3d3e:	9a02      	ldr	r2, [sp, #8]
    3d40:	9807      	ldr	r0, [sp, #28]
    3d42:	f000 fea4 	bl	4a8e <__mdiff>
    3d46:	1c05      	adds	r5, r0, #0
    3d48:	68c0      	ldr	r0, [r0, #12]
    3d4a:	3430      	adds	r4, #48	; 0x30
    3d4c:	2800      	cmp	r0, #0
    3d4e:	d105      	bne.n	3d5c <_dtoa_r+0x9a4>
    3d50:	980a      	ldr	r0, [sp, #40]	; 0x28
    3d52:	1c29      	adds	r1, r5, #0
    3d54:	f000 fe80 	bl	4a58 <__mcmp>
    3d58:	9008      	str	r0, [sp, #32]
    3d5a:	e001      	b.n	3d60 <_dtoa_r+0x9a8>
    3d5c:	2101      	movs	r1, #1
    3d5e:	9108      	str	r1, [sp, #32]
    3d60:	1c29      	adds	r1, r5, #0
    3d62:	9807      	ldr	r0, [sp, #28]
    3d64:	f000 fc7c 	bl	4660 <_Bfree>
    3d68:	9b08      	ldr	r3, [sp, #32]
    3d6a:	9d20      	ldr	r5, [sp, #128]	; 0x80
    3d6c:	432b      	orrs	r3, r5
    3d6e:	d10d      	bne.n	3d8c <_dtoa_r+0x9d4>
    3d70:	9804      	ldr	r0, [sp, #16]
    3d72:	2301      	movs	r3, #1
    3d74:	4203      	tst	r3, r0
    3d76:	d109      	bne.n	3d8c <_dtoa_r+0x9d4>
    3d78:	2c39      	cmp	r4, #57	; 0x39
    3d7a:	d044      	beq.n	3e06 <_dtoa_r+0xa4e>
    3d7c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    3d7e:	2d00      	cmp	r5, #0
    3d80:	dd01      	ble.n	3d86 <_dtoa_r+0x9ce>
    3d82:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    3d84:	3431      	adds	r4, #49	; 0x31
    3d86:	9d09      	ldr	r5, [sp, #36]	; 0x24
    3d88:	3501      	adds	r5, #1
    3d8a:	e044      	b.n	3e16 <_dtoa_r+0xa5e>
    3d8c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    3d8e:	2d00      	cmp	r5, #0
    3d90:	da03      	bge.n	3d9a <_dtoa_r+0x9e2>
    3d92:	9d08      	ldr	r5, [sp, #32]
    3d94:	2d00      	cmp	r5, #0
    3d96:	dc17      	bgt.n	3dc8 <_dtoa_r+0xa10>
    3d98:	e028      	b.n	3dec <_dtoa_r+0xa34>
    3d9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3d9c:	9d20      	ldr	r5, [sp, #128]	; 0x80
    3d9e:	432b      	orrs	r3, r5
    3da0:	d129      	bne.n	3df6 <_dtoa_r+0xa3e>
    3da2:	9804      	ldr	r0, [sp, #16]
    3da4:	2301      	movs	r3, #1
    3da6:	4203      	tst	r3, r0
    3da8:	d125      	bne.n	3df6 <_dtoa_r+0xa3e>
    3daa:	e7f2      	b.n	3d92 <_dtoa_r+0x9da>
    3dac:	46c0      	nop			; (mov r8, r8)
    3dae:	46c0      	nop			; (mov r8, r8)
    3db0:	00000000 	.word	0x00000000
    3db4:	40240000 	.word	0x40240000
	...
    3dc0:	00000433 	.word	0x00000433
    3dc4:	7ff00000 	.word	0x7ff00000
    3dc8:	990a      	ldr	r1, [sp, #40]	; 0x28
    3dca:	9807      	ldr	r0, [sp, #28]
    3dcc:	2201      	movs	r2, #1
    3dce:	f000 fdf1 	bl	49b4 <__lshift>
    3dd2:	1c39      	adds	r1, r7, #0
    3dd4:	900a      	str	r0, [sp, #40]	; 0x28
    3dd6:	f000 fe3f 	bl	4a58 <__mcmp>
    3dda:	2800      	cmp	r0, #0
    3ddc:	dc02      	bgt.n	3de4 <_dtoa_r+0xa2c>
    3dde:	d105      	bne.n	3dec <_dtoa_r+0xa34>
    3de0:	07e1      	lsls	r1, r4, #31
    3de2:	d503      	bpl.n	3dec <_dtoa_r+0xa34>
    3de4:	2c39      	cmp	r4, #57	; 0x39
    3de6:	d00e      	beq.n	3e06 <_dtoa_r+0xa4e>
    3de8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    3dea:	3431      	adds	r4, #49	; 0x31
    3dec:	9d09      	ldr	r5, [sp, #36]	; 0x24
    3dee:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3df0:	3501      	adds	r5, #1
    3df2:	7014      	strb	r4, [r2, #0]
    3df4:	e07e      	b.n	3ef4 <_dtoa_r+0xb3c>
    3df6:	9d09      	ldr	r5, [sp, #36]	; 0x24
    3df8:	3501      	adds	r5, #1
    3dfa:	950c      	str	r5, [sp, #48]	; 0x30
    3dfc:	9d08      	ldr	r5, [sp, #32]
    3dfe:	2d00      	cmp	r5, #0
    3e00:	dd0c      	ble.n	3e1c <_dtoa_r+0xa64>
    3e02:	2c39      	cmp	r4, #57	; 0x39
    3e04:	d105      	bne.n	3e12 <_dtoa_r+0xa5a>
    3e06:	9d09      	ldr	r5, [sp, #36]	; 0x24
    3e08:	9c09      	ldr	r4, [sp, #36]	; 0x24
    3e0a:	2339      	movs	r3, #57	; 0x39
    3e0c:	3501      	adds	r5, #1
    3e0e:	7023      	strb	r3, [r4, #0]
    3e10:	e05b      	b.n	3eca <_dtoa_r+0xb12>
    3e12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    3e14:	3401      	adds	r4, #1
    3e16:	9809      	ldr	r0, [sp, #36]	; 0x24
    3e18:	7004      	strb	r4, [r0, #0]
    3e1a:	e06b      	b.n	3ef4 <_dtoa_r+0xb3c>
    3e1c:	9909      	ldr	r1, [sp, #36]	; 0x24
    3e1e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    3e20:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    3e22:	700c      	strb	r4, [r1, #0]
    3e24:	4291      	cmp	r1, r2
    3e26:	d03d      	beq.n	3ea4 <_dtoa_r+0xaec>
    3e28:	990a      	ldr	r1, [sp, #40]	; 0x28
    3e2a:	220a      	movs	r2, #10
    3e2c:	2300      	movs	r3, #0
    3e2e:	9807      	ldr	r0, [sp, #28]
    3e30:	f000 fc20 	bl	4674 <__multadd>
    3e34:	9c02      	ldr	r4, [sp, #8]
    3e36:	900a      	str	r0, [sp, #40]	; 0x28
    3e38:	1c31      	adds	r1, r6, #0
    3e3a:	9807      	ldr	r0, [sp, #28]
    3e3c:	220a      	movs	r2, #10
    3e3e:	2300      	movs	r3, #0
    3e40:	42a6      	cmp	r6, r4
    3e42:	d104      	bne.n	3e4e <_dtoa_r+0xa96>
    3e44:	f000 fc16 	bl	4674 <__multadd>
    3e48:	1c06      	adds	r6, r0, #0
    3e4a:	9002      	str	r0, [sp, #8]
    3e4c:	e009      	b.n	3e62 <_dtoa_r+0xaaa>
    3e4e:	f000 fc11 	bl	4674 <__multadd>
    3e52:	9902      	ldr	r1, [sp, #8]
    3e54:	1c06      	adds	r6, r0, #0
    3e56:	220a      	movs	r2, #10
    3e58:	9807      	ldr	r0, [sp, #28]
    3e5a:	2300      	movs	r3, #0
    3e5c:	f000 fc0a 	bl	4674 <__multadd>
    3e60:	9002      	str	r0, [sp, #8]
    3e62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    3e64:	9509      	str	r5, [sp, #36]	; 0x24
    3e66:	e75e      	b.n	3d26 <_dtoa_r+0x96e>
    3e68:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    3e6a:	1c39      	adds	r1, r7, #0
    3e6c:	980a      	ldr	r0, [sp, #40]	; 0x28
    3e6e:	f7ff fa17 	bl	32a0 <quorem>
    3e72:	1c04      	adds	r4, r0, #0
    3e74:	3430      	adds	r4, #48	; 0x30
    3e76:	980b      	ldr	r0, [sp, #44]	; 0x2c
    3e78:	9908      	ldr	r1, [sp, #32]
    3e7a:	702c      	strb	r4, [r5, #0]
    3e7c:	3501      	adds	r5, #1
    3e7e:	1a2b      	subs	r3, r5, r0
    3e80:	428b      	cmp	r3, r1
    3e82:	db07      	blt.n	3e94 <_dtoa_r+0xadc>
    3e84:	1e0b      	subs	r3, r1, #0
    3e86:	dc00      	bgt.n	3e8a <_dtoa_r+0xad2>
    3e88:	2301      	movs	r3, #1
    3e8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3e8c:	9602      	str	r6, [sp, #8]
    3e8e:	18d5      	adds	r5, r2, r3
    3e90:	2600      	movs	r6, #0
    3e92:	e007      	b.n	3ea4 <_dtoa_r+0xaec>
    3e94:	9807      	ldr	r0, [sp, #28]
    3e96:	990a      	ldr	r1, [sp, #40]	; 0x28
    3e98:	220a      	movs	r2, #10
    3e9a:	2300      	movs	r3, #0
    3e9c:	f000 fbea 	bl	4674 <__multadd>
    3ea0:	900a      	str	r0, [sp, #40]	; 0x28
    3ea2:	e7e2      	b.n	3e6a <_dtoa_r+0xab2>
    3ea4:	990a      	ldr	r1, [sp, #40]	; 0x28
    3ea6:	9807      	ldr	r0, [sp, #28]
    3ea8:	2201      	movs	r2, #1
    3eaa:	f000 fd83 	bl	49b4 <__lshift>
    3eae:	1c39      	adds	r1, r7, #0
    3eb0:	900a      	str	r0, [sp, #40]	; 0x28
    3eb2:	f000 fdd1 	bl	4a58 <__mcmp>
    3eb6:	2800      	cmp	r0, #0
    3eb8:	dc07      	bgt.n	3eca <_dtoa_r+0xb12>
    3eba:	d115      	bne.n	3ee8 <_dtoa_r+0xb30>
    3ebc:	07e3      	lsls	r3, r4, #31
    3ebe:	d404      	bmi.n	3eca <_dtoa_r+0xb12>
    3ec0:	e012      	b.n	3ee8 <_dtoa_r+0xb30>
    3ec2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    3ec4:	42a3      	cmp	r3, r4
    3ec6:	d005      	beq.n	3ed4 <_dtoa_r+0xb1c>
    3ec8:	1c1d      	adds	r5, r3, #0
    3eca:	1e6b      	subs	r3, r5, #1
    3ecc:	781a      	ldrb	r2, [r3, #0]
    3ece:	2a39      	cmp	r2, #57	; 0x39
    3ed0:	d0f7      	beq.n	3ec2 <_dtoa_r+0xb0a>
    3ed2:	e006      	b.n	3ee2 <_dtoa_r+0xb2a>
    3ed4:	9c06      	ldr	r4, [sp, #24]
    3ed6:	2331      	movs	r3, #49	; 0x31
    3ed8:	3401      	adds	r4, #1
    3eda:	9406      	str	r4, [sp, #24]
    3edc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    3ede:	7023      	strb	r3, [r4, #0]
    3ee0:	e008      	b.n	3ef4 <_dtoa_r+0xb3c>
    3ee2:	3201      	adds	r2, #1
    3ee4:	701a      	strb	r2, [r3, #0]
    3ee6:	e005      	b.n	3ef4 <_dtoa_r+0xb3c>
    3ee8:	1e6b      	subs	r3, r5, #1
    3eea:	781a      	ldrb	r2, [r3, #0]
    3eec:	2a30      	cmp	r2, #48	; 0x30
    3eee:	d101      	bne.n	3ef4 <_dtoa_r+0xb3c>
    3ef0:	1c1d      	adds	r5, r3, #0
    3ef2:	e7f9      	b.n	3ee8 <_dtoa_r+0xb30>
    3ef4:	9807      	ldr	r0, [sp, #28]
    3ef6:	1c39      	adds	r1, r7, #0
    3ef8:	f000 fbb2 	bl	4660 <_Bfree>
    3efc:	9c02      	ldr	r4, [sp, #8]
    3efe:	2c00      	cmp	r4, #0
    3f00:	d00e      	beq.n	3f20 <_dtoa_r+0xb68>
    3f02:	2e00      	cmp	r6, #0
    3f04:	d005      	beq.n	3f12 <_dtoa_r+0xb5a>
    3f06:	42a6      	cmp	r6, r4
    3f08:	d003      	beq.n	3f12 <_dtoa_r+0xb5a>
    3f0a:	9807      	ldr	r0, [sp, #28]
    3f0c:	1c31      	adds	r1, r6, #0
    3f0e:	f000 fba7 	bl	4660 <_Bfree>
    3f12:	9807      	ldr	r0, [sp, #28]
    3f14:	9902      	ldr	r1, [sp, #8]
    3f16:	f000 fba3 	bl	4660 <_Bfree>
    3f1a:	e001      	b.n	3f20 <_dtoa_r+0xb68>
    3f1c:	9c11      	ldr	r4, [sp, #68]	; 0x44
    3f1e:	9406      	str	r4, [sp, #24]
    3f20:	9807      	ldr	r0, [sp, #28]
    3f22:	990a      	ldr	r1, [sp, #40]	; 0x28
    3f24:	f000 fb9c 	bl	4660 <_Bfree>
    3f28:	2300      	movs	r3, #0
    3f2a:	702b      	strb	r3, [r5, #0]
    3f2c:	9b06      	ldr	r3, [sp, #24]
    3f2e:	9c22      	ldr	r4, [sp, #136]	; 0x88
    3f30:	3301      	adds	r3, #1
    3f32:	6023      	str	r3, [r4, #0]
    3f34:	9c24      	ldr	r4, [sp, #144]	; 0x90
    3f36:	2c00      	cmp	r4, #0
    3f38:	d003      	beq.n	3f42 <_dtoa_r+0xb8a>
    3f3a:	6025      	str	r5, [r4, #0]
    3f3c:	e001      	b.n	3f42 <_dtoa_r+0xb8a>
    3f3e:	4802      	ldr	r0, [pc, #8]	; (3f48 <_dtoa_r+0xb90>)
    3f40:	e000      	b.n	3f44 <_dtoa_r+0xb8c>
    3f42:	980b      	ldr	r0, [sp, #44]	; 0x2c
    3f44:	b01b      	add	sp, #108	; 0x6c
    3f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3f48:	00007acc 	.word	0x00007acc
    3f4c:	46c0      	nop			; (mov r8, r8)
    3f4e:	46c0      	nop			; (mov r8, r8)

00003f50 <_malloc_trim_r>:
    3f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f52:	1c0d      	adds	r5, r1, #0
    3f54:	1c04      	adds	r4, r0, #0
    3f56:	f000 fb58 	bl	460a <__malloc_lock>
    3f5a:	4e20      	ldr	r6, [pc, #128]	; (3fdc <_malloc_trim_r+0x8c>)
    3f5c:	4a20      	ldr	r2, [pc, #128]	; (3fe0 <_malloc_trim_r+0x90>)
    3f5e:	68b3      	ldr	r3, [r6, #8]
    3f60:	685f      	ldr	r7, [r3, #4]
    3f62:	2303      	movs	r3, #3
    3f64:	439f      	bics	r7, r3
    3f66:	1b7d      	subs	r5, r7, r5
    3f68:	18ad      	adds	r5, r5, r2
    3f6a:	0b2d      	lsrs	r5, r5, #12
    3f6c:	4b1d      	ldr	r3, [pc, #116]	; (3fe4 <_malloc_trim_r+0x94>)
    3f6e:	3d01      	subs	r5, #1
    3f70:	032d      	lsls	r5, r5, #12
    3f72:	429d      	cmp	r5, r3
    3f74:	dc04      	bgt.n	3f80 <_malloc_trim_r+0x30>
    3f76:	1c20      	adds	r0, r4, #0
    3f78:	f000 fb48 	bl	460c <__malloc_unlock>
    3f7c:	2000      	movs	r0, #0
    3f7e:	e02b      	b.n	3fd8 <_malloc_trim_r+0x88>
    3f80:	1c20      	adds	r0, r4, #0
    3f82:	2100      	movs	r1, #0
    3f84:	f000 ff5a 	bl	4e3c <_sbrk_r>
    3f88:	68b2      	ldr	r2, [r6, #8]
    3f8a:	19d3      	adds	r3, r2, r7
    3f8c:	4298      	cmp	r0, r3
    3f8e:	d1f2      	bne.n	3f76 <_malloc_trim_r+0x26>
    3f90:	4269      	negs	r1, r5
    3f92:	1c20      	adds	r0, r4, #0
    3f94:	f000 ff52 	bl	4e3c <_sbrk_r>
    3f98:	3001      	adds	r0, #1
    3f9a:	d110      	bne.n	3fbe <_malloc_trim_r+0x6e>
    3f9c:	1c20      	adds	r0, r4, #0
    3f9e:	2100      	movs	r1, #0
    3fa0:	f000 ff4c 	bl	4e3c <_sbrk_r>
    3fa4:	68b3      	ldr	r3, [r6, #8]
    3fa6:	1ac2      	subs	r2, r0, r3
    3fa8:	2a0f      	cmp	r2, #15
    3faa:	dde4      	ble.n	3f76 <_malloc_trim_r+0x26>
    3fac:	490e      	ldr	r1, [pc, #56]	; (3fe8 <_malloc_trim_r+0x98>)
    3fae:	6809      	ldr	r1, [r1, #0]
    3fb0:	1a40      	subs	r0, r0, r1
    3fb2:	490e      	ldr	r1, [pc, #56]	; (3fec <_malloc_trim_r+0x9c>)
    3fb4:	6008      	str	r0, [r1, #0]
    3fb6:	2101      	movs	r1, #1
    3fb8:	430a      	orrs	r2, r1
    3fba:	605a      	str	r2, [r3, #4]
    3fbc:	e7db      	b.n	3f76 <_malloc_trim_r+0x26>
    3fbe:	68b3      	ldr	r3, [r6, #8]
    3fc0:	1b7f      	subs	r7, r7, r5
    3fc2:	2601      	movs	r6, #1
    3fc4:	4337      	orrs	r7, r6
    3fc6:	605f      	str	r7, [r3, #4]
    3fc8:	4b08      	ldr	r3, [pc, #32]	; (3fec <_malloc_trim_r+0x9c>)
    3fca:	1c20      	adds	r0, r4, #0
    3fcc:	681a      	ldr	r2, [r3, #0]
    3fce:	1b55      	subs	r5, r2, r5
    3fd0:	601d      	str	r5, [r3, #0]
    3fd2:	f000 fb1b 	bl	460c <__malloc_unlock>
    3fd6:	1c30      	adds	r0, r6, #0
    3fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3fda:	46c0      	nop			; (mov r8, r8)
    3fdc:	200004b4 	.word	0x200004b4
    3fe0:	00000fef 	.word	0x00000fef
    3fe4:	00000fff 	.word	0x00000fff
    3fe8:	200008bc 	.word	0x200008bc
    3fec:	20000928 	.word	0x20000928

00003ff0 <_free_r>:
    3ff0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3ff2:	1c04      	adds	r4, r0, #0
    3ff4:	1e0d      	subs	r5, r1, #0
    3ff6:	d100      	bne.n	3ffa <_free_r+0xa>
    3ff8:	e0aa      	b.n	4150 <_free_r+0x160>
    3ffa:	f000 fb06 	bl	460a <__malloc_lock>
    3ffe:	1c29      	adds	r1, r5, #0
    4000:	3908      	subs	r1, #8
    4002:	684f      	ldr	r7, [r1, #4]
    4004:	2001      	movs	r0, #1
    4006:	1c3b      	adds	r3, r7, #0
    4008:	4383      	bics	r3, r0
    400a:	18c8      	adds	r0, r1, r3
    400c:	6846      	ldr	r6, [r0, #4]
    400e:	2203      	movs	r2, #3
    4010:	4396      	bics	r6, r2
    4012:	4a50      	ldr	r2, [pc, #320]	; (4154 <_free_r+0x164>)
    4014:	6895      	ldr	r5, [r2, #8]
    4016:	46ac      	mov	ip, r5
    4018:	2501      	movs	r5, #1
    401a:	402f      	ands	r7, r5
    401c:	4560      	cmp	r0, ip
    401e:	d11a      	bne.n	4056 <_free_r+0x66>
    4020:	18f3      	adds	r3, r6, r3
    4022:	2f00      	cmp	r7, #0
    4024:	d106      	bne.n	4034 <_free_r+0x44>
    4026:	6808      	ldr	r0, [r1, #0]
    4028:	1a09      	subs	r1, r1, r0
    402a:	688d      	ldr	r5, [r1, #8]
    402c:	181b      	adds	r3, r3, r0
    402e:	68c8      	ldr	r0, [r1, #12]
    4030:	60e8      	str	r0, [r5, #12]
    4032:	6085      	str	r5, [r0, #8]
    4034:	2001      	movs	r0, #1
    4036:	4318      	orrs	r0, r3
    4038:	6048      	str	r0, [r1, #4]
    403a:	6091      	str	r1, [r2, #8]
    403c:	4a46      	ldr	r2, [pc, #280]	; (4158 <_free_r+0x168>)
    403e:	6812      	ldr	r2, [r2, #0]
    4040:	4293      	cmp	r3, r2
    4042:	d304      	bcc.n	404e <_free_r+0x5e>
    4044:	4b45      	ldr	r3, [pc, #276]	; (415c <_free_r+0x16c>)
    4046:	1c20      	adds	r0, r4, #0
    4048:	6819      	ldr	r1, [r3, #0]
    404a:	f7ff ff81 	bl	3f50 <_malloc_trim_r>
    404e:	1c20      	adds	r0, r4, #0
    4050:	f000 fadc 	bl	460c <__malloc_unlock>
    4054:	e07c      	b.n	4150 <_free_r+0x160>
    4056:	2500      	movs	r5, #0
    4058:	6046      	str	r6, [r0, #4]
    405a:	9501      	str	r5, [sp, #4]
    405c:	42af      	cmp	r7, r5
    405e:	d10d      	bne.n	407c <_free_r+0x8c>
    4060:	680f      	ldr	r7, [r1, #0]
    4062:	2508      	movs	r5, #8
    4064:	1bc9      	subs	r1, r1, r7
    4066:	19db      	adds	r3, r3, r7
    4068:	688f      	ldr	r7, [r1, #8]
    406a:	18ad      	adds	r5, r5, r2
    406c:	42af      	cmp	r7, r5
    406e:	d003      	beq.n	4078 <_free_r+0x88>
    4070:	68cd      	ldr	r5, [r1, #12]
    4072:	60fd      	str	r5, [r7, #12]
    4074:	60af      	str	r7, [r5, #8]
    4076:	e001      	b.n	407c <_free_r+0x8c>
    4078:	2501      	movs	r5, #1
    407a:	9501      	str	r5, [sp, #4]
    407c:	1987      	adds	r7, r0, r6
    407e:	687d      	ldr	r5, [r7, #4]
    4080:	2701      	movs	r7, #1
    4082:	423d      	tst	r5, r7
    4084:	d110      	bne.n	40a8 <_free_r+0xb8>
    4086:	9d01      	ldr	r5, [sp, #4]
    4088:	199b      	adds	r3, r3, r6
    408a:	6886      	ldr	r6, [r0, #8]
    408c:	2d00      	cmp	r5, #0
    408e:	d108      	bne.n	40a2 <_free_r+0xb2>
    4090:	4d33      	ldr	r5, [pc, #204]	; (4160 <_free_r+0x170>)
    4092:	42ae      	cmp	r6, r5
    4094:	d105      	bne.n	40a2 <_free_r+0xb2>
    4096:	60f1      	str	r1, [r6, #12]
    4098:	60b1      	str	r1, [r6, #8]
    409a:	9701      	str	r7, [sp, #4]
    409c:	60ce      	str	r6, [r1, #12]
    409e:	608e      	str	r6, [r1, #8]
    40a0:	e002      	b.n	40a8 <_free_r+0xb8>
    40a2:	68c0      	ldr	r0, [r0, #12]
    40a4:	60f0      	str	r0, [r6, #12]
    40a6:	6086      	str	r6, [r0, #8]
    40a8:	2001      	movs	r0, #1
    40aa:	1c06      	adds	r6, r0, #0
    40ac:	9d01      	ldr	r5, [sp, #4]
    40ae:	431e      	orrs	r6, r3
    40b0:	604e      	str	r6, [r1, #4]
    40b2:	50cb      	str	r3, [r1, r3]
    40b4:	2d00      	cmp	r5, #0
    40b6:	d1ca      	bne.n	404e <_free_r+0x5e>
    40b8:	4d2a      	ldr	r5, [pc, #168]	; (4164 <_free_r+0x174>)
    40ba:	42ab      	cmp	r3, r5
    40bc:	d80d      	bhi.n	40da <_free_r+0xea>
    40be:	08db      	lsrs	r3, r3, #3
    40c0:	109d      	asrs	r5, r3, #2
    40c2:	40a8      	lsls	r0, r5
    40c4:	6855      	ldr	r5, [r2, #4]
    40c6:	00db      	lsls	r3, r3, #3
    40c8:	4328      	orrs	r0, r5
    40ca:	6050      	str	r0, [r2, #4]
    40cc:	18d2      	adds	r2, r2, r3
    40ce:	6893      	ldr	r3, [r2, #8]
    40d0:	60ca      	str	r2, [r1, #12]
    40d2:	608b      	str	r3, [r1, #8]
    40d4:	6091      	str	r1, [r2, #8]
    40d6:	60d9      	str	r1, [r3, #12]
    40d8:	e7b9      	b.n	404e <_free_r+0x5e>
    40da:	0a5d      	lsrs	r5, r3, #9
    40dc:	2d04      	cmp	r5, #4
    40de:	d802      	bhi.n	40e6 <_free_r+0xf6>
    40e0:	0998      	lsrs	r0, r3, #6
    40e2:	3038      	adds	r0, #56	; 0x38
    40e4:	e016      	b.n	4114 <_free_r+0x124>
    40e6:	2d14      	cmp	r5, #20
    40e8:	d802      	bhi.n	40f0 <_free_r+0x100>
    40ea:	1c28      	adds	r0, r5, #0
    40ec:	305b      	adds	r0, #91	; 0x5b
    40ee:	e011      	b.n	4114 <_free_r+0x124>
    40f0:	2d54      	cmp	r5, #84	; 0x54
    40f2:	d802      	bhi.n	40fa <_free_r+0x10a>
    40f4:	0b18      	lsrs	r0, r3, #12
    40f6:	306e      	adds	r0, #110	; 0x6e
    40f8:	e00c      	b.n	4114 <_free_r+0x124>
    40fa:	20aa      	movs	r0, #170	; 0xaa
    40fc:	0040      	lsls	r0, r0, #1
    40fe:	4285      	cmp	r5, r0
    4100:	d802      	bhi.n	4108 <_free_r+0x118>
    4102:	0bd8      	lsrs	r0, r3, #15
    4104:	3077      	adds	r0, #119	; 0x77
    4106:	e005      	b.n	4114 <_free_r+0x124>
    4108:	4e17      	ldr	r6, [pc, #92]	; (4168 <_free_r+0x178>)
    410a:	207e      	movs	r0, #126	; 0x7e
    410c:	42b5      	cmp	r5, r6
    410e:	d801      	bhi.n	4114 <_free_r+0x124>
    4110:	0c98      	lsrs	r0, r3, #18
    4112:	307c      	adds	r0, #124	; 0x7c
    4114:	00c6      	lsls	r6, r0, #3
    4116:	1996      	adds	r6, r2, r6
    4118:	68b5      	ldr	r5, [r6, #8]
    411a:	42b5      	cmp	r5, r6
    411c:	d001      	beq.n	4122 <_free_r+0x132>
    411e:	1c2a      	adds	r2, r5, #0
    4120:	e00b      	b.n	413a <_free_r+0x14a>
    4122:	1080      	asrs	r0, r0, #2
    4124:	2301      	movs	r3, #1
    4126:	4083      	lsls	r3, r0
    4128:	1c18      	adds	r0, r3, #0
    412a:	6853      	ldr	r3, [r2, #4]
    412c:	4318      	orrs	r0, r3
    412e:	6050      	str	r0, [r2, #4]
    4130:	1c2a      	adds	r2, r5, #0
    4132:	e008      	b.n	4146 <_free_r+0x156>
    4134:	6892      	ldr	r2, [r2, #8]
    4136:	42b2      	cmp	r2, r6
    4138:	d004      	beq.n	4144 <_free_r+0x154>
    413a:	6855      	ldr	r5, [r2, #4]
    413c:	2003      	movs	r0, #3
    413e:	4385      	bics	r5, r0
    4140:	42ab      	cmp	r3, r5
    4142:	d3f7      	bcc.n	4134 <_free_r+0x144>
    4144:	68d5      	ldr	r5, [r2, #12]
    4146:	60cd      	str	r5, [r1, #12]
    4148:	608a      	str	r2, [r1, #8]
    414a:	60a9      	str	r1, [r5, #8]
    414c:	60d1      	str	r1, [r2, #12]
    414e:	e77e      	b.n	404e <_free_r+0x5e>
    4150:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    4152:	46c0      	nop			; (mov r8, r8)
    4154:	200004b4 	.word	0x200004b4
    4158:	200008c0 	.word	0x200008c0
    415c:	20000924 	.word	0x20000924
    4160:	200004bc 	.word	0x200004bc
    4164:	000001ff 	.word	0x000001ff
    4168:	00000554 	.word	0x00000554

0000416c <_setlocale_r>:
    416c:	b538      	push	{r3, r4, r5, lr}
    416e:	1c14      	adds	r4, r2, #0
    4170:	4d0c      	ldr	r5, [pc, #48]	; (41a4 <_setlocale_r+0x38>)
    4172:	d101      	bne.n	4178 <_setlocale_r+0xc>
    4174:	1c28      	adds	r0, r5, #0
    4176:	e013      	b.n	41a0 <_setlocale_r+0x34>
    4178:	1c10      	adds	r0, r2, #0
    417a:	490b      	ldr	r1, [pc, #44]	; (41a8 <_setlocale_r+0x3c>)
    417c:	f000 fe70 	bl	4e60 <strcmp>
    4180:	2800      	cmp	r0, #0
    4182:	d0f7      	beq.n	4174 <_setlocale_r+0x8>
    4184:	1c20      	adds	r0, r4, #0
    4186:	1c29      	adds	r1, r5, #0
    4188:	f000 fe6a 	bl	4e60 <strcmp>
    418c:	2800      	cmp	r0, #0
    418e:	d0f1      	beq.n	4174 <_setlocale_r+0x8>
    4190:	1c20      	adds	r0, r4, #0
    4192:	4906      	ldr	r1, [pc, #24]	; (41ac <_setlocale_r+0x40>)
    4194:	f000 fe64 	bl	4e60 <strcmp>
    4198:	4243      	negs	r3, r0
    419a:	4158      	adcs	r0, r3
    419c:	4240      	negs	r0, r0
    419e:	4028      	ands	r0, r5
    41a0:	bd38      	pop	{r3, r4, r5, pc}
    41a2:	46c0      	nop			; (mov r8, r8)
    41a4:	00007a78 	.word	0x00007a78
    41a8:	00007adb 	.word	0x00007adb
    41ac:	00007ae2 	.word	0x00007ae2

000041b0 <__locale_charset>:
    41b0:	4800      	ldr	r0, [pc, #0]	; (41b4 <__locale_charset+0x4>)
    41b2:	4770      	bx	lr
    41b4:	20000438 	.word	0x20000438

000041b8 <__locale_mb_cur_max>:
    41b8:	4b01      	ldr	r3, [pc, #4]	; (41c0 <__locale_mb_cur_max+0x8>)
    41ba:	6a18      	ldr	r0, [r3, #32]
    41bc:	4770      	bx	lr
    41be:	46c0      	nop			; (mov r8, r8)
    41c0:	20000438 	.word	0x20000438

000041c4 <__locale_msgcharset>:
    41c4:	4801      	ldr	r0, [pc, #4]	; (41cc <__locale_msgcharset+0x8>)
    41c6:	3024      	adds	r0, #36	; 0x24
    41c8:	4770      	bx	lr
    41ca:	46c0      	nop			; (mov r8, r8)
    41cc:	20000438 	.word	0x20000438

000041d0 <__locale_cjk_lang>:
    41d0:	2000      	movs	r0, #0
    41d2:	4770      	bx	lr

000041d4 <_localeconv_r>:
    41d4:	4801      	ldr	r0, [pc, #4]	; (41dc <_localeconv_r+0x8>)
    41d6:	3044      	adds	r0, #68	; 0x44
    41d8:	4770      	bx	lr
    41da:	46c0      	nop			; (mov r8, r8)
    41dc:	20000438 	.word	0x20000438

000041e0 <setlocale>:
    41e0:	b508      	push	{r3, lr}
    41e2:	1c0a      	adds	r2, r1, #0
    41e4:	4903      	ldr	r1, [pc, #12]	; (41f4 <setlocale+0x14>)
    41e6:	1c03      	adds	r3, r0, #0
    41e8:	6808      	ldr	r0, [r1, #0]
    41ea:	1c19      	adds	r1, r3, #0
    41ec:	f7ff ffbe 	bl	416c <_setlocale_r>
    41f0:	bd08      	pop	{r3, pc}
    41f2:	46c0      	nop			; (mov r8, r8)
    41f4:	20000008 	.word	0x20000008

000041f8 <localeconv>:
    41f8:	4801      	ldr	r0, [pc, #4]	; (4200 <localeconv+0x8>)
    41fa:	3044      	adds	r0, #68	; 0x44
    41fc:	4770      	bx	lr
    41fe:	46c0      	nop			; (mov r8, r8)
    4200:	20000438 	.word	0x20000438

00004204 <_malloc_r>:
    4204:	b5f0      	push	{r4, r5, r6, r7, lr}
    4206:	1c0b      	adds	r3, r1, #0
    4208:	b087      	sub	sp, #28
    420a:	330b      	adds	r3, #11
    420c:	9003      	str	r0, [sp, #12]
    420e:	2b16      	cmp	r3, #22
    4210:	d904      	bls.n	421c <_malloc_r+0x18>
    4212:	2207      	movs	r2, #7
    4214:	4393      	bics	r3, r2
    4216:	9301      	str	r3, [sp, #4]
    4218:	d502      	bpl.n	4220 <_malloc_r+0x1c>
    421a:	e004      	b.n	4226 <_malloc_r+0x22>
    421c:	2410      	movs	r4, #16
    421e:	9401      	str	r4, [sp, #4]
    4220:	9d01      	ldr	r5, [sp, #4]
    4222:	428d      	cmp	r5, r1
    4224:	d203      	bcs.n	422e <_malloc_r+0x2a>
    4226:	9e03      	ldr	r6, [sp, #12]
    4228:	230c      	movs	r3, #12
    422a:	6033      	str	r3, [r6, #0]
    422c:	e1ca      	b.n	45c4 <_malloc_r+0x3c0>
    422e:	9803      	ldr	r0, [sp, #12]
    4230:	f000 f9eb 	bl	460a <__malloc_lock>
    4234:	23f8      	movs	r3, #248	; 0xf8
    4236:	9f01      	ldr	r7, [sp, #4]
    4238:	33ff      	adds	r3, #255	; 0xff
    423a:	4cb0      	ldr	r4, [pc, #704]	; (44fc <_malloc_r+0x2f8>)
    423c:	429f      	cmp	r7, r3
    423e:	d817      	bhi.n	4270 <_malloc_r+0x6c>
    4240:	08fa      	lsrs	r2, r7, #3
    4242:	00d3      	lsls	r3, r2, #3
    4244:	18e3      	adds	r3, r4, r3
    4246:	68dd      	ldr	r5, [r3, #12]
    4248:	429d      	cmp	r5, r3
    424a:	d105      	bne.n	4258 <_malloc_r+0x54>
    424c:	1c2b      	adds	r3, r5, #0
    424e:	696d      	ldr	r5, [r5, #20]
    4250:	3308      	adds	r3, #8
    4252:	3202      	adds	r2, #2
    4254:	429d      	cmp	r5, r3
    4256:	d04a      	beq.n	42ee <_malloc_r+0xea>
    4258:	6868      	ldr	r0, [r5, #4]
    425a:	2303      	movs	r3, #3
    425c:	68ea      	ldr	r2, [r5, #12]
    425e:	68a9      	ldr	r1, [r5, #8]
    4260:	4398      	bics	r0, r3
    4262:	182b      	adds	r3, r5, r0
    4264:	60ca      	str	r2, [r1, #12]
    4266:	6091      	str	r1, [r2, #8]
    4268:	6859      	ldr	r1, [r3, #4]
    426a:	2201      	movs	r2, #1
    426c:	430a      	orrs	r2, r1
    426e:	e05c      	b.n	432a <_malloc_r+0x126>
    4270:	9d01      	ldr	r5, [sp, #4]
    4272:	223f      	movs	r2, #63	; 0x3f
    4274:	0a6b      	lsrs	r3, r5, #9
    4276:	d01e      	beq.n	42b6 <_malloc_r+0xb2>
    4278:	2b04      	cmp	r3, #4
    427a:	d802      	bhi.n	4282 <_malloc_r+0x7e>
    427c:	09aa      	lsrs	r2, r5, #6
    427e:	3238      	adds	r2, #56	; 0x38
    4280:	e019      	b.n	42b6 <_malloc_r+0xb2>
    4282:	2b14      	cmp	r3, #20
    4284:	d802      	bhi.n	428c <_malloc_r+0x88>
    4286:	1c1a      	adds	r2, r3, #0
    4288:	325b      	adds	r2, #91	; 0x5b
    428a:	e014      	b.n	42b6 <_malloc_r+0xb2>
    428c:	2b54      	cmp	r3, #84	; 0x54
    428e:	d803      	bhi.n	4298 <_malloc_r+0x94>
    4290:	9e01      	ldr	r6, [sp, #4]
    4292:	0b32      	lsrs	r2, r6, #12
    4294:	326e      	adds	r2, #110	; 0x6e
    4296:	e00e      	b.n	42b6 <_malloc_r+0xb2>
    4298:	22aa      	movs	r2, #170	; 0xaa
    429a:	0052      	lsls	r2, r2, #1
    429c:	4293      	cmp	r3, r2
    429e:	d803      	bhi.n	42a8 <_malloc_r+0xa4>
    42a0:	9f01      	ldr	r7, [sp, #4]
    42a2:	0bfa      	lsrs	r2, r7, #15
    42a4:	3277      	adds	r2, #119	; 0x77
    42a6:	e006      	b.n	42b6 <_malloc_r+0xb2>
    42a8:	4995      	ldr	r1, [pc, #596]	; (4500 <_malloc_r+0x2fc>)
    42aa:	227e      	movs	r2, #126	; 0x7e
    42ac:	428b      	cmp	r3, r1
    42ae:	d802      	bhi.n	42b6 <_malloc_r+0xb2>
    42b0:	9d01      	ldr	r5, [sp, #4]
    42b2:	0caa      	lsrs	r2, r5, #18
    42b4:	327c      	adds	r2, #124	; 0x7c
    42b6:	00d3      	lsls	r3, r2, #3
    42b8:	18e3      	adds	r3, r4, r3
    42ba:	68dd      	ldr	r5, [r3, #12]
    42bc:	429d      	cmp	r5, r3
    42be:	d015      	beq.n	42ec <_malloc_r+0xe8>
    42c0:	686e      	ldr	r6, [r5, #4]
    42c2:	2103      	movs	r1, #3
    42c4:	9f01      	ldr	r7, [sp, #4]
    42c6:	438e      	bics	r6, r1
    42c8:	1bf0      	subs	r0, r6, r7
    42ca:	280f      	cmp	r0, #15
    42cc:	dd01      	ble.n	42d2 <_malloc_r+0xce>
    42ce:	3a01      	subs	r2, #1
    42d0:	e00c      	b.n	42ec <_malloc_r+0xe8>
    42d2:	2800      	cmp	r0, #0
    42d4:	db08      	blt.n	42e8 <_malloc_r+0xe4>
    42d6:	68eb      	ldr	r3, [r5, #12]
    42d8:	68aa      	ldr	r2, [r5, #8]
    42da:	60d3      	str	r3, [r2, #12]
    42dc:	609a      	str	r2, [r3, #8]
    42de:	19ab      	adds	r3, r5, r6
    42e0:	6858      	ldr	r0, [r3, #4]
    42e2:	2201      	movs	r2, #1
    42e4:	4302      	orrs	r2, r0
    42e6:	e020      	b.n	432a <_malloc_r+0x126>
    42e8:	68ed      	ldr	r5, [r5, #12]
    42ea:	e7e7      	b.n	42bc <_malloc_r+0xb8>
    42ec:	3201      	adds	r2, #1
    42ee:	1c20      	adds	r0, r4, #0
    42f0:	6925      	ldr	r5, [r4, #16]
    42f2:	3008      	adds	r0, #8
    42f4:	4285      	cmp	r5, r0
    42f6:	d061      	beq.n	43bc <_malloc_r+0x1b8>
    42f8:	6869      	ldr	r1, [r5, #4]
    42fa:	2303      	movs	r3, #3
    42fc:	9e01      	ldr	r6, [sp, #4]
    42fe:	4399      	bics	r1, r3
    4300:	1c0b      	adds	r3, r1, #0
    4302:	1b89      	subs	r1, r1, r6
    4304:	290f      	cmp	r1, #15
    4306:	dd08      	ble.n	431a <_malloc_r+0x116>
    4308:	2201      	movs	r2, #1
    430a:	19ab      	adds	r3, r5, r6
    430c:	4316      	orrs	r6, r2
    430e:	606e      	str	r6, [r5, #4]
    4310:	6163      	str	r3, [r4, #20]
    4312:	6123      	str	r3, [r4, #16]
    4314:	60d8      	str	r0, [r3, #12]
    4316:	6098      	str	r0, [r3, #8]
    4318:	e07f      	b.n	441a <_malloc_r+0x216>
    431a:	6160      	str	r0, [r4, #20]
    431c:	6120      	str	r0, [r4, #16]
    431e:	2900      	cmp	r1, #0
    4320:	db05      	blt.n	432e <_malloc_r+0x12a>
    4322:	18eb      	adds	r3, r5, r3
    4324:	685f      	ldr	r7, [r3, #4]
    4326:	2201      	movs	r2, #1
    4328:	433a      	orrs	r2, r7
    432a:	605a      	str	r2, [r3, #4]
    432c:	e157      	b.n	45de <_malloc_r+0x3da>
    432e:	4975      	ldr	r1, [pc, #468]	; (4504 <_malloc_r+0x300>)
    4330:	428b      	cmp	r3, r1
    4332:	d80b      	bhi.n	434c <_malloc_r+0x148>
    4334:	08db      	lsrs	r3, r3, #3
    4336:	1099      	asrs	r1, r3, #2
    4338:	2001      	movs	r0, #1
    433a:	4088      	lsls	r0, r1
    433c:	1c01      	adds	r1, r0, #0
    433e:	6860      	ldr	r0, [r4, #4]
    4340:	00db      	lsls	r3, r3, #3
    4342:	4301      	orrs	r1, r0
    4344:	18e3      	adds	r3, r4, r3
    4346:	6061      	str	r1, [r4, #4]
    4348:	6899      	ldr	r1, [r3, #8]
    434a:	e033      	b.n	43b4 <_malloc_r+0x1b0>
    434c:	0a59      	lsrs	r1, r3, #9
    434e:	2904      	cmp	r1, #4
    4350:	d802      	bhi.n	4358 <_malloc_r+0x154>
    4352:	0998      	lsrs	r0, r3, #6
    4354:	3038      	adds	r0, #56	; 0x38
    4356:	e016      	b.n	4386 <_malloc_r+0x182>
    4358:	2914      	cmp	r1, #20
    435a:	d802      	bhi.n	4362 <_malloc_r+0x15e>
    435c:	1c08      	adds	r0, r1, #0
    435e:	305b      	adds	r0, #91	; 0x5b
    4360:	e011      	b.n	4386 <_malloc_r+0x182>
    4362:	2954      	cmp	r1, #84	; 0x54
    4364:	d802      	bhi.n	436c <_malloc_r+0x168>
    4366:	0b18      	lsrs	r0, r3, #12
    4368:	306e      	adds	r0, #110	; 0x6e
    436a:	e00c      	b.n	4386 <_malloc_r+0x182>
    436c:	20aa      	movs	r0, #170	; 0xaa
    436e:	0040      	lsls	r0, r0, #1
    4370:	4281      	cmp	r1, r0
    4372:	d802      	bhi.n	437a <_malloc_r+0x176>
    4374:	0bd8      	lsrs	r0, r3, #15
    4376:	3077      	adds	r0, #119	; 0x77
    4378:	e005      	b.n	4386 <_malloc_r+0x182>
    437a:	4e61      	ldr	r6, [pc, #388]	; (4500 <_malloc_r+0x2fc>)
    437c:	207e      	movs	r0, #126	; 0x7e
    437e:	42b1      	cmp	r1, r6
    4380:	d801      	bhi.n	4386 <_malloc_r+0x182>
    4382:	0c98      	lsrs	r0, r3, #18
    4384:	307c      	adds	r0, #124	; 0x7c
    4386:	00c6      	lsls	r6, r0, #3
    4388:	19a6      	adds	r6, r4, r6
    438a:	68b1      	ldr	r1, [r6, #8]
    438c:	42b1      	cmp	r1, r6
    438e:	d10b      	bne.n	43a8 <_malloc_r+0x1a4>
    4390:	1080      	asrs	r0, r0, #2
    4392:	2301      	movs	r3, #1
    4394:	4083      	lsls	r3, r0
    4396:	1c18      	adds	r0, r3, #0
    4398:	6863      	ldr	r3, [r4, #4]
    439a:	4318      	orrs	r0, r3
    439c:	6060      	str	r0, [r4, #4]
    439e:	1c0b      	adds	r3, r1, #0
    43a0:	e008      	b.n	43b4 <_malloc_r+0x1b0>
    43a2:	6889      	ldr	r1, [r1, #8]
    43a4:	42b1      	cmp	r1, r6
    43a6:	d004      	beq.n	43b2 <_malloc_r+0x1ae>
    43a8:	684f      	ldr	r7, [r1, #4]
    43aa:	2003      	movs	r0, #3
    43ac:	4387      	bics	r7, r0
    43ae:	42bb      	cmp	r3, r7
    43b0:	d3f7      	bcc.n	43a2 <_malloc_r+0x19e>
    43b2:	68cb      	ldr	r3, [r1, #12]
    43b4:	60eb      	str	r3, [r5, #12]
    43b6:	60a9      	str	r1, [r5, #8]
    43b8:	609d      	str	r5, [r3, #8]
    43ba:	60cd      	str	r5, [r1, #12]
    43bc:	1093      	asrs	r3, r2, #2
    43be:	2101      	movs	r1, #1
    43c0:	4099      	lsls	r1, r3
    43c2:	1c0b      	adds	r3, r1, #0
    43c4:	6861      	ldr	r1, [r4, #4]
    43c6:	428b      	cmp	r3, r1
    43c8:	d857      	bhi.n	447a <_malloc_r+0x276>
    43ca:	4219      	tst	r1, r3
    43cc:	d105      	bne.n	43da <_malloc_r+0x1d6>
    43ce:	2003      	movs	r0, #3
    43d0:	4382      	bics	r2, r0
    43d2:	005b      	lsls	r3, r3, #1
    43d4:	3204      	adds	r2, #4
    43d6:	4219      	tst	r1, r3
    43d8:	d0fb      	beq.n	43d2 <_malloc_r+0x1ce>
    43da:	00d7      	lsls	r7, r2, #3
    43dc:	19e7      	adds	r7, r4, r7
    43de:	9704      	str	r7, [sp, #16]
    43e0:	1c38      	adds	r0, r7, #0
    43e2:	4694      	mov	ip, r2
    43e4:	68c5      	ldr	r5, [r0, #12]
    43e6:	e000      	b.n	43ea <_malloc_r+0x1e6>
    43e8:	68ed      	ldr	r5, [r5, #12]
    43ea:	2103      	movs	r1, #3
    43ec:	4285      	cmp	r5, r0
    43ee:	d025      	beq.n	443c <_malloc_r+0x238>
    43f0:	686e      	ldr	r6, [r5, #4]
    43f2:	9f01      	ldr	r7, [sp, #4]
    43f4:	438e      	bics	r6, r1
    43f6:	9602      	str	r6, [sp, #8]
    43f8:	1bf1      	subs	r1, r6, r7
    43fa:	290f      	cmp	r1, #15
    43fc:	dd11      	ble.n	4422 <_malloc_r+0x21e>
    43fe:	2201      	movs	r2, #1
    4400:	1c38      	adds	r0, r7, #0
    4402:	4310      	orrs	r0, r2
    4404:	6068      	str	r0, [r5, #4]
    4406:	68ae      	ldr	r6, [r5, #8]
    4408:	68e8      	ldr	r0, [r5, #12]
    440a:	19eb      	adds	r3, r5, r7
    440c:	60f0      	str	r0, [r6, #12]
    440e:	3408      	adds	r4, #8
    4410:	6086      	str	r6, [r0, #8]
    4412:	60e3      	str	r3, [r4, #12]
    4414:	60a3      	str	r3, [r4, #8]
    4416:	60dc      	str	r4, [r3, #12]
    4418:	609c      	str	r4, [r3, #8]
    441a:	430a      	orrs	r2, r1
    441c:	605a      	str	r2, [r3, #4]
    441e:	5059      	str	r1, [r3, r1]
    4420:	e0dd      	b.n	45de <_malloc_r+0x3da>
    4422:	2900      	cmp	r1, #0
    4424:	dbe0      	blt.n	43e8 <_malloc_r+0x1e4>
    4426:	9802      	ldr	r0, [sp, #8]
    4428:	2301      	movs	r3, #1
    442a:	182e      	adds	r6, r5, r0
    442c:	6871      	ldr	r1, [r6, #4]
    442e:	68aa      	ldr	r2, [r5, #8]
    4430:	430b      	orrs	r3, r1
    4432:	6073      	str	r3, [r6, #4]
    4434:	68eb      	ldr	r3, [r5, #12]
    4436:	60d3      	str	r3, [r2, #12]
    4438:	609a      	str	r2, [r3, #8]
    443a:	e0d0      	b.n	45de <_malloc_r+0x3da>
    443c:	2501      	movs	r5, #1
    443e:	44ac      	add	ip, r5
    4440:	4666      	mov	r6, ip
    4442:	3008      	adds	r0, #8
    4444:	420e      	tst	r6, r1
    4446:	d1cd      	bne.n	43e4 <_malloc_r+0x1e0>
    4448:	0797      	lsls	r7, r2, #30
    444a:	d103      	bne.n	4454 <_malloc_r+0x250>
    444c:	6862      	ldr	r2, [r4, #4]
    444e:	439a      	bics	r2, r3
    4450:	6062      	str	r2, [r4, #4]
    4452:	e006      	b.n	4462 <_malloc_r+0x25e>
    4454:	9904      	ldr	r1, [sp, #16]
    4456:	3a01      	subs	r2, #1
    4458:	6808      	ldr	r0, [r1, #0]
    445a:	3908      	subs	r1, #8
    445c:	9004      	str	r0, [sp, #16]
    445e:	4288      	cmp	r0, r1
    4460:	d0f2      	beq.n	4448 <_malloc_r+0x244>
    4462:	6861      	ldr	r1, [r4, #4]
    4464:	005b      	lsls	r3, r3, #1
    4466:	428b      	cmp	r3, r1
    4468:	d807      	bhi.n	447a <_malloc_r+0x276>
    446a:	2b00      	cmp	r3, #0
    446c:	d005      	beq.n	447a <_malloc_r+0x276>
    446e:	4662      	mov	r2, ip
    4470:	4219      	tst	r1, r3
    4472:	d1b2      	bne.n	43da <_malloc_r+0x1d6>
    4474:	3204      	adds	r2, #4
    4476:	005b      	lsls	r3, r3, #1
    4478:	e7fa      	b.n	4470 <_malloc_r+0x26c>
    447a:	68a6      	ldr	r6, [r4, #8]
    447c:	2303      	movs	r3, #3
    447e:	6871      	ldr	r1, [r6, #4]
    4480:	9d01      	ldr	r5, [sp, #4]
    4482:	4399      	bics	r1, r3
    4484:	9102      	str	r1, [sp, #8]
    4486:	42a9      	cmp	r1, r5
    4488:	d303      	bcc.n	4492 <_malloc_r+0x28e>
    448a:	1b4b      	subs	r3, r1, r5
    448c:	2b0f      	cmp	r3, #15
    448e:	dd00      	ble.n	4492 <_malloc_r+0x28e>
    4490:	e09a      	b.n	45c8 <_malloc_r+0x3c4>
    4492:	9f02      	ldr	r7, [sp, #8]
    4494:	4a1c      	ldr	r2, [pc, #112]	; (4508 <_malloc_r+0x304>)
    4496:	19f7      	adds	r7, r6, r7
    4498:	9705      	str	r7, [sp, #20]
    449a:	4f1c      	ldr	r7, [pc, #112]	; (450c <_malloc_r+0x308>)
    449c:	9d01      	ldr	r5, [sp, #4]
    449e:	6838      	ldr	r0, [r7, #0]
    44a0:	6892      	ldr	r2, [r2, #8]
    44a2:	182b      	adds	r3, r5, r0
    44a4:	3201      	adds	r2, #1
    44a6:	d101      	bne.n	44ac <_malloc_r+0x2a8>
    44a8:	3310      	adds	r3, #16
    44aa:	e003      	b.n	44b4 <_malloc_r+0x2b0>
    44ac:	4918      	ldr	r1, [pc, #96]	; (4510 <_malloc_r+0x30c>)
    44ae:	185b      	adds	r3, r3, r1
    44b0:	0b1b      	lsrs	r3, r3, #12
    44b2:	031b      	lsls	r3, r3, #12
    44b4:	9304      	str	r3, [sp, #16]
    44b6:	9803      	ldr	r0, [sp, #12]
    44b8:	9904      	ldr	r1, [sp, #16]
    44ba:	f000 fcbf 	bl	4e3c <_sbrk_r>
    44be:	1c05      	adds	r5, r0, #0
    44c0:	1c42      	adds	r2, r0, #1
    44c2:	d071      	beq.n	45a8 <_malloc_r+0x3a4>
    44c4:	9b05      	ldr	r3, [sp, #20]
    44c6:	4298      	cmp	r0, r3
    44c8:	d201      	bcs.n	44ce <_malloc_r+0x2ca>
    44ca:	42a6      	cmp	r6, r4
    44cc:	d16c      	bne.n	45a8 <_malloc_r+0x3a4>
    44ce:	6879      	ldr	r1, [r7, #4]
    44d0:	9804      	ldr	r0, [sp, #16]
    44d2:	1843      	adds	r3, r0, r1
    44d4:	607b      	str	r3, [r7, #4]
    44d6:	9f05      	ldr	r7, [sp, #20]
    44d8:	42bd      	cmp	r5, r7
    44da:	d108      	bne.n	44ee <_malloc_r+0x2ea>
    44dc:	052a      	lsls	r2, r5, #20
    44de:	d106      	bne.n	44ee <_malloc_r+0x2ea>
    44e0:	9d02      	ldr	r5, [sp, #8]
    44e2:	68a3      	ldr	r3, [r4, #8]
    44e4:	2201      	movs	r2, #1
    44e6:	1944      	adds	r4, r0, r5
    44e8:	4314      	orrs	r4, r2
    44ea:	605c      	str	r4, [r3, #4]
    44ec:	e052      	b.n	4594 <_malloc_r+0x390>
    44ee:	4a06      	ldr	r2, [pc, #24]	; (4508 <_malloc_r+0x304>)
    44f0:	4f06      	ldr	r7, [pc, #24]	; (450c <_malloc_r+0x308>)
    44f2:	6890      	ldr	r0, [r2, #8]
    44f4:	3001      	adds	r0, #1
    44f6:	d10d      	bne.n	4514 <_malloc_r+0x310>
    44f8:	6095      	str	r5, [r2, #8]
    44fa:	e00f      	b.n	451c <_malloc_r+0x318>
    44fc:	200004b4 	.word	0x200004b4
    4500:	00000554 	.word	0x00000554
    4504:	000001ff 	.word	0x000001ff
    4508:	200008b4 	.word	0x200008b4
    450c:	20000924 	.word	0x20000924
    4510:	0000100f 	.word	0x0000100f
    4514:	9c05      	ldr	r4, [sp, #20]
    4516:	1b2a      	subs	r2, r5, r4
    4518:	189b      	adds	r3, r3, r2
    451a:	607b      	str	r3, [r7, #4]
    451c:	2307      	movs	r3, #7
    451e:	2400      	movs	r4, #0
    4520:	402b      	ands	r3, r5
    4522:	42a3      	cmp	r3, r4
    4524:	d002      	beq.n	452c <_malloc_r+0x328>
    4526:	2408      	movs	r4, #8
    4528:	1ae4      	subs	r4, r4, r3
    452a:	192d      	adds	r5, r5, r4
    452c:	9904      	ldr	r1, [sp, #16]
    452e:	2080      	movs	r0, #128	; 0x80
    4530:	186b      	adds	r3, r5, r1
    4532:	0140      	lsls	r0, r0, #5
    4534:	051b      	lsls	r3, r3, #20
    4536:	1824      	adds	r4, r4, r0
    4538:	0d1b      	lsrs	r3, r3, #20
    453a:	1ae4      	subs	r4, r4, r3
    453c:	9803      	ldr	r0, [sp, #12]
    453e:	1c21      	adds	r1, r4, #0
    4540:	f000 fc7c 	bl	4e3c <_sbrk_r>
    4544:	1c42      	adds	r2, r0, #1
    4546:	d101      	bne.n	454c <_malloc_r+0x348>
    4548:	1c28      	adds	r0, r5, #0
    454a:	2400      	movs	r4, #0
    454c:	6879      	ldr	r1, [r7, #4]
    454e:	1b40      	subs	r0, r0, r5
    4550:	1863      	adds	r3, r4, r1
    4552:	607b      	str	r3, [r7, #4]
    4554:	1904      	adds	r4, r0, r4
    4556:	4b25      	ldr	r3, [pc, #148]	; (45ec <_malloc_r+0x3e8>)
    4558:	2201      	movs	r2, #1
    455a:	4314      	orrs	r4, r2
    455c:	609d      	str	r5, [r3, #8]
    455e:	606c      	str	r4, [r5, #4]
    4560:	429e      	cmp	r6, r3
    4562:	d017      	beq.n	4594 <_malloc_r+0x390>
    4564:	9c02      	ldr	r4, [sp, #8]
    4566:	2c0f      	cmp	r4, #15
    4568:	d801      	bhi.n	456e <_malloc_r+0x36a>
    456a:	606a      	str	r2, [r5, #4]
    456c:	e01c      	b.n	45a8 <_malloc_r+0x3a4>
    456e:	9b02      	ldr	r3, [sp, #8]
    4570:	6875      	ldr	r5, [r6, #4]
    4572:	2107      	movs	r1, #7
    4574:	3b0c      	subs	r3, #12
    4576:	438b      	bics	r3, r1
    4578:	402a      	ands	r2, r5
    457a:	431a      	orrs	r2, r3
    457c:	6072      	str	r2, [r6, #4]
    457e:	2105      	movs	r1, #5
    4580:	18f2      	adds	r2, r6, r3
    4582:	6051      	str	r1, [r2, #4]
    4584:	6091      	str	r1, [r2, #8]
    4586:	2b0f      	cmp	r3, #15
    4588:	d904      	bls.n	4594 <_malloc_r+0x390>
    458a:	1c31      	adds	r1, r6, #0
    458c:	3108      	adds	r1, #8
    458e:	9803      	ldr	r0, [sp, #12]
    4590:	f7ff fd2e 	bl	3ff0 <_free_r>
    4594:	4a16      	ldr	r2, [pc, #88]	; (45f0 <_malloc_r+0x3ec>)
    4596:	6853      	ldr	r3, [r2, #4]
    4598:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    459a:	428b      	cmp	r3, r1
    459c:	d900      	bls.n	45a0 <_malloc_r+0x39c>
    459e:	62d3      	str	r3, [r2, #44]	; 0x2c
    45a0:	6b16      	ldr	r6, [r2, #48]	; 0x30
    45a2:	42b3      	cmp	r3, r6
    45a4:	d900      	bls.n	45a8 <_malloc_r+0x3a4>
    45a6:	6313      	str	r3, [r2, #48]	; 0x30
    45a8:	4b10      	ldr	r3, [pc, #64]	; (45ec <_malloc_r+0x3e8>)
    45aa:	9f01      	ldr	r7, [sp, #4]
    45ac:	689b      	ldr	r3, [r3, #8]
    45ae:	685a      	ldr	r2, [r3, #4]
    45b0:	2303      	movs	r3, #3
    45b2:	439a      	bics	r2, r3
    45b4:	1bd3      	subs	r3, r2, r7
    45b6:	42ba      	cmp	r2, r7
    45b8:	d301      	bcc.n	45be <_malloc_r+0x3ba>
    45ba:	2b0f      	cmp	r3, #15
    45bc:	dc04      	bgt.n	45c8 <_malloc_r+0x3c4>
    45be:	9803      	ldr	r0, [sp, #12]
    45c0:	f000 f824 	bl	460c <__malloc_unlock>
    45c4:	2000      	movs	r0, #0
    45c6:	e00f      	b.n	45e8 <_malloc_r+0x3e4>
    45c8:	4808      	ldr	r0, [pc, #32]	; (45ec <_malloc_r+0x3e8>)
    45ca:	9a01      	ldr	r2, [sp, #4]
    45cc:	6885      	ldr	r5, [r0, #8]
    45ce:	2101      	movs	r1, #1
    45d0:	9c01      	ldr	r4, [sp, #4]
    45d2:	430a      	orrs	r2, r1
    45d4:	606a      	str	r2, [r5, #4]
    45d6:	430b      	orrs	r3, r1
    45d8:	192a      	adds	r2, r5, r4
    45da:	6082      	str	r2, [r0, #8]
    45dc:	6053      	str	r3, [r2, #4]
    45de:	9803      	ldr	r0, [sp, #12]
    45e0:	f000 f814 	bl	460c <__malloc_unlock>
    45e4:	1c28      	adds	r0, r5, #0
    45e6:	3008      	adds	r0, #8
    45e8:	b007      	add	sp, #28
    45ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    45ec:	200004b4 	.word	0x200004b4
    45f0:	20000924 	.word	0x20000924

000045f4 <memchr>:
    45f4:	b2c9      	uxtb	r1, r1
    45f6:	1882      	adds	r2, r0, r2
    45f8:	4290      	cmp	r0, r2
    45fa:	d004      	beq.n	4606 <memchr+0x12>
    45fc:	7803      	ldrb	r3, [r0, #0]
    45fe:	428b      	cmp	r3, r1
    4600:	d002      	beq.n	4608 <memchr+0x14>
    4602:	3001      	adds	r0, #1
    4604:	e7f8      	b.n	45f8 <memchr+0x4>
    4606:	2000      	movs	r0, #0
    4608:	4770      	bx	lr

0000460a <__malloc_lock>:
    460a:	4770      	bx	lr

0000460c <__malloc_unlock>:
    460c:	4770      	bx	lr
	...

00004610 <_Balloc>:
    4610:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    4612:	b570      	push	{r4, r5, r6, lr}
    4614:	1c04      	adds	r4, r0, #0
    4616:	1c0d      	adds	r5, r1, #0
    4618:	2b00      	cmp	r3, #0
    461a:	d008      	beq.n	462e <_Balloc+0x1e>
    461c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    461e:	00aa      	lsls	r2, r5, #2
    4620:	189a      	adds	r2, r3, r2
    4622:	6810      	ldr	r0, [r2, #0]
    4624:	2800      	cmp	r0, #0
    4626:	d00b      	beq.n	4640 <_Balloc+0x30>
    4628:	6803      	ldr	r3, [r0, #0]
    462a:	6013      	str	r3, [r2, #0]
    462c:	e014      	b.n	4658 <_Balloc+0x48>
    462e:	2104      	movs	r1, #4
    4630:	2221      	movs	r2, #33	; 0x21
    4632:	f001 f89d 	bl	5770 <_calloc_r>
    4636:	64e0      	str	r0, [r4, #76]	; 0x4c
    4638:	2800      	cmp	r0, #0
    463a:	d1ef      	bne.n	461c <_Balloc+0xc>
    463c:	2000      	movs	r0, #0
    463e:	e00e      	b.n	465e <_Balloc+0x4e>
    4640:	2101      	movs	r1, #1
    4642:	1c0e      	adds	r6, r1, #0
    4644:	40ae      	lsls	r6, r5
    4646:	1d72      	adds	r2, r6, #5
    4648:	0092      	lsls	r2, r2, #2
    464a:	1c20      	adds	r0, r4, #0
    464c:	f001 f890 	bl	5770 <_calloc_r>
    4650:	2800      	cmp	r0, #0
    4652:	d0f3      	beq.n	463c <_Balloc+0x2c>
    4654:	6045      	str	r5, [r0, #4]
    4656:	6086      	str	r6, [r0, #8]
    4658:	2200      	movs	r2, #0
    465a:	6102      	str	r2, [r0, #16]
    465c:	60c2      	str	r2, [r0, #12]
    465e:	bd70      	pop	{r4, r5, r6, pc}

00004660 <_Bfree>:
    4660:	2900      	cmp	r1, #0
    4662:	d006      	beq.n	4672 <_Bfree+0x12>
    4664:	684a      	ldr	r2, [r1, #4]
    4666:	0093      	lsls	r3, r2, #2
    4668:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
    466a:	18d3      	adds	r3, r2, r3
    466c:	681a      	ldr	r2, [r3, #0]
    466e:	600a      	str	r2, [r1, #0]
    4670:	6019      	str	r1, [r3, #0]
    4672:	4770      	bx	lr

00004674 <__multadd>:
    4674:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4676:	1c0c      	adds	r4, r1, #0
    4678:	1c1e      	adds	r6, r3, #0
    467a:	690d      	ldr	r5, [r1, #16]
    467c:	1c07      	adds	r7, r0, #0
    467e:	3114      	adds	r1, #20
    4680:	2300      	movs	r3, #0
    4682:	6808      	ldr	r0, [r1, #0]
    4684:	3301      	adds	r3, #1
    4686:	b280      	uxth	r0, r0
    4688:	4350      	muls	r0, r2
    468a:	1980      	adds	r0, r0, r6
    468c:	4684      	mov	ip, r0
    468e:	0c06      	lsrs	r6, r0, #16
    4690:	6808      	ldr	r0, [r1, #0]
    4692:	0c00      	lsrs	r0, r0, #16
    4694:	4350      	muls	r0, r2
    4696:	1830      	adds	r0, r6, r0
    4698:	0c06      	lsrs	r6, r0, #16
    469a:	0400      	lsls	r0, r0, #16
    469c:	9001      	str	r0, [sp, #4]
    469e:	4660      	mov	r0, ip
    46a0:	b280      	uxth	r0, r0
    46a2:	4684      	mov	ip, r0
    46a4:	9801      	ldr	r0, [sp, #4]
    46a6:	4484      	add	ip, r0
    46a8:	4660      	mov	r0, ip
    46aa:	c101      	stmia	r1!, {r0}
    46ac:	42ab      	cmp	r3, r5
    46ae:	dbe8      	blt.n	4682 <__multadd+0xe>
    46b0:	2e00      	cmp	r6, #0
    46b2:	d01b      	beq.n	46ec <__multadd+0x78>
    46b4:	68a3      	ldr	r3, [r4, #8]
    46b6:	429d      	cmp	r5, r3
    46b8:	db12      	blt.n	46e0 <__multadd+0x6c>
    46ba:	6861      	ldr	r1, [r4, #4]
    46bc:	1c38      	adds	r0, r7, #0
    46be:	3101      	adds	r1, #1
    46c0:	f7ff ffa6 	bl	4610 <_Balloc>
    46c4:	6922      	ldr	r2, [r4, #16]
    46c6:	1c21      	adds	r1, r4, #0
    46c8:	3202      	adds	r2, #2
    46ca:	9001      	str	r0, [sp, #4]
    46cc:	310c      	adds	r1, #12
    46ce:	0092      	lsls	r2, r2, #2
    46d0:	300c      	adds	r0, #12
    46d2:	f7fd fd83 	bl	21dc <memcpy>
    46d6:	1c21      	adds	r1, r4, #0
    46d8:	1c38      	adds	r0, r7, #0
    46da:	f7ff ffc1 	bl	4660 <_Bfree>
    46de:	9c01      	ldr	r4, [sp, #4]
    46e0:	1d2b      	adds	r3, r5, #4
    46e2:	009b      	lsls	r3, r3, #2
    46e4:	18e3      	adds	r3, r4, r3
    46e6:	3501      	adds	r5, #1
    46e8:	605e      	str	r6, [r3, #4]
    46ea:	6125      	str	r5, [r4, #16]
    46ec:	1c20      	adds	r0, r4, #0
    46ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

000046f0 <__s2b>:
    46f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    46f2:	1c06      	adds	r6, r0, #0
    46f4:	1c18      	adds	r0, r3, #0
    46f6:	1c0f      	adds	r7, r1, #0
    46f8:	3008      	adds	r0, #8
    46fa:	2109      	movs	r1, #9
    46fc:	9301      	str	r3, [sp, #4]
    46fe:	1c14      	adds	r4, r2, #0
    4700:	f001 fa34 	bl	5b6c <__aeabi_idiv>
    4704:	2301      	movs	r3, #1
    4706:	2100      	movs	r1, #0
    4708:	4298      	cmp	r0, r3
    470a:	dd02      	ble.n	4712 <__s2b+0x22>
    470c:	005b      	lsls	r3, r3, #1
    470e:	3101      	adds	r1, #1
    4710:	e7fa      	b.n	4708 <__s2b+0x18>
    4712:	1c30      	adds	r0, r6, #0
    4714:	f7ff ff7c 	bl	4610 <_Balloc>
    4718:	9b08      	ldr	r3, [sp, #32]
    471a:	1c01      	adds	r1, r0, #0
    471c:	6143      	str	r3, [r0, #20]
    471e:	2301      	movs	r3, #1
    4720:	6103      	str	r3, [r0, #16]
    4722:	2c09      	cmp	r4, #9
    4724:	dd12      	ble.n	474c <__s2b+0x5c>
    4726:	1c3b      	adds	r3, r7, #0
    4728:	3309      	adds	r3, #9
    472a:	9300      	str	r3, [sp, #0]
    472c:	1c1d      	adds	r5, r3, #0
    472e:	193f      	adds	r7, r7, r4
    4730:	782b      	ldrb	r3, [r5, #0]
    4732:	1c30      	adds	r0, r6, #0
    4734:	3b30      	subs	r3, #48	; 0x30
    4736:	220a      	movs	r2, #10
    4738:	f7ff ff9c 	bl	4674 <__multadd>
    473c:	3501      	adds	r5, #1
    473e:	1c01      	adds	r1, r0, #0
    4740:	42bd      	cmp	r5, r7
    4742:	d1f5      	bne.n	4730 <__s2b+0x40>
    4744:	9b00      	ldr	r3, [sp, #0]
    4746:	191f      	adds	r7, r3, r4
    4748:	3f08      	subs	r7, #8
    474a:	e001      	b.n	4750 <__s2b+0x60>
    474c:	370a      	adds	r7, #10
    474e:	2409      	movs	r4, #9
    4750:	1c25      	adds	r5, r4, #0
    4752:	9b01      	ldr	r3, [sp, #4]
    4754:	429d      	cmp	r5, r3
    4756:	da09      	bge.n	476c <__s2b+0x7c>
    4758:	1b3b      	subs	r3, r7, r4
    475a:	5d5b      	ldrb	r3, [r3, r5]
    475c:	1c30      	adds	r0, r6, #0
    475e:	3b30      	subs	r3, #48	; 0x30
    4760:	220a      	movs	r2, #10
    4762:	f7ff ff87 	bl	4674 <__multadd>
    4766:	3501      	adds	r5, #1
    4768:	1c01      	adds	r1, r0, #0
    476a:	e7f2      	b.n	4752 <__s2b+0x62>
    476c:	1c08      	adds	r0, r1, #0
    476e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

00004770 <__hi0bits>:
    4770:	2200      	movs	r2, #0
    4772:	1c03      	adds	r3, r0, #0
    4774:	0c01      	lsrs	r1, r0, #16
    4776:	4291      	cmp	r1, r2
    4778:	d101      	bne.n	477e <__hi0bits+0xe>
    477a:	0403      	lsls	r3, r0, #16
    477c:	2210      	movs	r2, #16
    477e:	0e19      	lsrs	r1, r3, #24
    4780:	d101      	bne.n	4786 <__hi0bits+0x16>
    4782:	3208      	adds	r2, #8
    4784:	021b      	lsls	r3, r3, #8
    4786:	0f19      	lsrs	r1, r3, #28
    4788:	d101      	bne.n	478e <__hi0bits+0x1e>
    478a:	3204      	adds	r2, #4
    478c:	011b      	lsls	r3, r3, #4
    478e:	0f99      	lsrs	r1, r3, #30
    4790:	d101      	bne.n	4796 <__hi0bits+0x26>
    4792:	3202      	adds	r2, #2
    4794:	009b      	lsls	r3, r3, #2
    4796:	2b00      	cmp	r3, #0
    4798:	db04      	blt.n	47a4 <__hi0bits+0x34>
    479a:	2020      	movs	r0, #32
    479c:	0059      	lsls	r1, r3, #1
    479e:	d502      	bpl.n	47a6 <__hi0bits+0x36>
    47a0:	1c50      	adds	r0, r2, #1
    47a2:	e000      	b.n	47a6 <__hi0bits+0x36>
    47a4:	1c10      	adds	r0, r2, #0
    47a6:	4770      	bx	lr

000047a8 <__lo0bits>:
    47a8:	6803      	ldr	r3, [r0, #0]
    47aa:	2207      	movs	r2, #7
    47ac:	1c01      	adds	r1, r0, #0
    47ae:	401a      	ands	r2, r3
    47b0:	d00b      	beq.n	47ca <__lo0bits+0x22>
    47b2:	2201      	movs	r2, #1
    47b4:	2000      	movs	r0, #0
    47b6:	4213      	tst	r3, r2
    47b8:	d122      	bne.n	4800 <__lo0bits+0x58>
    47ba:	2002      	movs	r0, #2
    47bc:	4203      	tst	r3, r0
    47be:	d001      	beq.n	47c4 <__lo0bits+0x1c>
    47c0:	40d3      	lsrs	r3, r2
    47c2:	e01b      	b.n	47fc <__lo0bits+0x54>
    47c4:	089b      	lsrs	r3, r3, #2
    47c6:	600b      	str	r3, [r1, #0]
    47c8:	e01a      	b.n	4800 <__lo0bits+0x58>
    47ca:	b298      	uxth	r0, r3
    47cc:	2800      	cmp	r0, #0
    47ce:	d101      	bne.n	47d4 <__lo0bits+0x2c>
    47d0:	0c1b      	lsrs	r3, r3, #16
    47d2:	2210      	movs	r2, #16
    47d4:	b2d8      	uxtb	r0, r3
    47d6:	2800      	cmp	r0, #0
    47d8:	d101      	bne.n	47de <__lo0bits+0x36>
    47da:	3208      	adds	r2, #8
    47dc:	0a1b      	lsrs	r3, r3, #8
    47de:	0718      	lsls	r0, r3, #28
    47e0:	d101      	bne.n	47e6 <__lo0bits+0x3e>
    47e2:	3204      	adds	r2, #4
    47e4:	091b      	lsrs	r3, r3, #4
    47e6:	0798      	lsls	r0, r3, #30
    47e8:	d101      	bne.n	47ee <__lo0bits+0x46>
    47ea:	3202      	adds	r2, #2
    47ec:	089b      	lsrs	r3, r3, #2
    47ee:	07d8      	lsls	r0, r3, #31
    47f0:	d404      	bmi.n	47fc <__lo0bits+0x54>
    47f2:	085b      	lsrs	r3, r3, #1
    47f4:	2020      	movs	r0, #32
    47f6:	2b00      	cmp	r3, #0
    47f8:	d002      	beq.n	4800 <__lo0bits+0x58>
    47fa:	3201      	adds	r2, #1
    47fc:	600b      	str	r3, [r1, #0]
    47fe:	1c10      	adds	r0, r2, #0
    4800:	4770      	bx	lr

00004802 <__i2b>:
    4802:	b510      	push	{r4, lr}
    4804:	1c0c      	adds	r4, r1, #0
    4806:	2101      	movs	r1, #1
    4808:	f7ff ff02 	bl	4610 <_Balloc>
    480c:	2301      	movs	r3, #1
    480e:	6144      	str	r4, [r0, #20]
    4810:	6103      	str	r3, [r0, #16]
    4812:	bd10      	pop	{r4, pc}

00004814 <__multiply>:
    4814:	b5f0      	push	{r4, r5, r6, r7, lr}
    4816:	1c0c      	adds	r4, r1, #0
    4818:	1c15      	adds	r5, r2, #0
    481a:	6909      	ldr	r1, [r1, #16]
    481c:	6912      	ldr	r2, [r2, #16]
    481e:	b08b      	sub	sp, #44	; 0x2c
    4820:	4291      	cmp	r1, r2
    4822:	da02      	bge.n	482a <__multiply+0x16>
    4824:	1c23      	adds	r3, r4, #0
    4826:	1c2c      	adds	r4, r5, #0
    4828:	1c1d      	adds	r5, r3, #0
    482a:	6927      	ldr	r7, [r4, #16]
    482c:	692e      	ldr	r6, [r5, #16]
    482e:	68a2      	ldr	r2, [r4, #8]
    4830:	19bb      	adds	r3, r7, r6
    4832:	6861      	ldr	r1, [r4, #4]
    4834:	9302      	str	r3, [sp, #8]
    4836:	4293      	cmp	r3, r2
    4838:	dd00      	ble.n	483c <__multiply+0x28>
    483a:	3101      	adds	r1, #1
    483c:	f7ff fee8 	bl	4610 <_Balloc>
    4840:	1c03      	adds	r3, r0, #0
    4842:	9003      	str	r0, [sp, #12]
    4844:	9802      	ldr	r0, [sp, #8]
    4846:	3314      	adds	r3, #20
    4848:	0082      	lsls	r2, r0, #2
    484a:	189a      	adds	r2, r3, r2
    484c:	1c19      	adds	r1, r3, #0
    484e:	4291      	cmp	r1, r2
    4850:	d202      	bcs.n	4858 <__multiply+0x44>
    4852:	2000      	movs	r0, #0
    4854:	c101      	stmia	r1!, {r0}
    4856:	e7fa      	b.n	484e <__multiply+0x3a>
    4858:	3514      	adds	r5, #20
    485a:	3414      	adds	r4, #20
    485c:	00bf      	lsls	r7, r7, #2
    485e:	46ac      	mov	ip, r5
    4860:	00b6      	lsls	r6, r6, #2
    4862:	19e7      	adds	r7, r4, r7
    4864:	4466      	add	r6, ip
    4866:	9404      	str	r4, [sp, #16]
    4868:	9707      	str	r7, [sp, #28]
    486a:	9609      	str	r6, [sp, #36]	; 0x24
    486c:	9e09      	ldr	r6, [sp, #36]	; 0x24
    486e:	45b4      	cmp	ip, r6
    4870:	d256      	bcs.n	4920 <__multiply+0x10c>
    4872:	4665      	mov	r5, ip
    4874:	882d      	ldrh	r5, [r5, #0]
    4876:	9505      	str	r5, [sp, #20]
    4878:	2d00      	cmp	r5, #0
    487a:	d01f      	beq.n	48bc <__multiply+0xa8>
    487c:	9c04      	ldr	r4, [sp, #16]
    487e:	1c19      	adds	r1, r3, #0
    4880:	2000      	movs	r0, #0
    4882:	680f      	ldr	r7, [r1, #0]
    4884:	cc40      	ldmia	r4!, {r6}
    4886:	b2bf      	uxth	r7, r7
    4888:	9d05      	ldr	r5, [sp, #20]
    488a:	9706      	str	r7, [sp, #24]
    488c:	b2b7      	uxth	r7, r6
    488e:	436f      	muls	r7, r5
    4890:	9d06      	ldr	r5, [sp, #24]
    4892:	0c36      	lsrs	r6, r6, #16
    4894:	19ef      	adds	r7, r5, r7
    4896:	183f      	adds	r7, r7, r0
    4898:	6808      	ldr	r0, [r1, #0]
    489a:	9108      	str	r1, [sp, #32]
    489c:	0c05      	lsrs	r5, r0, #16
    489e:	9805      	ldr	r0, [sp, #20]
    48a0:	4346      	muls	r6, r0
    48a2:	0c38      	lsrs	r0, r7, #16
    48a4:	19ad      	adds	r5, r5, r6
    48a6:	182d      	adds	r5, r5, r0
    48a8:	0c28      	lsrs	r0, r5, #16
    48aa:	b2bf      	uxth	r7, r7
    48ac:	042d      	lsls	r5, r5, #16
    48ae:	433d      	orrs	r5, r7
    48b0:	c120      	stmia	r1!, {r5}
    48b2:	9d07      	ldr	r5, [sp, #28]
    48b4:	42ac      	cmp	r4, r5
    48b6:	d3e4      	bcc.n	4882 <__multiply+0x6e>
    48b8:	9e08      	ldr	r6, [sp, #32]
    48ba:	6070      	str	r0, [r6, #4]
    48bc:	4667      	mov	r7, ip
    48be:	887d      	ldrh	r5, [r7, #2]
    48c0:	2d00      	cmp	r5, #0
    48c2:	d022      	beq.n	490a <__multiply+0xf6>
    48c4:	2600      	movs	r6, #0
    48c6:	6818      	ldr	r0, [r3, #0]
    48c8:	9c04      	ldr	r4, [sp, #16]
    48ca:	1c19      	adds	r1, r3, #0
    48cc:	9601      	str	r6, [sp, #4]
    48ce:	8827      	ldrh	r7, [r4, #0]
    48d0:	b280      	uxth	r0, r0
    48d2:	436f      	muls	r7, r5
    48d4:	9706      	str	r7, [sp, #24]
    48d6:	9e06      	ldr	r6, [sp, #24]
    48d8:	884f      	ldrh	r7, [r1, #2]
    48da:	9105      	str	r1, [sp, #20]
    48dc:	19f6      	adds	r6, r6, r7
    48de:	9f01      	ldr	r7, [sp, #4]
    48e0:	19f7      	adds	r7, r6, r7
    48e2:	9706      	str	r7, [sp, #24]
    48e4:	043f      	lsls	r7, r7, #16
    48e6:	4338      	orrs	r0, r7
    48e8:	6008      	str	r0, [r1, #0]
    48ea:	cc01      	ldmia	r4!, {r0}
    48ec:	888f      	ldrh	r7, [r1, #4]
    48ee:	0c00      	lsrs	r0, r0, #16
    48f0:	4368      	muls	r0, r5
    48f2:	19c0      	adds	r0, r0, r7
    48f4:	9f06      	ldr	r7, [sp, #24]
    48f6:	3104      	adds	r1, #4
    48f8:	0c3e      	lsrs	r6, r7, #16
    48fa:	1980      	adds	r0, r0, r6
    48fc:	9f07      	ldr	r7, [sp, #28]
    48fe:	0c06      	lsrs	r6, r0, #16
    4900:	9601      	str	r6, [sp, #4]
    4902:	42a7      	cmp	r7, r4
    4904:	d8e3      	bhi.n	48ce <__multiply+0xba>
    4906:	9905      	ldr	r1, [sp, #20]
    4908:	6048      	str	r0, [r1, #4]
    490a:	2504      	movs	r5, #4
    490c:	44ac      	add	ip, r5
    490e:	195b      	adds	r3, r3, r5
    4910:	e7ac      	b.n	486c <__multiply+0x58>
    4912:	3a04      	subs	r2, #4
    4914:	6810      	ldr	r0, [r2, #0]
    4916:	2800      	cmp	r0, #0
    4918:	d105      	bne.n	4926 <__multiply+0x112>
    491a:	9f02      	ldr	r7, [sp, #8]
    491c:	3f01      	subs	r7, #1
    491e:	9702      	str	r7, [sp, #8]
    4920:	9d02      	ldr	r5, [sp, #8]
    4922:	2d00      	cmp	r5, #0
    4924:	dcf5      	bgt.n	4912 <__multiply+0xfe>
    4926:	9f03      	ldr	r7, [sp, #12]
    4928:	9e02      	ldr	r6, [sp, #8]
    492a:	1c38      	adds	r0, r7, #0
    492c:	613e      	str	r6, [r7, #16]
    492e:	b00b      	add	sp, #44	; 0x2c
    4930:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004932 <__pow5mult>:
    4932:	2303      	movs	r3, #3
    4934:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4936:	4013      	ands	r3, r2
    4938:	1c05      	adds	r5, r0, #0
    493a:	1c0e      	adds	r6, r1, #0
    493c:	1c17      	adds	r7, r2, #0
    493e:	2b00      	cmp	r3, #0
    4940:	d007      	beq.n	4952 <__pow5mult+0x20>
    4942:	4a1a      	ldr	r2, [pc, #104]	; (49ac <__pow5mult+0x7a>)
    4944:	3b01      	subs	r3, #1
    4946:	009b      	lsls	r3, r3, #2
    4948:	589a      	ldr	r2, [r3, r2]
    494a:	2300      	movs	r3, #0
    494c:	f7ff fe92 	bl	4674 <__multadd>
    4950:	1c06      	adds	r6, r0, #0
    4952:	10bf      	asrs	r7, r7, #2
    4954:	d028      	beq.n	49a8 <__pow5mult+0x76>
    4956:	6cac      	ldr	r4, [r5, #72]	; 0x48
    4958:	2c00      	cmp	r4, #0
    495a:	d10e      	bne.n	497a <__pow5mult+0x48>
    495c:	1c28      	adds	r0, r5, #0
    495e:	4914      	ldr	r1, [pc, #80]	; (49b0 <__pow5mult+0x7e>)
    4960:	f7ff ff4f 	bl	4802 <__i2b>
    4964:	2300      	movs	r3, #0
    4966:	64a8      	str	r0, [r5, #72]	; 0x48
    4968:	1c04      	adds	r4, r0, #0
    496a:	6003      	str	r3, [r0, #0]
    496c:	e005      	b.n	497a <__pow5mult+0x48>
    496e:	107f      	asrs	r7, r7, #1
    4970:	d01a      	beq.n	49a8 <__pow5mult+0x76>
    4972:	6820      	ldr	r0, [r4, #0]
    4974:	2800      	cmp	r0, #0
    4976:	d00e      	beq.n	4996 <__pow5mult+0x64>
    4978:	1c04      	adds	r4, r0, #0
    497a:	07fb      	lsls	r3, r7, #31
    497c:	d5f7      	bpl.n	496e <__pow5mult+0x3c>
    497e:	1c31      	adds	r1, r6, #0
    4980:	1c22      	adds	r2, r4, #0
    4982:	1c28      	adds	r0, r5, #0
    4984:	f7ff ff46 	bl	4814 <__multiply>
    4988:	1c31      	adds	r1, r6, #0
    498a:	9001      	str	r0, [sp, #4]
    498c:	1c28      	adds	r0, r5, #0
    498e:	f7ff fe67 	bl	4660 <_Bfree>
    4992:	9e01      	ldr	r6, [sp, #4]
    4994:	e7eb      	b.n	496e <__pow5mult+0x3c>
    4996:	1c28      	adds	r0, r5, #0
    4998:	1c21      	adds	r1, r4, #0
    499a:	1c22      	adds	r2, r4, #0
    499c:	f7ff ff3a 	bl	4814 <__multiply>
    49a0:	2300      	movs	r3, #0
    49a2:	6020      	str	r0, [r4, #0]
    49a4:	6003      	str	r3, [r0, #0]
    49a6:	e7e7      	b.n	4978 <__pow5mult+0x46>
    49a8:	1c30      	adds	r0, r6, #0
    49aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    49ac:	00007ae8 	.word	0x00007ae8
    49b0:	00000271 	.word	0x00000271

000049b4 <__lshift>:
    49b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    49b6:	1c0c      	adds	r4, r1, #0
    49b8:	b085      	sub	sp, #20
    49ba:	9003      	str	r0, [sp, #12]
    49bc:	6920      	ldr	r0, [r4, #16]
    49be:	1155      	asrs	r5, r2, #5
    49c0:	1828      	adds	r0, r5, r0
    49c2:	9002      	str	r0, [sp, #8]
    49c4:	6849      	ldr	r1, [r1, #4]
    49c6:	3001      	adds	r0, #1
    49c8:	68a3      	ldr	r3, [r4, #8]
    49ca:	1c17      	adds	r7, r2, #0
    49cc:	9000      	str	r0, [sp, #0]
    49ce:	9a00      	ldr	r2, [sp, #0]
    49d0:	429a      	cmp	r2, r3
    49d2:	dd02      	ble.n	49da <__lshift+0x26>
    49d4:	3101      	adds	r1, #1
    49d6:	005b      	lsls	r3, r3, #1
    49d8:	e7f9      	b.n	49ce <__lshift+0x1a>
    49da:	9803      	ldr	r0, [sp, #12]
    49dc:	f7ff fe18 	bl	4610 <_Balloc>
    49e0:	1c02      	adds	r2, r0, #0
    49e2:	1c06      	adds	r6, r0, #0
    49e4:	3214      	adds	r2, #20
    49e6:	2300      	movs	r3, #0
    49e8:	42ab      	cmp	r3, r5
    49ea:	da04      	bge.n	49f6 <__lshift+0x42>
    49ec:	0099      	lsls	r1, r3, #2
    49ee:	2000      	movs	r0, #0
    49f0:	5050      	str	r0, [r2, r1]
    49f2:	3301      	adds	r3, #1
    49f4:	e7f8      	b.n	49e8 <__lshift+0x34>
    49f6:	43eb      	mvns	r3, r5
    49f8:	17db      	asrs	r3, r3, #31
    49fa:	401d      	ands	r5, r3
    49fc:	00ad      	lsls	r5, r5, #2
    49fe:	6920      	ldr	r0, [r4, #16]
    4a00:	1955      	adds	r5, r2, r5
    4a02:	1c22      	adds	r2, r4, #0
    4a04:	3214      	adds	r2, #20
    4a06:	0083      	lsls	r3, r0, #2
    4a08:	189b      	adds	r3, r3, r2
    4a0a:	469c      	mov	ip, r3
    4a0c:	231f      	movs	r3, #31
    4a0e:	401f      	ands	r7, r3
    4a10:	d014      	beq.n	4a3c <__lshift+0x88>
    4a12:	2320      	movs	r3, #32
    4a14:	1bdb      	subs	r3, r3, r7
    4a16:	9301      	str	r3, [sp, #4]
    4a18:	2300      	movs	r3, #0
    4a1a:	6810      	ldr	r0, [r2, #0]
    4a1c:	1c29      	adds	r1, r5, #0
    4a1e:	40b8      	lsls	r0, r7
    4a20:	4303      	orrs	r3, r0
    4a22:	c508      	stmia	r5!, {r3}
    4a24:	ca08      	ldmia	r2!, {r3}
    4a26:	9801      	ldr	r0, [sp, #4]
    4a28:	40c3      	lsrs	r3, r0
    4a2a:	4594      	cmp	ip, r2
    4a2c:	d8f5      	bhi.n	4a1a <__lshift+0x66>
    4a2e:	604b      	str	r3, [r1, #4]
    4a30:	2b00      	cmp	r3, #0
    4a32:	d007      	beq.n	4a44 <__lshift+0x90>
    4a34:	9902      	ldr	r1, [sp, #8]
    4a36:	3102      	adds	r1, #2
    4a38:	9100      	str	r1, [sp, #0]
    4a3a:	e003      	b.n	4a44 <__lshift+0x90>
    4a3c:	ca08      	ldmia	r2!, {r3}
    4a3e:	c508      	stmia	r5!, {r3}
    4a40:	4594      	cmp	ip, r2
    4a42:	d8fb      	bhi.n	4a3c <__lshift+0x88>
    4a44:	9b00      	ldr	r3, [sp, #0]
    4a46:	9803      	ldr	r0, [sp, #12]
    4a48:	3b01      	subs	r3, #1
    4a4a:	6133      	str	r3, [r6, #16]
    4a4c:	1c21      	adds	r1, r4, #0
    4a4e:	f7ff fe07 	bl	4660 <_Bfree>
    4a52:	1c30      	adds	r0, r6, #0
    4a54:	b005      	add	sp, #20
    4a56:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004a58 <__mcmp>:
    4a58:	b510      	push	{r4, lr}
    4a5a:	6902      	ldr	r2, [r0, #16]
    4a5c:	690c      	ldr	r4, [r1, #16]
    4a5e:	1c03      	adds	r3, r0, #0
    4a60:	1b10      	subs	r0, r2, r4
    4a62:	d113      	bne.n	4a8c <__mcmp+0x34>
    4a64:	1c1a      	adds	r2, r3, #0
    4a66:	00a0      	lsls	r0, r4, #2
    4a68:	3214      	adds	r2, #20
    4a6a:	3114      	adds	r1, #20
    4a6c:	1813      	adds	r3, r2, r0
    4a6e:	1809      	adds	r1, r1, r0
    4a70:	3b04      	subs	r3, #4
    4a72:	3904      	subs	r1, #4
    4a74:	681c      	ldr	r4, [r3, #0]
    4a76:	6808      	ldr	r0, [r1, #0]
    4a78:	4284      	cmp	r4, r0
    4a7a:	d004      	beq.n	4a86 <__mcmp+0x2e>
    4a7c:	4284      	cmp	r4, r0
    4a7e:	4180      	sbcs	r0, r0
    4a80:	2301      	movs	r3, #1
    4a82:	4318      	orrs	r0, r3
    4a84:	e002      	b.n	4a8c <__mcmp+0x34>
    4a86:	4293      	cmp	r3, r2
    4a88:	d8f2      	bhi.n	4a70 <__mcmp+0x18>
    4a8a:	2000      	movs	r0, #0
    4a8c:	bd10      	pop	{r4, pc}

00004a8e <__mdiff>:
    4a8e:	b5f0      	push	{r4, r5, r6, r7, lr}
    4a90:	1c07      	adds	r7, r0, #0
    4a92:	b085      	sub	sp, #20
    4a94:	1c08      	adds	r0, r1, #0
    4a96:	1c0d      	adds	r5, r1, #0
    4a98:	1c11      	adds	r1, r2, #0
    4a9a:	1c14      	adds	r4, r2, #0
    4a9c:	f7ff ffdc 	bl	4a58 <__mcmp>
    4aa0:	1e06      	subs	r6, r0, #0
    4aa2:	d107      	bne.n	4ab4 <__mdiff+0x26>
    4aa4:	1c38      	adds	r0, r7, #0
    4aa6:	1c31      	adds	r1, r6, #0
    4aa8:	f7ff fdb2 	bl	4610 <_Balloc>
    4aac:	2301      	movs	r3, #1
    4aae:	6103      	str	r3, [r0, #16]
    4ab0:	6146      	str	r6, [r0, #20]
    4ab2:	e050      	b.n	4b56 <__mdiff+0xc8>
    4ab4:	2800      	cmp	r0, #0
    4ab6:	db01      	blt.n	4abc <__mdiff+0x2e>
    4ab8:	2600      	movs	r6, #0
    4aba:	e003      	b.n	4ac4 <__mdiff+0x36>
    4abc:	1c2b      	adds	r3, r5, #0
    4abe:	2601      	movs	r6, #1
    4ac0:	1c25      	adds	r5, r4, #0
    4ac2:	1c1c      	adds	r4, r3, #0
    4ac4:	6869      	ldr	r1, [r5, #4]
    4ac6:	1c38      	adds	r0, r7, #0
    4ac8:	f7ff fda2 	bl	4610 <_Balloc>
    4acc:	692a      	ldr	r2, [r5, #16]
    4ace:	1c2b      	adds	r3, r5, #0
    4ad0:	3314      	adds	r3, #20
    4ad2:	0091      	lsls	r1, r2, #2
    4ad4:	1859      	adds	r1, r3, r1
    4ad6:	9102      	str	r1, [sp, #8]
    4ad8:	6921      	ldr	r1, [r4, #16]
    4ada:	1c25      	adds	r5, r4, #0
    4adc:	3514      	adds	r5, #20
    4ade:	0089      	lsls	r1, r1, #2
    4ae0:	1869      	adds	r1, r5, r1
    4ae2:	1c04      	adds	r4, r0, #0
    4ae4:	9103      	str	r1, [sp, #12]
    4ae6:	60c6      	str	r6, [r0, #12]
    4ae8:	3414      	adds	r4, #20
    4aea:	2100      	movs	r1, #0
    4aec:	cb40      	ldmia	r3!, {r6}
    4aee:	cd80      	ldmia	r5!, {r7}
    4af0:	46b4      	mov	ip, r6
    4af2:	b2b6      	uxth	r6, r6
    4af4:	1871      	adds	r1, r6, r1
    4af6:	b2be      	uxth	r6, r7
    4af8:	1b8e      	subs	r6, r1, r6
    4afa:	4661      	mov	r1, ip
    4afc:	9601      	str	r6, [sp, #4]
    4afe:	0c3f      	lsrs	r7, r7, #16
    4b00:	0c0e      	lsrs	r6, r1, #16
    4b02:	1bf7      	subs	r7, r6, r7
    4b04:	9e01      	ldr	r6, [sp, #4]
    4b06:	3404      	adds	r4, #4
    4b08:	1431      	asrs	r1, r6, #16
    4b0a:	187f      	adds	r7, r7, r1
    4b0c:	1439      	asrs	r1, r7, #16
    4b0e:	043f      	lsls	r7, r7, #16
    4b10:	9700      	str	r7, [sp, #0]
    4b12:	9f01      	ldr	r7, [sp, #4]
    4b14:	1f26      	subs	r6, r4, #4
    4b16:	46b4      	mov	ip, r6
    4b18:	b2be      	uxth	r6, r7
    4b1a:	9f00      	ldr	r7, [sp, #0]
    4b1c:	4337      	orrs	r7, r6
    4b1e:	4666      	mov	r6, ip
    4b20:	6037      	str	r7, [r6, #0]
    4b22:	9f03      	ldr	r7, [sp, #12]
    4b24:	42bd      	cmp	r5, r7
    4b26:	d3e1      	bcc.n	4aec <__mdiff+0x5e>
    4b28:	9e02      	ldr	r6, [sp, #8]
    4b2a:	1c25      	adds	r5, r4, #0
    4b2c:	42b3      	cmp	r3, r6
    4b2e:	d20b      	bcs.n	4b48 <__mdiff+0xba>
    4b30:	cb80      	ldmia	r3!, {r7}
    4b32:	b2bd      	uxth	r5, r7
    4b34:	186d      	adds	r5, r5, r1
    4b36:	142e      	asrs	r6, r5, #16
    4b38:	0c3f      	lsrs	r7, r7, #16
    4b3a:	19f6      	adds	r6, r6, r7
    4b3c:	1431      	asrs	r1, r6, #16
    4b3e:	b2ad      	uxth	r5, r5
    4b40:	0436      	lsls	r6, r6, #16
    4b42:	4335      	orrs	r5, r6
    4b44:	c420      	stmia	r4!, {r5}
    4b46:	e7ef      	b.n	4b28 <__mdiff+0x9a>
    4b48:	3d04      	subs	r5, #4
    4b4a:	682f      	ldr	r7, [r5, #0]
    4b4c:	2f00      	cmp	r7, #0
    4b4e:	d101      	bne.n	4b54 <__mdiff+0xc6>
    4b50:	3a01      	subs	r2, #1
    4b52:	e7f9      	b.n	4b48 <__mdiff+0xba>
    4b54:	6102      	str	r2, [r0, #16]
    4b56:	b005      	add	sp, #20
    4b58:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004b5a <__ulp>:
    4b5a:	4b0e      	ldr	r3, [pc, #56]	; (4b94 <__ulp+0x3a>)
    4b5c:	4a0e      	ldr	r2, [pc, #56]	; (4b98 <__ulp+0x3e>)
    4b5e:	400b      	ands	r3, r1
    4b60:	189b      	adds	r3, r3, r2
    4b62:	b510      	push	{r4, lr}
    4b64:	2b00      	cmp	r3, #0
    4b66:	dd01      	ble.n	4b6c <__ulp+0x12>
    4b68:	1c19      	adds	r1, r3, #0
    4b6a:	e009      	b.n	4b80 <__ulp+0x26>
    4b6c:	425b      	negs	r3, r3
    4b6e:	151b      	asrs	r3, r3, #20
    4b70:	2000      	movs	r0, #0
    4b72:	2100      	movs	r1, #0
    4b74:	2b13      	cmp	r3, #19
    4b76:	dc05      	bgt.n	4b84 <__ulp+0x2a>
    4b78:	2280      	movs	r2, #128	; 0x80
    4b7a:	0312      	lsls	r2, r2, #12
    4b7c:	1c11      	adds	r1, r2, #0
    4b7e:	4119      	asrs	r1, r3
    4b80:	2000      	movs	r0, #0
    4b82:	e006      	b.n	4b92 <__ulp+0x38>
    4b84:	2201      	movs	r2, #1
    4b86:	2b32      	cmp	r3, #50	; 0x32
    4b88:	dc02      	bgt.n	4b90 <__ulp+0x36>
    4b8a:	2433      	movs	r4, #51	; 0x33
    4b8c:	1ae3      	subs	r3, r4, r3
    4b8e:	409a      	lsls	r2, r3
    4b90:	1c10      	adds	r0, r2, #0
    4b92:	bd10      	pop	{r4, pc}
    4b94:	7ff00000 	.word	0x7ff00000
    4b98:	fcc00000 	.word	0xfcc00000

00004b9c <__b2d>:
    4b9c:	6903      	ldr	r3, [r0, #16]
    4b9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4ba0:	1c06      	adds	r6, r0, #0
    4ba2:	3614      	adds	r6, #20
    4ba4:	009b      	lsls	r3, r3, #2
    4ba6:	18f3      	adds	r3, r6, r3
    4ba8:	1c1c      	adds	r4, r3, #0
    4baa:	3c04      	subs	r4, #4
    4bac:	6825      	ldr	r5, [r4, #0]
    4bae:	1c0f      	adds	r7, r1, #0
    4bb0:	1c28      	adds	r0, r5, #0
    4bb2:	9301      	str	r3, [sp, #4]
    4bb4:	f7ff fddc 	bl	4770 <__hi0bits>
    4bb8:	2320      	movs	r3, #32
    4bba:	1a1b      	subs	r3, r3, r0
    4bbc:	603b      	str	r3, [r7, #0]
    4bbe:	491f      	ldr	r1, [pc, #124]	; (4c3c <__b2d+0xa0>)
    4bc0:	280a      	cmp	r0, #10
    4bc2:	dc13      	bgt.n	4bec <__b2d+0x50>
    4bc4:	230b      	movs	r3, #11
    4bc6:	1a1b      	subs	r3, r3, r0
    4bc8:	1c2f      	adds	r7, r5, #0
    4bca:	40df      	lsrs	r7, r3
    4bcc:	469c      	mov	ip, r3
    4bce:	1c0b      	adds	r3, r1, #0
    4bd0:	433b      	orrs	r3, r7
    4bd2:	2100      	movs	r1, #0
    4bd4:	42b4      	cmp	r4, r6
    4bd6:	d902      	bls.n	4bde <__b2d+0x42>
    4bd8:	9901      	ldr	r1, [sp, #4]
    4bda:	3908      	subs	r1, #8
    4bdc:	6809      	ldr	r1, [r1, #0]
    4bde:	4664      	mov	r4, ip
    4be0:	40e1      	lsrs	r1, r4
    4be2:	3015      	adds	r0, #21
    4be4:	4085      	lsls	r5, r0
    4be6:	1c0a      	adds	r2, r1, #0
    4be8:	432a      	orrs	r2, r5
    4bea:	e022      	b.n	4c32 <__b2d+0x96>
    4bec:	2700      	movs	r7, #0
    4bee:	42b4      	cmp	r4, r6
    4bf0:	d902      	bls.n	4bf8 <__b2d+0x5c>
    4bf2:	9c01      	ldr	r4, [sp, #4]
    4bf4:	3c08      	subs	r4, #8
    4bf6:	6827      	ldr	r7, [r4, #0]
    4bf8:	230b      	movs	r3, #11
    4bfa:	425b      	negs	r3, r3
    4bfc:	181b      	adds	r3, r3, r0
    4bfe:	469c      	mov	ip, r3
    4c00:	2b00      	cmp	r3, #0
    4c02:	d013      	beq.n	4c2c <__b2d+0x90>
    4c04:	232b      	movs	r3, #43	; 0x2b
    4c06:	1a18      	subs	r0, r3, r0
    4c08:	4663      	mov	r3, ip
    4c0a:	409d      	lsls	r5, r3
    4c0c:	4329      	orrs	r1, r5
    4c0e:	1c3d      	adds	r5, r7, #0
    4c10:	1c0b      	adds	r3, r1, #0
    4c12:	40c5      	lsrs	r5, r0
    4c14:	432b      	orrs	r3, r5
    4c16:	2100      	movs	r1, #0
    4c18:	42b4      	cmp	r4, r6
    4c1a:	d901      	bls.n	4c20 <__b2d+0x84>
    4c1c:	3c04      	subs	r4, #4
    4c1e:	6821      	ldr	r1, [r4, #0]
    4c20:	40c1      	lsrs	r1, r0
    4c22:	4664      	mov	r4, ip
    4c24:	40a7      	lsls	r7, r4
    4c26:	1c0a      	adds	r2, r1, #0
    4c28:	433a      	orrs	r2, r7
    4c2a:	e002      	b.n	4c32 <__b2d+0x96>
    4c2c:	1c0b      	adds	r3, r1, #0
    4c2e:	432b      	orrs	r3, r5
    4c30:	1c3a      	adds	r2, r7, #0
    4c32:	1c10      	adds	r0, r2, #0
    4c34:	1c19      	adds	r1, r3, #0
    4c36:	b003      	add	sp, #12
    4c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4c3a:	46c0      	nop			; (mov r8, r8)
    4c3c:	3ff00000 	.word	0x3ff00000

00004c40 <__d2b>:
    4c40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4c42:	2101      	movs	r1, #1
    4c44:	1c1d      	adds	r5, r3, #0
    4c46:	1c14      	adds	r4, r2, #0
    4c48:	f7ff fce2 	bl	4610 <_Balloc>
    4c4c:	006f      	lsls	r7, r5, #1
    4c4e:	032b      	lsls	r3, r5, #12
    4c50:	1c06      	adds	r6, r0, #0
    4c52:	0b1b      	lsrs	r3, r3, #12
    4c54:	0d7f      	lsrs	r7, r7, #21
    4c56:	d002      	beq.n	4c5e <__d2b+0x1e>
    4c58:	2280      	movs	r2, #128	; 0x80
    4c5a:	0352      	lsls	r2, r2, #13
    4c5c:	4313      	orrs	r3, r2
    4c5e:	9301      	str	r3, [sp, #4]
    4c60:	2c00      	cmp	r4, #0
    4c62:	d019      	beq.n	4c98 <__d2b+0x58>
    4c64:	4668      	mov	r0, sp
    4c66:	9400      	str	r4, [sp, #0]
    4c68:	f7ff fd9e 	bl	47a8 <__lo0bits>
    4c6c:	9a00      	ldr	r2, [sp, #0]
    4c6e:	2800      	cmp	r0, #0
    4c70:	d009      	beq.n	4c86 <__d2b+0x46>
    4c72:	9b01      	ldr	r3, [sp, #4]
    4c74:	2120      	movs	r1, #32
    4c76:	1c1c      	adds	r4, r3, #0
    4c78:	1a09      	subs	r1, r1, r0
    4c7a:	408c      	lsls	r4, r1
    4c7c:	4322      	orrs	r2, r4
    4c7e:	40c3      	lsrs	r3, r0
    4c80:	6172      	str	r2, [r6, #20]
    4c82:	9301      	str	r3, [sp, #4]
    4c84:	e000      	b.n	4c88 <__d2b+0x48>
    4c86:	6172      	str	r2, [r6, #20]
    4c88:	9c01      	ldr	r4, [sp, #4]
    4c8a:	61b4      	str	r4, [r6, #24]
    4c8c:	4263      	negs	r3, r4
    4c8e:	4163      	adcs	r3, r4
    4c90:	2402      	movs	r4, #2
    4c92:	1ae4      	subs	r4, r4, r3
    4c94:	6134      	str	r4, [r6, #16]
    4c96:	e007      	b.n	4ca8 <__d2b+0x68>
    4c98:	a801      	add	r0, sp, #4
    4c9a:	f7ff fd85 	bl	47a8 <__lo0bits>
    4c9e:	9901      	ldr	r1, [sp, #4]
    4ca0:	2401      	movs	r4, #1
    4ca2:	6171      	str	r1, [r6, #20]
    4ca4:	6134      	str	r4, [r6, #16]
    4ca6:	3020      	adds	r0, #32
    4ca8:	2f00      	cmp	r7, #0
    4caa:	d009      	beq.n	4cc0 <__d2b+0x80>
    4cac:	4a0d      	ldr	r2, [pc, #52]	; (4ce4 <__d2b+0xa4>)
    4cae:	9c08      	ldr	r4, [sp, #32]
    4cb0:	18bf      	adds	r7, r7, r2
    4cb2:	183f      	adds	r7, r7, r0
    4cb4:	6027      	str	r7, [r4, #0]
    4cb6:	2335      	movs	r3, #53	; 0x35
    4cb8:	9c09      	ldr	r4, [sp, #36]	; 0x24
    4cba:	1a18      	subs	r0, r3, r0
    4cbc:	6020      	str	r0, [r4, #0]
    4cbe:	e00e      	b.n	4cde <__d2b+0x9e>
    4cc0:	4909      	ldr	r1, [pc, #36]	; (4ce8 <__d2b+0xa8>)
    4cc2:	9a08      	ldr	r2, [sp, #32]
    4cc4:	1840      	adds	r0, r0, r1
    4cc6:	4909      	ldr	r1, [pc, #36]	; (4cec <__d2b+0xac>)
    4cc8:	6010      	str	r0, [r2, #0]
    4cca:	1863      	adds	r3, r4, r1
    4ccc:	009b      	lsls	r3, r3, #2
    4cce:	18f3      	adds	r3, r6, r3
    4cd0:	6958      	ldr	r0, [r3, #20]
    4cd2:	f7ff fd4d 	bl	4770 <__hi0bits>
    4cd6:	0164      	lsls	r4, r4, #5
    4cd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4cda:	1a24      	subs	r4, r4, r0
    4cdc:	6014      	str	r4, [r2, #0]
    4cde:	1c30      	adds	r0, r6, #0
    4ce0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    4ce2:	46c0      	nop			; (mov r8, r8)
    4ce4:	fffffbcd 	.word	0xfffffbcd
    4ce8:	fffffbce 	.word	0xfffffbce
    4cec:	3fffffff 	.word	0x3fffffff

00004cf0 <__ratio>:
    4cf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4cf2:	1c0e      	adds	r6, r1, #0
    4cf4:	4669      	mov	r1, sp
    4cf6:	1c07      	adds	r7, r0, #0
    4cf8:	f7ff ff50 	bl	4b9c <__b2d>
    4cfc:	1c04      	adds	r4, r0, #0
    4cfe:	1c0d      	adds	r5, r1, #0
    4d00:	1c30      	adds	r0, r6, #0
    4d02:	a901      	add	r1, sp, #4
    4d04:	f7ff ff4a 	bl	4b9c <__b2d>
    4d08:	1c02      	adds	r2, r0, #0
    4d0a:	1c0b      	adds	r3, r1, #0
    4d0c:	9800      	ldr	r0, [sp, #0]
    4d0e:	9901      	ldr	r1, [sp, #4]
    4d10:	693f      	ldr	r7, [r7, #16]
    4d12:	1a40      	subs	r0, r0, r1
    4d14:	6931      	ldr	r1, [r6, #16]
    4d16:	4684      	mov	ip, r0
    4d18:	1a79      	subs	r1, r7, r1
    4d1a:	0149      	lsls	r1, r1, #5
    4d1c:	4461      	add	r1, ip
    4d1e:	2900      	cmp	r1, #0
    4d20:	dd02      	ble.n	4d28 <__ratio+0x38>
    4d22:	0509      	lsls	r1, r1, #20
    4d24:	194d      	adds	r5, r1, r5
    4d26:	e001      	b.n	4d2c <__ratio+0x3c>
    4d28:	0509      	lsls	r1, r1, #20
    4d2a:	1a5b      	subs	r3, r3, r1
    4d2c:	1c20      	adds	r0, r4, #0
    4d2e:	1c29      	adds	r1, r5, #0
    4d30:	f001 fade 	bl	62f0 <__aeabi_ddiv>
    4d34:	b003      	add	sp, #12
    4d36:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004d38 <_mprec_log10>:
    4d38:	b510      	push	{r4, lr}
    4d3a:	1e04      	subs	r4, r0, #0
    4d3c:	2c17      	cmp	r4, #23
    4d3e:	dc05      	bgt.n	4d4c <_mprec_log10+0x14>
    4d40:	4b0b      	ldr	r3, [pc, #44]	; (4d70 <_mprec_log10+0x38>)
    4d42:	00c4      	lsls	r4, r0, #3
    4d44:	191c      	adds	r4, r3, r4
    4d46:	6920      	ldr	r0, [r4, #16]
    4d48:	6961      	ldr	r1, [r4, #20]
    4d4a:	e008      	b.n	4d5e <_mprec_log10+0x26>
    4d4c:	4905      	ldr	r1, [pc, #20]	; (4d64 <_mprec_log10+0x2c>)
    4d4e:	4804      	ldr	r0, [pc, #16]	; (4d60 <_mprec_log10+0x28>)
    4d50:	4a05      	ldr	r2, [pc, #20]	; (4d68 <_mprec_log10+0x30>)
    4d52:	4b06      	ldr	r3, [pc, #24]	; (4d6c <_mprec_log10+0x34>)
    4d54:	3c01      	subs	r4, #1
    4d56:	f001 ff3b 	bl	6bd0 <__aeabi_dmul>
    4d5a:	2c00      	cmp	r4, #0
    4d5c:	d1f8      	bne.n	4d50 <_mprec_log10+0x18>
    4d5e:	bd10      	pop	{r4, pc}
    4d60:	00000000 	.word	0x00000000
    4d64:	3ff00000 	.word	0x3ff00000
    4d68:	00000000 	.word	0x00000000
    4d6c:	40240000 	.word	0x40240000
    4d70:	00007ae8 	.word	0x00007ae8

00004d74 <__copybits>:
    4d74:	3901      	subs	r1, #1
    4d76:	b510      	push	{r4, lr}
    4d78:	1c13      	adds	r3, r2, #0
    4d7a:	1149      	asrs	r1, r1, #5
    4d7c:	6912      	ldr	r2, [r2, #16]
    4d7e:	3101      	adds	r1, #1
    4d80:	0089      	lsls	r1, r1, #2
    4d82:	3314      	adds	r3, #20
    4d84:	0092      	lsls	r2, r2, #2
    4d86:	1841      	adds	r1, r0, r1
    4d88:	189a      	adds	r2, r3, r2
    4d8a:	4293      	cmp	r3, r2
    4d8c:	d202      	bcs.n	4d94 <__copybits+0x20>
    4d8e:	cb10      	ldmia	r3!, {r4}
    4d90:	c010      	stmia	r0!, {r4}
    4d92:	e7fa      	b.n	4d8a <__copybits+0x16>
    4d94:	4288      	cmp	r0, r1
    4d96:	d202      	bcs.n	4d9e <__copybits+0x2a>
    4d98:	2300      	movs	r3, #0
    4d9a:	c008      	stmia	r0!, {r3}
    4d9c:	e7fa      	b.n	4d94 <__copybits+0x20>
    4d9e:	bd10      	pop	{r4, pc}

00004da0 <__any_on>:
    4da0:	1c02      	adds	r2, r0, #0
    4da2:	6900      	ldr	r0, [r0, #16]
    4da4:	b510      	push	{r4, lr}
    4da6:	3214      	adds	r2, #20
    4da8:	114b      	asrs	r3, r1, #5
    4daa:	4283      	cmp	r3, r0
    4dac:	dc0d      	bgt.n	4dca <__any_on+0x2a>
    4dae:	da0d      	bge.n	4dcc <__any_on+0x2c>
    4db0:	201f      	movs	r0, #31
    4db2:	4001      	ands	r1, r0
    4db4:	d00a      	beq.n	4dcc <__any_on+0x2c>
    4db6:	0098      	lsls	r0, r3, #2
    4db8:	5884      	ldr	r4, [r0, r2]
    4dba:	1c20      	adds	r0, r4, #0
    4dbc:	40c8      	lsrs	r0, r1
    4dbe:	4088      	lsls	r0, r1
    4dc0:	1c01      	adds	r1, r0, #0
    4dc2:	2001      	movs	r0, #1
    4dc4:	42a1      	cmp	r1, r4
    4dc6:	d10c      	bne.n	4de2 <__any_on+0x42>
    4dc8:	e000      	b.n	4dcc <__any_on+0x2c>
    4dca:	1c03      	adds	r3, r0, #0
    4dcc:	009b      	lsls	r3, r3, #2
    4dce:	18d3      	adds	r3, r2, r3
    4dd0:	4293      	cmp	r3, r2
    4dd2:	d905      	bls.n	4de0 <__any_on+0x40>
    4dd4:	3b04      	subs	r3, #4
    4dd6:	6819      	ldr	r1, [r3, #0]
    4dd8:	2900      	cmp	r1, #0
    4dda:	d0f9      	beq.n	4dd0 <__any_on+0x30>
    4ddc:	2001      	movs	r0, #1
    4dde:	e000      	b.n	4de2 <__any_on+0x42>
    4de0:	2000      	movs	r0, #0
    4de2:	bd10      	pop	{r4, pc}
    4de4:	46c0      	nop			; (mov r8, r8)
    4de6:	46c0      	nop			; (mov r8, r8)

00004de8 <__fpclassifyd>:
    4de8:	b530      	push	{r4, r5, lr}
    4dea:	1c0b      	adds	r3, r1, #0
    4dec:	1c04      	adds	r4, r0, #0
    4dee:	1c02      	adds	r2, r0, #0
    4df0:	431c      	orrs	r4, r3
    4df2:	2002      	movs	r0, #2
    4df4:	2c00      	cmp	r4, #0
    4df6:	d017      	beq.n	4e28 <__fpclassifyd+0x40>
    4df8:	2480      	movs	r4, #128	; 0x80
    4dfa:	0624      	lsls	r4, r4, #24
    4dfc:	42a3      	cmp	r3, r4
    4dfe:	d101      	bne.n	4e04 <__fpclassifyd+0x1c>
    4e00:	2a00      	cmp	r2, #0
    4e02:	d011      	beq.n	4e28 <__fpclassifyd+0x40>
    4e04:	4809      	ldr	r0, [pc, #36]	; (4e2c <__fpclassifyd+0x44>)
    4e06:	0059      	lsls	r1, r3, #1
    4e08:	0849      	lsrs	r1, r1, #1
    4e0a:	4c09      	ldr	r4, [pc, #36]	; (4e30 <__fpclassifyd+0x48>)
    4e0c:	180d      	adds	r5, r1, r0
    4e0e:	2004      	movs	r0, #4
    4e10:	42a5      	cmp	r5, r4
    4e12:	d909      	bls.n	4e28 <__fpclassifyd+0x40>
    4e14:	4c07      	ldr	r4, [pc, #28]	; (4e34 <__fpclassifyd+0x4c>)
    4e16:	2003      	movs	r0, #3
    4e18:	42a1      	cmp	r1, r4
    4e1a:	d905      	bls.n	4e28 <__fpclassifyd+0x40>
    4e1c:	4c06      	ldr	r4, [pc, #24]	; (4e38 <__fpclassifyd+0x50>)
    4e1e:	2000      	movs	r0, #0
    4e20:	42a1      	cmp	r1, r4
    4e22:	d101      	bne.n	4e28 <__fpclassifyd+0x40>
    4e24:	4250      	negs	r0, r2
    4e26:	4150      	adcs	r0, r2
    4e28:	bd30      	pop	{r4, r5, pc}
    4e2a:	46c0      	nop			; (mov r8, r8)
    4e2c:	fff00000 	.word	0xfff00000
    4e30:	7fdfffff 	.word	0x7fdfffff
    4e34:	000fffff 	.word	0x000fffff
    4e38:	7ff00000 	.word	0x7ff00000

00004e3c <_sbrk_r>:
    4e3c:	b538      	push	{r3, r4, r5, lr}
    4e3e:	4c07      	ldr	r4, [pc, #28]	; (4e5c <_sbrk_r+0x20>)
    4e40:	2300      	movs	r3, #0
    4e42:	1c05      	adds	r5, r0, #0
    4e44:	1c08      	adds	r0, r1, #0
    4e46:	6023      	str	r3, [r4, #0]
    4e48:	f7fc fb6e 	bl	1528 <_sbrk>
    4e4c:	1c43      	adds	r3, r0, #1
    4e4e:	d103      	bne.n	4e58 <_sbrk_r+0x1c>
    4e50:	6823      	ldr	r3, [r4, #0]
    4e52:	2b00      	cmp	r3, #0
    4e54:	d000      	beq.n	4e58 <_sbrk_r+0x1c>
    4e56:	602b      	str	r3, [r5, #0]
    4e58:	bd38      	pop	{r3, r4, r5, pc}
    4e5a:	46c0      	nop			; (mov r8, r8)
    4e5c:	200009e0 	.word	0x200009e0

00004e60 <strcmp>:
    4e60:	7802      	ldrb	r2, [r0, #0]
    4e62:	780b      	ldrb	r3, [r1, #0]
    4e64:	3001      	adds	r0, #1
    4e66:	3101      	adds	r1, #1
    4e68:	2a00      	cmp	r2, #0
    4e6a:	d001      	beq.n	4e70 <strcmp+0x10>
    4e6c:	429a      	cmp	r2, r3
    4e6e:	d0f7      	beq.n	4e60 <strcmp>
    4e70:	1ad0      	subs	r0, r2, r3
    4e72:	4770      	bx	lr

00004e74 <strlen>:
    4e74:	2300      	movs	r3, #0
    4e76:	5cc2      	ldrb	r2, [r0, r3]
    4e78:	3301      	adds	r3, #1
    4e7a:	2a00      	cmp	r2, #0
    4e7c:	d1fb      	bne.n	4e76 <strlen+0x2>
    4e7e:	1e58      	subs	r0, r3, #1
    4e80:	4770      	bx	lr
	...

00004e84 <__ssprint_r>:
    4e84:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e86:	b087      	sub	sp, #28
    4e88:	9003      	str	r0, [sp, #12]
    4e8a:	6810      	ldr	r0, [r2, #0]
    4e8c:	1c0c      	adds	r4, r1, #0
    4e8e:	9004      	str	r0, [sp, #16]
    4e90:	6890      	ldr	r0, [r2, #8]
    4e92:	1c16      	adds	r6, r2, #0
    4e94:	2800      	cmp	r0, #0
    4e96:	d003      	beq.n	4ea0 <__ssprint_r+0x1c>
    4e98:	2100      	movs	r1, #0
    4e9a:	9102      	str	r1, [sp, #8]
    4e9c:	1c0d      	adds	r5, r1, #0
    4e9e:	e01e      	b.n	4ede <__ssprint_r+0x5a>
    4ea0:	6050      	str	r0, [r2, #4]
    4ea2:	e074      	b.n	4f8e <__ssprint_r+0x10a>
    4ea4:	68a7      	ldr	r7, [r4, #8]
    4ea6:	42bd      	cmp	r5, r7
    4ea8:	d363      	bcc.n	4f72 <__ssprint_r+0xee>
    4eaa:	2290      	movs	r2, #144	; 0x90
    4eac:	89a3      	ldrh	r3, [r4, #12]
    4eae:	00d2      	lsls	r2, r2, #3
    4eb0:	4213      	tst	r3, r2
    4eb2:	d11e      	bne.n	4ef2 <__ssprint_r+0x6e>
    4eb4:	42bd      	cmp	r5, r7
    4eb6:	d35c      	bcc.n	4f72 <__ssprint_r+0xee>
    4eb8:	1c3a      	adds	r2, r7, #0
    4eba:	9902      	ldr	r1, [sp, #8]
    4ebc:	6820      	ldr	r0, [r4, #0]
    4ebe:	f000 fc83 	bl	57c8 <memmove>
    4ec2:	68a1      	ldr	r1, [r4, #8]
    4ec4:	6822      	ldr	r2, [r4, #0]
    4ec6:	1bcb      	subs	r3, r1, r7
    4ec8:	60a3      	str	r3, [r4, #8]
    4eca:	68b0      	ldr	r0, [r6, #8]
    4ecc:	9b02      	ldr	r3, [sp, #8]
    4ece:	19d7      	adds	r7, r2, r7
    4ed0:	195b      	adds	r3, r3, r5
    4ed2:	1b45      	subs	r5, r0, r5
    4ed4:	6027      	str	r7, [r4, #0]
    4ed6:	9302      	str	r3, [sp, #8]
    4ed8:	60b5      	str	r5, [r6, #8]
    4eda:	d04c      	beq.n	4f76 <__ssprint_r+0xf2>
    4edc:	2500      	movs	r5, #0
    4ede:	2d00      	cmp	r5, #0
    4ee0:	d1e0      	bne.n	4ea4 <__ssprint_r+0x20>
    4ee2:	9a04      	ldr	r2, [sp, #16]
    4ee4:	9b04      	ldr	r3, [sp, #16]
    4ee6:	6812      	ldr	r2, [r2, #0]
    4ee8:	685d      	ldr	r5, [r3, #4]
    4eea:	3308      	adds	r3, #8
    4eec:	9202      	str	r2, [sp, #8]
    4eee:	9304      	str	r3, [sp, #16]
    4ef0:	e7f5      	b.n	4ede <__ssprint_r+0x5a>
    4ef2:	6921      	ldr	r1, [r4, #16]
    4ef4:	6820      	ldr	r0, [r4, #0]
    4ef6:	2203      	movs	r2, #3
    4ef8:	1a40      	subs	r0, r0, r1
    4efa:	9005      	str	r0, [sp, #20]
    4efc:	6960      	ldr	r0, [r4, #20]
    4efe:	4342      	muls	r2, r0
    4f00:	0fd0      	lsrs	r0, r2, #31
    4f02:	1882      	adds	r2, r0, r2
    4f04:	1052      	asrs	r2, r2, #1
    4f06:	9201      	str	r2, [sp, #4]
    4f08:	9a05      	ldr	r2, [sp, #20]
    4f0a:	9801      	ldr	r0, [sp, #4]
    4f0c:	3201      	adds	r2, #1
    4f0e:	1952      	adds	r2, r2, r5
    4f10:	4290      	cmp	r0, r2
    4f12:	d200      	bcs.n	4f16 <__ssprint_r+0x92>
    4f14:	9201      	str	r2, [sp, #4]
    4f16:	9803      	ldr	r0, [sp, #12]
    4f18:	055a      	lsls	r2, r3, #21
    4f1a:	d513      	bpl.n	4f44 <__ssprint_r+0xc0>
    4f1c:	9901      	ldr	r1, [sp, #4]
    4f1e:	f7ff f971 	bl	4204 <_malloc_r>
    4f22:	1e07      	subs	r7, r0, #0
    4f24:	d103      	bne.n	4f2e <__ssprint_r+0xaa>
    4f26:	9803      	ldr	r0, [sp, #12]
    4f28:	230c      	movs	r3, #12
    4f2a:	6003      	str	r3, [r0, #0]
    4f2c:	e026      	b.n	4f7c <__ssprint_r+0xf8>
    4f2e:	9a05      	ldr	r2, [sp, #20]
    4f30:	6921      	ldr	r1, [r4, #16]
    4f32:	f7fd f953 	bl	21dc <memcpy>
    4f36:	89a2      	ldrh	r2, [r4, #12]
    4f38:	4b16      	ldr	r3, [pc, #88]	; (4f94 <__ssprint_r+0x110>)
    4f3a:	4013      	ands	r3, r2
    4f3c:	2280      	movs	r2, #128	; 0x80
    4f3e:	4313      	orrs	r3, r2
    4f40:	81a3      	strh	r3, [r4, #12]
    4f42:	e00c      	b.n	4f5e <__ssprint_r+0xda>
    4f44:	9a01      	ldr	r2, [sp, #4]
    4f46:	f000 fc59 	bl	57fc <_realloc_r>
    4f4a:	1e07      	subs	r7, r0, #0
    4f4c:	d107      	bne.n	4f5e <__ssprint_r+0xda>
    4f4e:	6921      	ldr	r1, [r4, #16]
    4f50:	9803      	ldr	r0, [sp, #12]
    4f52:	f7ff f84d 	bl	3ff0 <_free_r>
    4f56:	9903      	ldr	r1, [sp, #12]
    4f58:	230c      	movs	r3, #12
    4f5a:	600b      	str	r3, [r1, #0]
    4f5c:	e00e      	b.n	4f7c <__ssprint_r+0xf8>
    4f5e:	9a05      	ldr	r2, [sp, #20]
    4f60:	9b01      	ldr	r3, [sp, #4]
    4f62:	6127      	str	r7, [r4, #16]
    4f64:	6163      	str	r3, [r4, #20]
    4f66:	18bf      	adds	r7, r7, r2
    4f68:	1a9b      	subs	r3, r3, r2
    4f6a:	6027      	str	r7, [r4, #0]
    4f6c:	60a3      	str	r3, [r4, #8]
    4f6e:	1c2f      	adds	r7, r5, #0
    4f70:	e7a0      	b.n	4eb4 <__ssprint_r+0x30>
    4f72:	1c2f      	adds	r7, r5, #0
    4f74:	e7a0      	b.n	4eb8 <__ssprint_r+0x34>
    4f76:	6075      	str	r5, [r6, #4]
    4f78:	1c28      	adds	r0, r5, #0
    4f7a:	e008      	b.n	4f8e <__ssprint_r+0x10a>
    4f7c:	89a3      	ldrh	r3, [r4, #12]
    4f7e:	2240      	movs	r2, #64	; 0x40
    4f80:	4313      	orrs	r3, r2
    4f82:	81a3      	strh	r3, [r4, #12]
    4f84:	2001      	movs	r0, #1
    4f86:	2300      	movs	r3, #0
    4f88:	60b3      	str	r3, [r6, #8]
    4f8a:	6073      	str	r3, [r6, #4]
    4f8c:	4240      	negs	r0, r0
    4f8e:	b007      	add	sp, #28
    4f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4f92:	46c0      	nop			; (mov r8, r8)
    4f94:	fffffb7f 	.word	0xfffffb7f

00004f98 <_svfiprintf_r>:
    4f98:	b5f0      	push	{r4, r5, r6, r7, lr}
    4f9a:	1c1c      	adds	r4, r3, #0
    4f9c:	898b      	ldrh	r3, [r1, #12]
    4f9e:	b0b1      	sub	sp, #196	; 0xc4
    4fa0:	9007      	str	r0, [sp, #28]
    4fa2:	9105      	str	r1, [sp, #20]
    4fa4:	9208      	str	r2, [sp, #32]
    4fa6:	0618      	lsls	r0, r3, #24
    4fa8:	d512      	bpl.n	4fd0 <_svfiprintf_r+0x38>
    4faa:	6909      	ldr	r1, [r1, #16]
    4fac:	2900      	cmp	r1, #0
    4fae:	d10f      	bne.n	4fd0 <_svfiprintf_r+0x38>
    4fb0:	9807      	ldr	r0, [sp, #28]
    4fb2:	2140      	movs	r1, #64	; 0x40
    4fb4:	f7ff f926 	bl	4204 <_malloc_r>
    4fb8:	9f05      	ldr	r7, [sp, #20]
    4fba:	6038      	str	r0, [r7, #0]
    4fbc:	6138      	str	r0, [r7, #16]
    4fbe:	2800      	cmp	r0, #0
    4fc0:	d103      	bne.n	4fca <_svfiprintf_r+0x32>
    4fc2:	9f07      	ldr	r7, [sp, #28]
    4fc4:	230c      	movs	r3, #12
    4fc6:	603b      	str	r3, [r7, #0]
    4fc8:	e3cb      	b.n	5762 <_svfiprintf_r+0x7ca>
    4fca:	9f05      	ldr	r7, [sp, #20]
    4fcc:	2340      	movs	r3, #64	; 0x40
    4fce:	617b      	str	r3, [r7, #20]
    4fd0:	2300      	movs	r3, #0
    4fd2:	ad20      	add	r5, sp, #128	; 0x80
    4fd4:	9513      	str	r5, [sp, #76]	; 0x4c
    4fd6:	9315      	str	r3, [sp, #84]	; 0x54
    4fd8:	9314      	str	r3, [sp, #80]	; 0x50
    4fda:	930e      	str	r3, [sp, #56]	; 0x38
    4fdc:	930c      	str	r3, [sp, #48]	; 0x30
    4fde:	9e08      	ldr	r6, [sp, #32]
    4fe0:	7833      	ldrb	r3, [r6, #0]
    4fe2:	2b00      	cmp	r3, #0
    4fe4:	d103      	bne.n	4fee <_svfiprintf_r+0x56>
    4fe6:	9808      	ldr	r0, [sp, #32]
    4fe8:	1a37      	subs	r7, r6, r0
    4fea:	d104      	bne.n	4ff6 <_svfiprintf_r+0x5e>
    4fec:	e01c      	b.n	5028 <_svfiprintf_r+0x90>
    4fee:	2b25      	cmp	r3, #37	; 0x25
    4ff0:	d0f9      	beq.n	4fe6 <_svfiprintf_r+0x4e>
    4ff2:	3601      	adds	r6, #1
    4ff4:	e7f4      	b.n	4fe0 <_svfiprintf_r+0x48>
    4ff6:	9a15      	ldr	r2, [sp, #84]	; 0x54
    4ff8:	9908      	ldr	r1, [sp, #32]
    4ffa:	18bb      	adds	r3, r7, r2
    4ffc:	9315      	str	r3, [sp, #84]	; 0x54
    4ffe:	9b14      	ldr	r3, [sp, #80]	; 0x50
    5000:	6029      	str	r1, [r5, #0]
    5002:	3301      	adds	r3, #1
    5004:	606f      	str	r7, [r5, #4]
    5006:	9314      	str	r3, [sp, #80]	; 0x50
    5008:	2b07      	cmp	r3, #7
    500a:	dc01      	bgt.n	5010 <_svfiprintf_r+0x78>
    500c:	3508      	adds	r5, #8
    500e:	e008      	b.n	5022 <_svfiprintf_r+0x8a>
    5010:	9807      	ldr	r0, [sp, #28]
    5012:	9905      	ldr	r1, [sp, #20]
    5014:	aa13      	add	r2, sp, #76	; 0x4c
    5016:	f7ff ff35 	bl	4e84 <__ssprint_r>
    501a:	2800      	cmp	r0, #0
    501c:	d000      	beq.n	5020 <_svfiprintf_r+0x88>
    501e:	e39b      	b.n	5758 <_svfiprintf_r+0x7c0>
    5020:	ad20      	add	r5, sp, #128	; 0x80
    5022:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5024:	19db      	adds	r3, r3, r7
    5026:	930c      	str	r3, [sp, #48]	; 0x30
    5028:	7833      	ldrb	r3, [r6, #0]
    502a:	2b00      	cmp	r3, #0
    502c:	d100      	bne.n	5030 <_svfiprintf_r+0x98>
    502e:	e38b      	b.n	5748 <_svfiprintf_r+0x7b0>
    5030:	4669      	mov	r1, sp
    5032:	2200      	movs	r2, #0
    5034:	3147      	adds	r1, #71	; 0x47
    5036:	700a      	strb	r2, [r1, #0]
    5038:	2101      	movs	r1, #1
    503a:	4249      	negs	r1, r1
    503c:	1c73      	adds	r3, r6, #1
    503e:	9104      	str	r1, [sp, #16]
    5040:	920b      	str	r2, [sp, #44]	; 0x2c
    5042:	1c16      	adds	r6, r2, #0
    5044:	1c5f      	adds	r7, r3, #1
    5046:	781b      	ldrb	r3, [r3, #0]
    5048:	9708      	str	r7, [sp, #32]
    504a:	2b58      	cmp	r3, #88	; 0x58
    504c:	d070      	beq.n	5130 <_svfiprintf_r+0x198>
    504e:	dc38      	bgt.n	50c2 <_svfiprintf_r+0x12a>
    5050:	2b2e      	cmp	r3, #46	; 0x2e
    5052:	d100      	bne.n	5056 <_svfiprintf_r+0xbe>
    5054:	e07e      	b.n	5154 <_svfiprintf_r+0x1bc>
    5056:	dc1c      	bgt.n	5092 <_svfiprintf_r+0xfa>
    5058:	2b2a      	cmp	r3, #42	; 0x2a
    505a:	d071      	beq.n	5140 <_svfiprintf_r+0x1a8>
    505c:	dc06      	bgt.n	506c <_svfiprintf_r+0xd4>
    505e:	2b20      	cmp	r3, #32
    5060:	d06b      	beq.n	513a <_svfiprintf_r+0x1a2>
    5062:	2b23      	cmp	r3, #35	; 0x23
    5064:	d000      	beq.n	5068 <_svfiprintf_r+0xd0>
    5066:	e214      	b.n	5492 <_svfiprintf_r+0x4fa>
    5068:	2301      	movs	r3, #1
    506a:	e071      	b.n	5150 <_svfiprintf_r+0x1b8>
    506c:	2b2b      	cmp	r3, #43	; 0x2b
    506e:	d10d      	bne.n	508c <_svfiprintf_r+0xf4>
    5070:	1c1a      	adds	r2, r3, #0
    5072:	e009      	b.n	5088 <_svfiprintf_r+0xf0>
    5074:	1d23      	adds	r3, r4, #4
    5076:	6824      	ldr	r4, [r4, #0]
    5078:	9404      	str	r4, [sp, #16]
    507a:	2c00      	cmp	r4, #0
    507c:	da72      	bge.n	5164 <_svfiprintf_r+0x1cc>
    507e:	1c1c      	adds	r4, r3, #0
    5080:	2301      	movs	r3, #1
    5082:	425b      	negs	r3, r3
    5084:	9108      	str	r1, [sp, #32]
    5086:	9304      	str	r3, [sp, #16]
    5088:	9b08      	ldr	r3, [sp, #32]
    508a:	e7db      	b.n	5044 <_svfiprintf_r+0xac>
    508c:	2b2d      	cmp	r3, #45	; 0x2d
    508e:	d05e      	beq.n	514e <_svfiprintf_r+0x1b6>
    5090:	e1ff      	b.n	5492 <_svfiprintf_r+0x4fa>
    5092:	2b39      	cmp	r3, #57	; 0x39
    5094:	dc06      	bgt.n	50a4 <_svfiprintf_r+0x10c>
    5096:	2b31      	cmp	r3, #49	; 0x31
    5098:	da7a      	bge.n	5190 <_svfiprintf_r+0x1f8>
    509a:	2b30      	cmp	r3, #48	; 0x30
    509c:	d000      	beq.n	50a0 <_svfiprintf_r+0x108>
    509e:	e1f8      	b.n	5492 <_svfiprintf_r+0x4fa>
    50a0:	2380      	movs	r3, #128	; 0x80
    50a2:	e055      	b.n	5150 <_svfiprintf_r+0x1b8>
    50a4:	2b4f      	cmp	r3, #79	; 0x4f
    50a6:	d100      	bne.n	50aa <_svfiprintf_r+0x112>
    50a8:	e0df      	b.n	526a <_svfiprintf_r+0x2d2>
    50aa:	2b55      	cmp	r3, #85	; 0x55
    50ac:	d100      	bne.n	50b0 <_svfiprintf_r+0x118>
    50ae:	e122      	b.n	52f6 <_svfiprintf_r+0x35e>
    50b0:	2b44      	cmp	r3, #68	; 0x44
    50b2:	d000      	beq.n	50b6 <_svfiprintf_r+0x11e>
    50b4:	e1ed      	b.n	5492 <_svfiprintf_r+0x4fa>
    50b6:	466b      	mov	r3, sp
    50b8:	3347      	adds	r3, #71	; 0x47
    50ba:	701a      	strb	r2, [r3, #0]
    50bc:	2310      	movs	r3, #16
    50be:	431e      	orrs	r6, r3
    50c0:	e093      	b.n	51ea <_svfiprintf_r+0x252>
    50c2:	2b6e      	cmp	r3, #110	; 0x6e
    50c4:	d100      	bne.n	50c8 <_svfiprintf_r+0x130>
    50c6:	e0b7      	b.n	5238 <_svfiprintf_r+0x2a0>
    50c8:	dc0c      	bgt.n	50e4 <_svfiprintf_r+0x14c>
    50ca:	2b68      	cmp	r3, #104	; 0x68
    50cc:	d073      	beq.n	51b6 <_svfiprintf_r+0x21e>
    50ce:	dc04      	bgt.n	50da <_svfiprintf_r+0x142>
    50d0:	2b63      	cmp	r3, #99	; 0x63
    50d2:	d07d      	beq.n	51d0 <_svfiprintf_r+0x238>
    50d4:	2b64      	cmp	r3, #100	; 0x64
    50d6:	d027      	beq.n	5128 <_svfiprintf_r+0x190>
    50d8:	e1db      	b.n	5492 <_svfiprintf_r+0x4fa>
    50da:	2b69      	cmp	r3, #105	; 0x69
    50dc:	d024      	beq.n	5128 <_svfiprintf_r+0x190>
    50de:	2b6c      	cmp	r3, #108	; 0x6c
    50e0:	d06b      	beq.n	51ba <_svfiprintf_r+0x222>
    50e2:	e1d6      	b.n	5492 <_svfiprintf_r+0x4fa>
    50e4:	2b71      	cmp	r3, #113	; 0x71
    50e6:	d071      	beq.n	51cc <_svfiprintf_r+0x234>
    50e8:	dc14      	bgt.n	5114 <_svfiprintf_r+0x17c>
    50ea:	2b6f      	cmp	r3, #111	; 0x6f
    50ec:	d100      	bne.n	50f0 <_svfiprintf_r+0x158>
    50ee:	e0be      	b.n	526e <_svfiprintf_r+0x2d6>
    50f0:	2b70      	cmp	r3, #112	; 0x70
    50f2:	d000      	beq.n	50f6 <_svfiprintf_r+0x15e>
    50f4:	e1cd      	b.n	5492 <_svfiprintf_r+0x4fa>
    50f6:	6821      	ldr	r1, [r4, #0]
    50f8:	2200      	movs	r2, #0
    50fa:	ab12      	add	r3, sp, #72	; 0x48
    50fc:	9102      	str	r1, [sp, #8]
    50fe:	4fc0      	ldr	r7, [pc, #768]	; (5400 <_svfiprintf_r+0x468>)
    5100:	2130      	movs	r1, #48	; 0x30
    5102:	9203      	str	r2, [sp, #12]
    5104:	7019      	strb	r1, [r3, #0]
    5106:	2202      	movs	r2, #2
    5108:	2178      	movs	r1, #120	; 0x78
    510a:	4316      	orrs	r6, r2
    510c:	7059      	strb	r1, [r3, #1]
    510e:	3404      	adds	r4, #4
    5110:	970e      	str	r7, [sp, #56]	; 0x38
    5112:	e13f      	b.n	5394 <_svfiprintf_r+0x3fc>
    5114:	2b75      	cmp	r3, #117	; 0x75
    5116:	d100      	bne.n	511a <_svfiprintf_r+0x182>
    5118:	e0ef      	b.n	52fa <_svfiprintf_r+0x362>
    511a:	2b78      	cmp	r3, #120	; 0x78
    511c:	d100      	bne.n	5120 <_svfiprintf_r+0x188>
    511e:	e10b      	b.n	5338 <_svfiprintf_r+0x3a0>
    5120:	2b73      	cmp	r3, #115	; 0x73
    5122:	d000      	beq.n	5126 <_svfiprintf_r+0x18e>
    5124:	e1b5      	b.n	5492 <_svfiprintf_r+0x4fa>
    5126:	e0c6      	b.n	52b6 <_svfiprintf_r+0x31e>
    5128:	466b      	mov	r3, sp
    512a:	3347      	adds	r3, #71	; 0x47
    512c:	701a      	strb	r2, [r3, #0]
    512e:	e05c      	b.n	51ea <_svfiprintf_r+0x252>
    5130:	4669      	mov	r1, sp
    5132:	3147      	adds	r1, #71	; 0x47
    5134:	700a      	strb	r2, [r1, #0]
    5136:	4fb3      	ldr	r7, [pc, #716]	; (5404 <_svfiprintf_r+0x46c>)
    5138:	e102      	b.n	5340 <_svfiprintf_r+0x3a8>
    513a:	2a00      	cmp	r2, #0
    513c:	d098      	beq.n	5070 <_svfiprintf_r+0xd8>
    513e:	e7a3      	b.n	5088 <_svfiprintf_r+0xf0>
    5140:	6827      	ldr	r7, [r4, #0]
    5142:	3404      	adds	r4, #4
    5144:	970b      	str	r7, [sp, #44]	; 0x2c
    5146:	2f00      	cmp	r7, #0
    5148:	da9e      	bge.n	5088 <_svfiprintf_r+0xf0>
    514a:	427f      	negs	r7, r7
    514c:	970b      	str	r7, [sp, #44]	; 0x2c
    514e:	2304      	movs	r3, #4
    5150:	431e      	orrs	r6, r3
    5152:	e799      	b.n	5088 <_svfiprintf_r+0xf0>
    5154:	9f08      	ldr	r7, [sp, #32]
    5156:	9908      	ldr	r1, [sp, #32]
    5158:	783b      	ldrb	r3, [r7, #0]
    515a:	3101      	adds	r1, #1
    515c:	2b2a      	cmp	r3, #42	; 0x2a
    515e:	d089      	beq.n	5074 <_svfiprintf_r+0xdc>
    5160:	2000      	movs	r0, #0
    5162:	e002      	b.n	516a <_svfiprintf_r+0x1d2>
    5164:	1c1c      	adds	r4, r3, #0
    5166:	9108      	str	r1, [sp, #32]
    5168:	e78e      	b.n	5088 <_svfiprintf_r+0xf0>
    516a:	1c1f      	adds	r7, r3, #0
    516c:	3f30      	subs	r7, #48	; 0x30
    516e:	9108      	str	r1, [sp, #32]
    5170:	2f09      	cmp	r7, #9
    5172:	d805      	bhi.n	5180 <_svfiprintf_r+0x1e8>
    5174:	230a      	movs	r3, #10
    5176:	4358      	muls	r0, r3
    5178:	780b      	ldrb	r3, [r1, #0]
    517a:	19c0      	adds	r0, r0, r7
    517c:	3101      	adds	r1, #1
    517e:	e7f4      	b.n	516a <_svfiprintf_r+0x1d2>
    5180:	9004      	str	r0, [sp, #16]
    5182:	2800      	cmp	r0, #0
    5184:	db00      	blt.n	5188 <_svfiprintf_r+0x1f0>
    5186:	e760      	b.n	504a <_svfiprintf_r+0xb2>
    5188:	2101      	movs	r1, #1
    518a:	4249      	negs	r1, r1
    518c:	9104      	str	r1, [sp, #16]
    518e:	e75c      	b.n	504a <_svfiprintf_r+0xb2>
    5190:	2700      	movs	r7, #0
    5192:	970b      	str	r7, [sp, #44]	; 0x2c
    5194:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    5196:	210a      	movs	r1, #10
    5198:	4379      	muls	r1, r7
    519a:	9f08      	ldr	r7, [sp, #32]
    519c:	3b30      	subs	r3, #48	; 0x30
    519e:	18cb      	adds	r3, r1, r3
    51a0:	3701      	adds	r7, #1
    51a2:	930b      	str	r3, [sp, #44]	; 0x2c
    51a4:	1c3b      	adds	r3, r7, #0
    51a6:	3b01      	subs	r3, #1
    51a8:	781b      	ldrb	r3, [r3, #0]
    51aa:	9708      	str	r7, [sp, #32]
    51ac:	1c19      	adds	r1, r3, #0
    51ae:	3930      	subs	r1, #48	; 0x30
    51b0:	2909      	cmp	r1, #9
    51b2:	d9ef      	bls.n	5194 <_svfiprintf_r+0x1fc>
    51b4:	e749      	b.n	504a <_svfiprintf_r+0xb2>
    51b6:	2340      	movs	r3, #64	; 0x40
    51b8:	e7ca      	b.n	5150 <_svfiprintf_r+0x1b8>
    51ba:	9f08      	ldr	r7, [sp, #32]
    51bc:	783b      	ldrb	r3, [r7, #0]
    51be:	2b6c      	cmp	r3, #108	; 0x6c
    51c0:	d102      	bne.n	51c8 <_svfiprintf_r+0x230>
    51c2:	3701      	adds	r7, #1
    51c4:	9708      	str	r7, [sp, #32]
    51c6:	e001      	b.n	51cc <_svfiprintf_r+0x234>
    51c8:	2310      	movs	r3, #16
    51ca:	e7c1      	b.n	5150 <_svfiprintf_r+0x1b8>
    51cc:	2320      	movs	r3, #32
    51ce:	e7bf      	b.n	5150 <_svfiprintf_r+0x1b8>
    51d0:	6820      	ldr	r0, [r4, #0]
    51d2:	466a      	mov	r2, sp
    51d4:	ab16      	add	r3, sp, #88	; 0x58
    51d6:	2700      	movs	r7, #0
    51d8:	3247      	adds	r2, #71	; 0x47
    51da:	2101      	movs	r1, #1
    51dc:	7018      	strb	r0, [r3, #0]
    51de:	7017      	strb	r7, [r2, #0]
    51e0:	3404      	adds	r4, #4
    51e2:	9104      	str	r1, [sp, #16]
    51e4:	9709      	str	r7, [sp, #36]	; 0x24
    51e6:	9306      	str	r3, [sp, #24]
    51e8:	e163      	b.n	54b2 <_svfiprintf_r+0x51a>
    51ea:	06b2      	lsls	r2, r6, #26
    51ec:	d509      	bpl.n	5202 <_svfiprintf_r+0x26a>
    51ee:	1de3      	adds	r3, r4, #7
    51f0:	2207      	movs	r2, #7
    51f2:	4393      	bics	r3, r2
    51f4:	1c1c      	adds	r4, r3, #0
    51f6:	6818      	ldr	r0, [r3, #0]
    51f8:	6859      	ldr	r1, [r3, #4]
    51fa:	3408      	adds	r4, #8
    51fc:	9002      	str	r0, [sp, #8]
    51fe:	9103      	str	r1, [sp, #12]
    5200:	e00a      	b.n	5218 <_svfiprintf_r+0x280>
    5202:	1d23      	adds	r3, r4, #4
    5204:	6822      	ldr	r2, [r4, #0]
    5206:	06f1      	lsls	r1, r6, #27
    5208:	d402      	bmi.n	5210 <_svfiprintf_r+0x278>
    520a:	0677      	lsls	r7, r6, #25
    520c:	d500      	bpl.n	5210 <_svfiprintf_r+0x278>
    520e:	b212      	sxth	r2, r2
    5210:	9202      	str	r2, [sp, #8]
    5212:	17d2      	asrs	r2, r2, #31
    5214:	9203      	str	r2, [sp, #12]
    5216:	1c1c      	adds	r4, r3, #0
    5218:	9803      	ldr	r0, [sp, #12]
    521a:	2800      	cmp	r0, #0
    521c:	db00      	blt.n	5220 <_svfiprintf_r+0x288>
    521e:	e0be      	b.n	539e <_svfiprintf_r+0x406>
    5220:	9802      	ldr	r0, [sp, #8]
    5222:	9903      	ldr	r1, [sp, #12]
    5224:	2300      	movs	r3, #0
    5226:	4242      	negs	r2, r0
    5228:	418b      	sbcs	r3, r1
    522a:	9202      	str	r2, [sp, #8]
    522c:	9303      	str	r3, [sp, #12]
    522e:	466b      	mov	r3, sp
    5230:	222d      	movs	r2, #45	; 0x2d
    5232:	3347      	adds	r3, #71	; 0x47
    5234:	701a      	strb	r2, [r3, #0]
    5236:	e0b2      	b.n	539e <_svfiprintf_r+0x406>
    5238:	466b      	mov	r3, sp
    523a:	3347      	adds	r3, #71	; 0x47
    523c:	701a      	strb	r2, [r3, #0]
    523e:	1d23      	adds	r3, r4, #4
    5240:	06b1      	lsls	r1, r6, #26
    5242:	d505      	bpl.n	5250 <_svfiprintf_r+0x2b8>
    5244:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    5246:	6822      	ldr	r2, [r4, #0]
    5248:	17f9      	asrs	r1, r7, #31
    524a:	6017      	str	r7, [r2, #0]
    524c:	6051      	str	r1, [r2, #4]
    524e:	e00a      	b.n	5266 <_svfiprintf_r+0x2ce>
    5250:	06f0      	lsls	r0, r6, #27
    5252:	d405      	bmi.n	5260 <_svfiprintf_r+0x2c8>
    5254:	0670      	lsls	r0, r6, #25
    5256:	d503      	bpl.n	5260 <_svfiprintf_r+0x2c8>
    5258:	6822      	ldr	r2, [r4, #0]
    525a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    525c:	8017      	strh	r7, [r2, #0]
    525e:	e002      	b.n	5266 <_svfiprintf_r+0x2ce>
    5260:	6822      	ldr	r2, [r4, #0]
    5262:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    5264:	6017      	str	r7, [r2, #0]
    5266:	1c1c      	adds	r4, r3, #0
    5268:	e6b9      	b.n	4fde <_svfiprintf_r+0x46>
    526a:	2310      	movs	r3, #16
    526c:	431e      	orrs	r6, r3
    526e:	2220      	movs	r2, #32
    5270:	4032      	ands	r2, r6
    5272:	d00a      	beq.n	528a <_svfiprintf_r+0x2f2>
    5274:	1de3      	adds	r3, r4, #7
    5276:	2207      	movs	r2, #7
    5278:	4393      	bics	r3, r2
    527a:	6818      	ldr	r0, [r3, #0]
    527c:	6859      	ldr	r1, [r3, #4]
    527e:	9002      	str	r0, [sp, #8]
    5280:	9103      	str	r1, [sp, #12]
    5282:	1c1c      	adds	r4, r3, #0
    5284:	3408      	adds	r4, #8
    5286:	2200      	movs	r2, #0
    5288:	e084      	b.n	5394 <_svfiprintf_r+0x3fc>
    528a:	2010      	movs	r0, #16
    528c:	4030      	ands	r0, r6
    528e:	1d21      	adds	r1, r4, #4
    5290:	2800      	cmp	r0, #0
    5292:	d004      	beq.n	529e <_svfiprintf_r+0x306>
    5294:	6824      	ldr	r4, [r4, #0]
    5296:	9203      	str	r2, [sp, #12]
    5298:	9402      	str	r4, [sp, #8]
    529a:	1c0c      	adds	r4, r1, #0
    529c:	e07a      	b.n	5394 <_svfiprintf_r+0x3fc>
    529e:	2340      	movs	r3, #64	; 0x40
    52a0:	4033      	ands	r3, r6
    52a2:	d003      	beq.n	52ac <_svfiprintf_r+0x314>
    52a4:	8824      	ldrh	r4, [r4, #0]
    52a6:	9003      	str	r0, [sp, #12]
    52a8:	9402      	str	r4, [sp, #8]
    52aa:	e002      	b.n	52b2 <_svfiprintf_r+0x31a>
    52ac:	6824      	ldr	r4, [r4, #0]
    52ae:	9303      	str	r3, [sp, #12]
    52b0:	9402      	str	r4, [sp, #8]
    52b2:	1c0c      	adds	r4, r1, #0
    52b4:	e7e7      	b.n	5286 <_svfiprintf_r+0x2ee>
    52b6:	6823      	ldr	r3, [r4, #0]
    52b8:	9f04      	ldr	r7, [sp, #16]
    52ba:	9306      	str	r3, [sp, #24]
    52bc:	466b      	mov	r3, sp
    52be:	2200      	movs	r2, #0
    52c0:	3347      	adds	r3, #71	; 0x47
    52c2:	3404      	adds	r4, #4
    52c4:	701a      	strb	r2, [r3, #0]
    52c6:	4297      	cmp	r7, r2
    52c8:	db0e      	blt.n	52e8 <_svfiprintf_r+0x350>
    52ca:	1c11      	adds	r1, r2, #0
    52cc:	9806      	ldr	r0, [sp, #24]
    52ce:	1c3a      	adds	r2, r7, #0
    52d0:	f7ff f990 	bl	45f4 <memchr>
    52d4:	2800      	cmp	r0, #0
    52d6:	d100      	bne.n	52da <_svfiprintf_r+0x342>
    52d8:	e0ea      	b.n	54b0 <_svfiprintf_r+0x518>
    52da:	9906      	ldr	r1, [sp, #24]
    52dc:	1a40      	subs	r0, r0, r1
    52de:	9004      	str	r0, [sp, #16]
    52e0:	42b8      	cmp	r0, r7
    52e2:	dd05      	ble.n	52f0 <_svfiprintf_r+0x358>
    52e4:	9704      	str	r7, [sp, #16]
    52e6:	e003      	b.n	52f0 <_svfiprintf_r+0x358>
    52e8:	9806      	ldr	r0, [sp, #24]
    52ea:	f7ff fdc3 	bl	4e74 <strlen>
    52ee:	9004      	str	r0, [sp, #16]
    52f0:	2700      	movs	r7, #0
    52f2:	9709      	str	r7, [sp, #36]	; 0x24
    52f4:	e0dd      	b.n	54b2 <_svfiprintf_r+0x51a>
    52f6:	2310      	movs	r3, #16
    52f8:	431e      	orrs	r6, r3
    52fa:	2220      	movs	r2, #32
    52fc:	4032      	ands	r2, r6
    52fe:	d009      	beq.n	5314 <_svfiprintf_r+0x37c>
    5300:	1de3      	adds	r3, r4, #7
    5302:	2207      	movs	r2, #7
    5304:	4393      	bics	r3, r2
    5306:	1c1c      	adds	r4, r3, #0
    5308:	6818      	ldr	r0, [r3, #0]
    530a:	6859      	ldr	r1, [r3, #4]
    530c:	3408      	adds	r4, #8
    530e:	9002      	str	r0, [sp, #8]
    5310:	9103      	str	r1, [sp, #12]
    5312:	e00f      	b.n	5334 <_svfiprintf_r+0x39c>
    5314:	2110      	movs	r1, #16
    5316:	4031      	ands	r1, r6
    5318:	1d23      	adds	r3, r4, #4
    531a:	2900      	cmp	r1, #0
    531c:	d106      	bne.n	532c <_svfiprintf_r+0x394>
    531e:	2240      	movs	r2, #64	; 0x40
    5320:	4032      	ands	r2, r6
    5322:	d003      	beq.n	532c <_svfiprintf_r+0x394>
    5324:	8824      	ldrh	r4, [r4, #0]
    5326:	9103      	str	r1, [sp, #12]
    5328:	9402      	str	r4, [sp, #8]
    532a:	e002      	b.n	5332 <_svfiprintf_r+0x39a>
    532c:	6824      	ldr	r4, [r4, #0]
    532e:	9203      	str	r2, [sp, #12]
    5330:	9402      	str	r4, [sp, #8]
    5332:	1c1c      	adds	r4, r3, #0
    5334:	2201      	movs	r2, #1
    5336:	e02d      	b.n	5394 <_svfiprintf_r+0x3fc>
    5338:	4669      	mov	r1, sp
    533a:	3147      	adds	r1, #71	; 0x47
    533c:	4f30      	ldr	r7, [pc, #192]	; (5400 <_svfiprintf_r+0x468>)
    533e:	700a      	strb	r2, [r1, #0]
    5340:	2120      	movs	r1, #32
    5342:	970e      	str	r7, [sp, #56]	; 0x38
    5344:	4031      	ands	r1, r6
    5346:	d009      	beq.n	535c <_svfiprintf_r+0x3c4>
    5348:	1de2      	adds	r2, r4, #7
    534a:	2107      	movs	r1, #7
    534c:	438a      	bics	r2, r1
    534e:	1c14      	adds	r4, r2, #0
    5350:	6810      	ldr	r0, [r2, #0]
    5352:	6851      	ldr	r1, [r2, #4]
    5354:	3408      	adds	r4, #8
    5356:	9002      	str	r0, [sp, #8]
    5358:	9103      	str	r1, [sp, #12]
    535a:	e00f      	b.n	537c <_svfiprintf_r+0x3e4>
    535c:	2010      	movs	r0, #16
    535e:	4030      	ands	r0, r6
    5360:	1d22      	adds	r2, r4, #4
    5362:	2800      	cmp	r0, #0
    5364:	d106      	bne.n	5374 <_svfiprintf_r+0x3dc>
    5366:	2140      	movs	r1, #64	; 0x40
    5368:	4031      	ands	r1, r6
    536a:	d003      	beq.n	5374 <_svfiprintf_r+0x3dc>
    536c:	8824      	ldrh	r4, [r4, #0]
    536e:	9003      	str	r0, [sp, #12]
    5370:	9402      	str	r4, [sp, #8]
    5372:	e002      	b.n	537a <_svfiprintf_r+0x3e2>
    5374:	6824      	ldr	r4, [r4, #0]
    5376:	9103      	str	r1, [sp, #12]
    5378:	9402      	str	r4, [sp, #8]
    537a:	1c14      	adds	r4, r2, #0
    537c:	2202      	movs	r2, #2
    537e:	07f1      	lsls	r1, r6, #31
    5380:	d508      	bpl.n	5394 <_svfiprintf_r+0x3fc>
    5382:	9902      	ldr	r1, [sp, #8]
    5384:	9f03      	ldr	r7, [sp, #12]
    5386:	4339      	orrs	r1, r7
    5388:	d004      	beq.n	5394 <_svfiprintf_r+0x3fc>
    538a:	a912      	add	r1, sp, #72	; 0x48
    538c:	2030      	movs	r0, #48	; 0x30
    538e:	7008      	strb	r0, [r1, #0]
    5390:	704b      	strb	r3, [r1, #1]
    5392:	4316      	orrs	r6, r2
    5394:	466b      	mov	r3, sp
    5396:	2100      	movs	r1, #0
    5398:	3347      	adds	r3, #71	; 0x47
    539a:	7019      	strb	r1, [r3, #0]
    539c:	e000      	b.n	53a0 <_svfiprintf_r+0x408>
    539e:	2201      	movs	r2, #1
    53a0:	9f04      	ldr	r7, [sp, #16]
    53a2:	2f00      	cmp	r7, #0
    53a4:	db01      	blt.n	53aa <_svfiprintf_r+0x412>
    53a6:	2380      	movs	r3, #128	; 0x80
    53a8:	439e      	bics	r6, r3
    53aa:	9b02      	ldr	r3, [sp, #8]
    53ac:	9803      	ldr	r0, [sp, #12]
    53ae:	4303      	orrs	r3, r0
    53b0:	d102      	bne.n	53b8 <_svfiprintf_r+0x420>
    53b2:	9f04      	ldr	r7, [sp, #16]
    53b4:	2f00      	cmp	r7, #0
    53b6:	d05b      	beq.n	5470 <_svfiprintf_r+0x4d8>
    53b8:	466f      	mov	r7, sp
    53ba:	377f      	adds	r7, #127	; 0x7f
    53bc:	2a01      	cmp	r2, #1
    53be:	d023      	beq.n	5408 <_svfiprintf_r+0x470>
    53c0:	2a02      	cmp	r2, #2
    53c2:	d03f      	beq.n	5444 <_svfiprintf_r+0x4ac>
    53c4:	9802      	ldr	r0, [sp, #8]
    53c6:	2307      	movs	r3, #7
    53c8:	4003      	ands	r3, r0
    53ca:	3330      	adds	r3, #48	; 0x30
    53cc:	9903      	ldr	r1, [sp, #12]
    53ce:	9a02      	ldr	r2, [sp, #8]
    53d0:	9706      	str	r7, [sp, #24]
    53d2:	703b      	strb	r3, [r7, #0]
    53d4:	9f03      	ldr	r7, [sp, #12]
    53d6:	0748      	lsls	r0, r1, #29
    53d8:	08d1      	lsrs	r1, r2, #3
    53da:	08fa      	lsrs	r2, r7, #3
    53dc:	4308      	orrs	r0, r1
    53de:	9203      	str	r2, [sp, #12]
    53e0:	9002      	str	r0, [sp, #8]
    53e2:	1c02      	adds	r2, r0, #0
    53e4:	9f06      	ldr	r7, [sp, #24]
    53e6:	9803      	ldr	r0, [sp, #12]
    53e8:	3f01      	subs	r7, #1
    53ea:	4302      	orrs	r2, r0
    53ec:	d1ea      	bne.n	53c4 <_svfiprintf_r+0x42c>
    53ee:	07f1      	lsls	r1, r6, #31
    53f0:	d548      	bpl.n	5484 <_svfiprintf_r+0x4ec>
    53f2:	2b30      	cmp	r3, #48	; 0x30
    53f4:	d046      	beq.n	5484 <_svfiprintf_r+0x4ec>
    53f6:	2230      	movs	r2, #48	; 0x30
    53f8:	9706      	str	r7, [sp, #24]
    53fa:	703a      	strb	r2, [r7, #0]
    53fc:	e042      	b.n	5484 <_svfiprintf_r+0x4ec>
    53fe:	46c0      	nop			; (mov r8, r8)
    5400:	00007abb 	.word	0x00007abb
    5404:	00007aaa 	.word	0x00007aaa
    5408:	9a03      	ldr	r2, [sp, #12]
    540a:	2a00      	cmp	r2, #0
    540c:	d104      	bne.n	5418 <_svfiprintf_r+0x480>
    540e:	9b02      	ldr	r3, [sp, #8]
    5410:	2b09      	cmp	r3, #9
    5412:	d801      	bhi.n	5418 <_svfiprintf_r+0x480>
    5414:	3330      	adds	r3, #48	; 0x30
    5416:	e033      	b.n	5480 <_svfiprintf_r+0x4e8>
    5418:	9802      	ldr	r0, [sp, #8]
    541a:	9903      	ldr	r1, [sp, #12]
    541c:	220a      	movs	r2, #10
    541e:	2300      	movs	r3, #0
    5420:	9706      	str	r7, [sp, #24]
    5422:	f7fc fa6b 	bl	18fc <__aeabi_uldivmod>
    5426:	9802      	ldr	r0, [sp, #8]
    5428:	9903      	ldr	r1, [sp, #12]
    542a:	3230      	adds	r2, #48	; 0x30
    542c:	703a      	strb	r2, [r7, #0]
    542e:	220a      	movs	r2, #10
    5430:	2300      	movs	r3, #0
    5432:	f7fc fa63 	bl	18fc <__aeabi_uldivmod>
    5436:	1c03      	adds	r3, r0, #0
    5438:	9002      	str	r0, [sp, #8]
    543a:	9103      	str	r1, [sp, #12]
    543c:	3f01      	subs	r7, #1
    543e:	430b      	orrs	r3, r1
    5440:	d1ea      	bne.n	5418 <_svfiprintf_r+0x480>
    5442:	e01f      	b.n	5484 <_svfiprintf_r+0x4ec>
    5444:	9802      	ldr	r0, [sp, #8]
    5446:	9a03      	ldr	r2, [sp, #12]
    5448:	990e      	ldr	r1, [sp, #56]	; 0x38
    544a:	230f      	movs	r3, #15
    544c:	4003      	ands	r3, r0
    544e:	5ccb      	ldrb	r3, [r1, r3]
    5450:	0711      	lsls	r1, r2, #28
    5452:	0902      	lsrs	r2, r0, #4
    5454:	9803      	ldr	r0, [sp, #12]
    5456:	703b      	strb	r3, [r7, #0]
    5458:	0903      	lsrs	r3, r0, #4
    545a:	4311      	orrs	r1, r2
    545c:	9303      	str	r3, [sp, #12]
    545e:	9102      	str	r1, [sp, #8]
    5460:	1c0b      	adds	r3, r1, #0
    5462:	9903      	ldr	r1, [sp, #12]
    5464:	9706      	str	r7, [sp, #24]
    5466:	430b      	orrs	r3, r1
    5468:	3f01      	subs	r7, #1
    546a:	2b00      	cmp	r3, #0
    546c:	d1ea      	bne.n	5444 <_svfiprintf_r+0x4ac>
    546e:	e009      	b.n	5484 <_svfiprintf_r+0x4ec>
    5470:	af20      	add	r7, sp, #128	; 0x80
    5472:	9706      	str	r7, [sp, #24]
    5474:	2a00      	cmp	r2, #0
    5476:	d105      	bne.n	5484 <_svfiprintf_r+0x4ec>
    5478:	07f0      	lsls	r0, r6, #31
    547a:	d503      	bpl.n	5484 <_svfiprintf_r+0x4ec>
    547c:	3f01      	subs	r7, #1
    547e:	2330      	movs	r3, #48	; 0x30
    5480:	703b      	strb	r3, [r7, #0]
    5482:	9706      	str	r7, [sp, #24]
    5484:	9f04      	ldr	r7, [sp, #16]
    5486:	ab20      	add	r3, sp, #128	; 0x80
    5488:	9709      	str	r7, [sp, #36]	; 0x24
    548a:	9f06      	ldr	r7, [sp, #24]
    548c:	1bdb      	subs	r3, r3, r7
    548e:	9304      	str	r3, [sp, #16]
    5490:	e00f      	b.n	54b2 <_svfiprintf_r+0x51a>
    5492:	4669      	mov	r1, sp
    5494:	3147      	adds	r1, #71	; 0x47
    5496:	700a      	strb	r2, [r1, #0]
    5498:	2b00      	cmp	r3, #0
    549a:	d100      	bne.n	549e <_svfiprintf_r+0x506>
    549c:	e154      	b.n	5748 <_svfiprintf_r+0x7b0>
    549e:	aa16      	add	r2, sp, #88	; 0x58
    54a0:	2700      	movs	r7, #0
    54a2:	2001      	movs	r0, #1
    54a4:	7013      	strb	r3, [r2, #0]
    54a6:	700f      	strb	r7, [r1, #0]
    54a8:	9004      	str	r0, [sp, #16]
    54aa:	9709      	str	r7, [sp, #36]	; 0x24
    54ac:	9206      	str	r2, [sp, #24]
    54ae:	e000      	b.n	54b2 <_svfiprintf_r+0x51a>
    54b0:	9009      	str	r0, [sp, #36]	; 0x24
    54b2:	9f04      	ldr	r7, [sp, #16]
    54b4:	9809      	ldr	r0, [sp, #36]	; 0x24
    54b6:	970d      	str	r7, [sp, #52]	; 0x34
    54b8:	4287      	cmp	r7, r0
    54ba:	da00      	bge.n	54be <_svfiprintf_r+0x526>
    54bc:	900d      	str	r0, [sp, #52]	; 0x34
    54be:	466b      	mov	r3, sp
    54c0:	3347      	adds	r3, #71	; 0x47
    54c2:	781b      	ldrb	r3, [r3, #0]
    54c4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    54c6:	1e5a      	subs	r2, r3, #1
    54c8:	4193      	sbcs	r3, r2
    54ca:	18ff      	adds	r7, r7, r3
    54cc:	2302      	movs	r3, #2
    54ce:	4033      	ands	r3, r6
    54d0:	970d      	str	r7, [sp, #52]	; 0x34
    54d2:	930a      	str	r3, [sp, #40]	; 0x28
    54d4:	d001      	beq.n	54da <_svfiprintf_r+0x542>
    54d6:	3702      	adds	r7, #2
    54d8:	970d      	str	r7, [sp, #52]	; 0x34
    54da:	2384      	movs	r3, #132	; 0x84
    54dc:	4033      	ands	r3, r6
    54de:	930f      	str	r3, [sp, #60]	; 0x3c
    54e0:	d133      	bne.n	554a <_svfiprintf_r+0x5b2>
    54e2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    54e4:	990d      	ldr	r1, [sp, #52]	; 0x34
    54e6:	1a47      	subs	r7, r0, r1
    54e8:	2f00      	cmp	r7, #0
    54ea:	dd2e      	ble.n	554a <_svfiprintf_r+0x5b2>
    54ec:	4b9f      	ldr	r3, [pc, #636]	; (576c <_svfiprintf_r+0x7d4>)
    54ee:	602b      	str	r3, [r5, #0]
    54f0:	2f10      	cmp	r7, #16
    54f2:	dd16      	ble.n	5522 <_svfiprintf_r+0x58a>
    54f4:	2310      	movs	r3, #16
    54f6:	606b      	str	r3, [r5, #4]
    54f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
    54fa:	3310      	adds	r3, #16
    54fc:	9315      	str	r3, [sp, #84]	; 0x54
    54fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
    5500:	3301      	adds	r3, #1
    5502:	9314      	str	r3, [sp, #80]	; 0x50
    5504:	2b07      	cmp	r3, #7
    5506:	dc01      	bgt.n	550c <_svfiprintf_r+0x574>
    5508:	3508      	adds	r5, #8
    550a:	e008      	b.n	551e <_svfiprintf_r+0x586>
    550c:	9807      	ldr	r0, [sp, #28]
    550e:	9905      	ldr	r1, [sp, #20]
    5510:	aa13      	add	r2, sp, #76	; 0x4c
    5512:	f7ff fcb7 	bl	4e84 <__ssprint_r>
    5516:	2800      	cmp	r0, #0
    5518:	d000      	beq.n	551c <_svfiprintf_r+0x584>
    551a:	e11d      	b.n	5758 <_svfiprintf_r+0x7c0>
    551c:	ad20      	add	r5, sp, #128	; 0x80
    551e:	3f10      	subs	r7, #16
    5520:	e7e4      	b.n	54ec <_svfiprintf_r+0x554>
    5522:	9a15      	ldr	r2, [sp, #84]	; 0x54
    5524:	9b14      	ldr	r3, [sp, #80]	; 0x50
    5526:	606f      	str	r7, [r5, #4]
    5528:	3301      	adds	r3, #1
    552a:	18bf      	adds	r7, r7, r2
    552c:	9715      	str	r7, [sp, #84]	; 0x54
    552e:	9314      	str	r3, [sp, #80]	; 0x50
    5530:	2b07      	cmp	r3, #7
    5532:	dc01      	bgt.n	5538 <_svfiprintf_r+0x5a0>
    5534:	3508      	adds	r5, #8
    5536:	e008      	b.n	554a <_svfiprintf_r+0x5b2>
    5538:	9807      	ldr	r0, [sp, #28]
    553a:	9905      	ldr	r1, [sp, #20]
    553c:	aa13      	add	r2, sp, #76	; 0x4c
    553e:	f7ff fca1 	bl	4e84 <__ssprint_r>
    5542:	2800      	cmp	r0, #0
    5544:	d000      	beq.n	5548 <_svfiprintf_r+0x5b0>
    5546:	e107      	b.n	5758 <_svfiprintf_r+0x7c0>
    5548:	ad20      	add	r5, sp, #128	; 0x80
    554a:	466b      	mov	r3, sp
    554c:	3347      	adds	r3, #71	; 0x47
    554e:	781a      	ldrb	r2, [r3, #0]
    5550:	2a00      	cmp	r2, #0
    5552:	d015      	beq.n	5580 <_svfiprintf_r+0x5e8>
    5554:	602b      	str	r3, [r5, #0]
    5556:	2301      	movs	r3, #1
    5558:	606b      	str	r3, [r5, #4]
    555a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    555c:	3301      	adds	r3, #1
    555e:	9315      	str	r3, [sp, #84]	; 0x54
    5560:	9b14      	ldr	r3, [sp, #80]	; 0x50
    5562:	3301      	adds	r3, #1
    5564:	9314      	str	r3, [sp, #80]	; 0x50
    5566:	2b07      	cmp	r3, #7
    5568:	dc01      	bgt.n	556e <_svfiprintf_r+0x5d6>
    556a:	3508      	adds	r5, #8
    556c:	e008      	b.n	5580 <_svfiprintf_r+0x5e8>
    556e:	9807      	ldr	r0, [sp, #28]
    5570:	9905      	ldr	r1, [sp, #20]
    5572:	aa13      	add	r2, sp, #76	; 0x4c
    5574:	f7ff fc86 	bl	4e84 <__ssprint_r>
    5578:	2800      	cmp	r0, #0
    557a:	d000      	beq.n	557e <_svfiprintf_r+0x5e6>
    557c:	e0ec      	b.n	5758 <_svfiprintf_r+0x7c0>
    557e:	ad20      	add	r5, sp, #128	; 0x80
    5580:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    5582:	2f00      	cmp	r7, #0
    5584:	d016      	beq.n	55b4 <_svfiprintf_r+0x61c>
    5586:	ab12      	add	r3, sp, #72	; 0x48
    5588:	602b      	str	r3, [r5, #0]
    558a:	2302      	movs	r3, #2
    558c:	606b      	str	r3, [r5, #4]
    558e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    5590:	3302      	adds	r3, #2
    5592:	9315      	str	r3, [sp, #84]	; 0x54
    5594:	9b14      	ldr	r3, [sp, #80]	; 0x50
    5596:	3301      	adds	r3, #1
    5598:	9314      	str	r3, [sp, #80]	; 0x50
    559a:	2b07      	cmp	r3, #7
    559c:	dc01      	bgt.n	55a2 <_svfiprintf_r+0x60a>
    559e:	3508      	adds	r5, #8
    55a0:	e008      	b.n	55b4 <_svfiprintf_r+0x61c>
    55a2:	9807      	ldr	r0, [sp, #28]
    55a4:	9905      	ldr	r1, [sp, #20]
    55a6:	aa13      	add	r2, sp, #76	; 0x4c
    55a8:	f7ff fc6c 	bl	4e84 <__ssprint_r>
    55ac:	2800      	cmp	r0, #0
    55ae:	d000      	beq.n	55b2 <_svfiprintf_r+0x61a>
    55b0:	e0d2      	b.n	5758 <_svfiprintf_r+0x7c0>
    55b2:	ad20      	add	r5, sp, #128	; 0x80
    55b4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    55b6:	2f80      	cmp	r7, #128	; 0x80
    55b8:	d134      	bne.n	5624 <_svfiprintf_r+0x68c>
    55ba:	980b      	ldr	r0, [sp, #44]	; 0x2c
    55bc:	990d      	ldr	r1, [sp, #52]	; 0x34
    55be:	1a47      	subs	r7, r0, r1
    55c0:	2f00      	cmp	r7, #0
    55c2:	dd2f      	ble.n	5624 <_svfiprintf_r+0x68c>
    55c4:	4b69      	ldr	r3, [pc, #420]	; (576c <_svfiprintf_r+0x7d4>)
    55c6:	3310      	adds	r3, #16
    55c8:	602b      	str	r3, [r5, #0]
    55ca:	2f10      	cmp	r7, #16
    55cc:	dd16      	ble.n	55fc <_svfiprintf_r+0x664>
    55ce:	2310      	movs	r3, #16
    55d0:	606b      	str	r3, [r5, #4]
    55d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
    55d4:	3310      	adds	r3, #16
    55d6:	9315      	str	r3, [sp, #84]	; 0x54
    55d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
    55da:	3301      	adds	r3, #1
    55dc:	9314      	str	r3, [sp, #80]	; 0x50
    55de:	2b07      	cmp	r3, #7
    55e0:	dc01      	bgt.n	55e6 <_svfiprintf_r+0x64e>
    55e2:	3508      	adds	r5, #8
    55e4:	e008      	b.n	55f8 <_svfiprintf_r+0x660>
    55e6:	9807      	ldr	r0, [sp, #28]
    55e8:	9905      	ldr	r1, [sp, #20]
    55ea:	aa13      	add	r2, sp, #76	; 0x4c
    55ec:	f7ff fc4a 	bl	4e84 <__ssprint_r>
    55f0:	2800      	cmp	r0, #0
    55f2:	d000      	beq.n	55f6 <_svfiprintf_r+0x65e>
    55f4:	e0b0      	b.n	5758 <_svfiprintf_r+0x7c0>
    55f6:	ad20      	add	r5, sp, #128	; 0x80
    55f8:	3f10      	subs	r7, #16
    55fa:	e7e3      	b.n	55c4 <_svfiprintf_r+0x62c>
    55fc:	9a15      	ldr	r2, [sp, #84]	; 0x54
    55fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
    5600:	606f      	str	r7, [r5, #4]
    5602:	3301      	adds	r3, #1
    5604:	18bf      	adds	r7, r7, r2
    5606:	9715      	str	r7, [sp, #84]	; 0x54
    5608:	9314      	str	r3, [sp, #80]	; 0x50
    560a:	2b07      	cmp	r3, #7
    560c:	dc01      	bgt.n	5612 <_svfiprintf_r+0x67a>
    560e:	3508      	adds	r5, #8
    5610:	e008      	b.n	5624 <_svfiprintf_r+0x68c>
    5612:	9807      	ldr	r0, [sp, #28]
    5614:	9905      	ldr	r1, [sp, #20]
    5616:	aa13      	add	r2, sp, #76	; 0x4c
    5618:	f7ff fc34 	bl	4e84 <__ssprint_r>
    561c:	2800      	cmp	r0, #0
    561e:	d000      	beq.n	5622 <_svfiprintf_r+0x68a>
    5620:	e09a      	b.n	5758 <_svfiprintf_r+0x7c0>
    5622:	ad20      	add	r5, sp, #128	; 0x80
    5624:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5626:	9804      	ldr	r0, [sp, #16]
    5628:	1a1f      	subs	r7, r3, r0
    562a:	2f00      	cmp	r7, #0
    562c:	dd2d      	ble.n	568a <_svfiprintf_r+0x6f2>
    562e:	4b4f      	ldr	r3, [pc, #316]	; (576c <_svfiprintf_r+0x7d4>)
    5630:	3310      	adds	r3, #16
    5632:	602b      	str	r3, [r5, #0]
    5634:	2f10      	cmp	r7, #16
    5636:	dd15      	ble.n	5664 <_svfiprintf_r+0x6cc>
    5638:	2310      	movs	r3, #16
    563a:	606b      	str	r3, [r5, #4]
    563c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    563e:	3310      	adds	r3, #16
    5640:	9315      	str	r3, [sp, #84]	; 0x54
    5642:	9b14      	ldr	r3, [sp, #80]	; 0x50
    5644:	3301      	adds	r3, #1
    5646:	9314      	str	r3, [sp, #80]	; 0x50
    5648:	2b07      	cmp	r3, #7
    564a:	dc01      	bgt.n	5650 <_svfiprintf_r+0x6b8>
    564c:	3508      	adds	r5, #8
    564e:	e007      	b.n	5660 <_svfiprintf_r+0x6c8>
    5650:	9807      	ldr	r0, [sp, #28]
    5652:	9905      	ldr	r1, [sp, #20]
    5654:	aa13      	add	r2, sp, #76	; 0x4c
    5656:	f7ff fc15 	bl	4e84 <__ssprint_r>
    565a:	2800      	cmp	r0, #0
    565c:	d17c      	bne.n	5758 <_svfiprintf_r+0x7c0>
    565e:	ad20      	add	r5, sp, #128	; 0x80
    5660:	3f10      	subs	r7, #16
    5662:	e7e4      	b.n	562e <_svfiprintf_r+0x696>
    5664:	9915      	ldr	r1, [sp, #84]	; 0x54
    5666:	9b14      	ldr	r3, [sp, #80]	; 0x50
    5668:	606f      	str	r7, [r5, #4]
    566a:	3301      	adds	r3, #1
    566c:	187f      	adds	r7, r7, r1
    566e:	9715      	str	r7, [sp, #84]	; 0x54
    5670:	9314      	str	r3, [sp, #80]	; 0x50
    5672:	2b07      	cmp	r3, #7
    5674:	dc01      	bgt.n	567a <_svfiprintf_r+0x6e2>
    5676:	3508      	adds	r5, #8
    5678:	e007      	b.n	568a <_svfiprintf_r+0x6f2>
    567a:	9807      	ldr	r0, [sp, #28]
    567c:	9905      	ldr	r1, [sp, #20]
    567e:	aa13      	add	r2, sp, #76	; 0x4c
    5680:	f7ff fc00 	bl	4e84 <__ssprint_r>
    5684:	2800      	cmp	r0, #0
    5686:	d167      	bne.n	5758 <_svfiprintf_r+0x7c0>
    5688:	ad20      	add	r5, sp, #128	; 0x80
    568a:	9f06      	ldr	r7, [sp, #24]
    568c:	9815      	ldr	r0, [sp, #84]	; 0x54
    568e:	602f      	str	r7, [r5, #0]
    5690:	9f04      	ldr	r7, [sp, #16]
    5692:	183b      	adds	r3, r7, r0
    5694:	9315      	str	r3, [sp, #84]	; 0x54
    5696:	9b14      	ldr	r3, [sp, #80]	; 0x50
    5698:	606f      	str	r7, [r5, #4]
    569a:	3301      	adds	r3, #1
    569c:	9314      	str	r3, [sp, #80]	; 0x50
    569e:	2b07      	cmp	r3, #7
    56a0:	dc01      	bgt.n	56a6 <_svfiprintf_r+0x70e>
    56a2:	3508      	adds	r5, #8
    56a4:	e007      	b.n	56b6 <_svfiprintf_r+0x71e>
    56a6:	9807      	ldr	r0, [sp, #28]
    56a8:	9905      	ldr	r1, [sp, #20]
    56aa:	aa13      	add	r2, sp, #76	; 0x4c
    56ac:	f7ff fbea 	bl	4e84 <__ssprint_r>
    56b0:	2800      	cmp	r0, #0
    56b2:	d151      	bne.n	5758 <_svfiprintf_r+0x7c0>
    56b4:	ad20      	add	r5, sp, #128	; 0x80
    56b6:	0771      	lsls	r1, r6, #29
    56b8:	d40b      	bmi.n	56d2 <_svfiprintf_r+0x73a>
    56ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    56bc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    56be:	42bb      	cmp	r3, r7
    56c0:	da00      	bge.n	56c4 <_svfiprintf_r+0x72c>
    56c2:	1c3b      	adds	r3, r7, #0
    56c4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    56c6:	9815      	ldr	r0, [sp, #84]	; 0x54
    56c8:	18ff      	adds	r7, r7, r3
    56ca:	970c      	str	r7, [sp, #48]	; 0x30
    56cc:	2800      	cmp	r0, #0
    56ce:	d037      	beq.n	5740 <_svfiprintf_r+0x7a8>
    56d0:	e02f      	b.n	5732 <_svfiprintf_r+0x79a>
    56d2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    56d4:	980d      	ldr	r0, [sp, #52]	; 0x34
    56d6:	1a3e      	subs	r6, r7, r0
    56d8:	2e00      	cmp	r6, #0
    56da:	ddee      	ble.n	56ba <_svfiprintf_r+0x722>
    56dc:	4b23      	ldr	r3, [pc, #140]	; (576c <_svfiprintf_r+0x7d4>)
    56de:	602b      	str	r3, [r5, #0]
    56e0:	2e10      	cmp	r6, #16
    56e2:	dd15      	ble.n	5710 <_svfiprintf_r+0x778>
    56e4:	2310      	movs	r3, #16
    56e6:	606b      	str	r3, [r5, #4]
    56e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
    56ea:	3310      	adds	r3, #16
    56ec:	9315      	str	r3, [sp, #84]	; 0x54
    56ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
    56f0:	3301      	adds	r3, #1
    56f2:	9314      	str	r3, [sp, #80]	; 0x50
    56f4:	2b07      	cmp	r3, #7
    56f6:	dc01      	bgt.n	56fc <_svfiprintf_r+0x764>
    56f8:	3508      	adds	r5, #8
    56fa:	e007      	b.n	570c <_svfiprintf_r+0x774>
    56fc:	9807      	ldr	r0, [sp, #28]
    56fe:	9905      	ldr	r1, [sp, #20]
    5700:	aa13      	add	r2, sp, #76	; 0x4c
    5702:	f7ff fbbf 	bl	4e84 <__ssprint_r>
    5706:	2800      	cmp	r0, #0
    5708:	d126      	bne.n	5758 <_svfiprintf_r+0x7c0>
    570a:	ad20      	add	r5, sp, #128	; 0x80
    570c:	3e10      	subs	r6, #16
    570e:	e7e5      	b.n	56dc <_svfiprintf_r+0x744>
    5710:	9915      	ldr	r1, [sp, #84]	; 0x54
    5712:	9b14      	ldr	r3, [sp, #80]	; 0x50
    5714:	606e      	str	r6, [r5, #4]
    5716:	3301      	adds	r3, #1
    5718:	1876      	adds	r6, r6, r1
    571a:	9615      	str	r6, [sp, #84]	; 0x54
    571c:	9314      	str	r3, [sp, #80]	; 0x50
    571e:	2b07      	cmp	r3, #7
    5720:	ddcb      	ble.n	56ba <_svfiprintf_r+0x722>
    5722:	9807      	ldr	r0, [sp, #28]
    5724:	9905      	ldr	r1, [sp, #20]
    5726:	aa13      	add	r2, sp, #76	; 0x4c
    5728:	f7ff fbac 	bl	4e84 <__ssprint_r>
    572c:	2800      	cmp	r0, #0
    572e:	d0c4      	beq.n	56ba <_svfiprintf_r+0x722>
    5730:	e012      	b.n	5758 <_svfiprintf_r+0x7c0>
    5732:	9807      	ldr	r0, [sp, #28]
    5734:	9905      	ldr	r1, [sp, #20]
    5736:	aa13      	add	r2, sp, #76	; 0x4c
    5738:	f7ff fba4 	bl	4e84 <__ssprint_r>
    573c:	2800      	cmp	r0, #0
    573e:	d10b      	bne.n	5758 <_svfiprintf_r+0x7c0>
    5740:	2300      	movs	r3, #0
    5742:	9314      	str	r3, [sp, #80]	; 0x50
    5744:	ad20      	add	r5, sp, #128	; 0x80
    5746:	e44a      	b.n	4fde <_svfiprintf_r+0x46>
    5748:	9a15      	ldr	r2, [sp, #84]	; 0x54
    574a:	2a00      	cmp	r2, #0
    574c:	d004      	beq.n	5758 <_svfiprintf_r+0x7c0>
    574e:	9807      	ldr	r0, [sp, #28]
    5750:	9905      	ldr	r1, [sp, #20]
    5752:	aa13      	add	r2, sp, #76	; 0x4c
    5754:	f7ff fb96 	bl	4e84 <__ssprint_r>
    5758:	9f05      	ldr	r7, [sp, #20]
    575a:	980c      	ldr	r0, [sp, #48]	; 0x30
    575c:	89bb      	ldrh	r3, [r7, #12]
    575e:	0659      	lsls	r1, r3, #25
    5760:	d501      	bpl.n	5766 <_svfiprintf_r+0x7ce>
    5762:	2001      	movs	r0, #1
    5764:	4240      	negs	r0, r0
    5766:	b031      	add	sp, #196	; 0xc4
    5768:	bdf0      	pop	{r4, r5, r6, r7, pc}
    576a:	46c0      	nop			; (mov r8, r8)
    576c:	00007c10 	.word	0x00007c10

00005770 <_calloc_r>:
    5770:	b510      	push	{r4, lr}
    5772:	4351      	muls	r1, r2
    5774:	f7fe fd46 	bl	4204 <_malloc_r>
    5778:	1e04      	subs	r4, r0, #0
    577a:	d023      	beq.n	57c4 <_calloc_r+0x54>
    577c:	1c03      	adds	r3, r0, #0
    577e:	3b08      	subs	r3, #8
    5780:	685a      	ldr	r2, [r3, #4]
    5782:	2303      	movs	r3, #3
    5784:	439a      	bics	r2, r3
    5786:	3a04      	subs	r2, #4
    5788:	2a24      	cmp	r2, #36	; 0x24
    578a:	d818      	bhi.n	57be <_calloc_r+0x4e>
    578c:	1c03      	adds	r3, r0, #0
    578e:	2a13      	cmp	r2, #19
    5790:	d910      	bls.n	57b4 <_calloc_r+0x44>
    5792:	2100      	movs	r1, #0
    5794:	6001      	str	r1, [r0, #0]
    5796:	6041      	str	r1, [r0, #4]
    5798:	3308      	adds	r3, #8
    579a:	2a1b      	cmp	r2, #27
    579c:	d90a      	bls.n	57b4 <_calloc_r+0x44>
    579e:	6081      	str	r1, [r0, #8]
    57a0:	60c1      	str	r1, [r0, #12]
    57a2:	2a24      	cmp	r2, #36	; 0x24
    57a4:	d002      	beq.n	57ac <_calloc_r+0x3c>
    57a6:	1c03      	adds	r3, r0, #0
    57a8:	3310      	adds	r3, #16
    57aa:	e003      	b.n	57b4 <_calloc_r+0x44>
    57ac:	1c03      	adds	r3, r0, #0
    57ae:	6101      	str	r1, [r0, #16]
    57b0:	3318      	adds	r3, #24
    57b2:	6141      	str	r1, [r0, #20]
    57b4:	2200      	movs	r2, #0
    57b6:	601a      	str	r2, [r3, #0]
    57b8:	605a      	str	r2, [r3, #4]
    57ba:	609a      	str	r2, [r3, #8]
    57bc:	e002      	b.n	57c4 <_calloc_r+0x54>
    57be:	2100      	movs	r1, #0
    57c0:	f7fc fd15 	bl	21ee <memset>
    57c4:	1c20      	adds	r0, r4, #0
    57c6:	bd10      	pop	{r4, pc}

000057c8 <memmove>:
    57c8:	b570      	push	{r4, r5, r6, lr}
    57ca:	4281      	cmp	r1, r0
    57cc:	d301      	bcc.n	57d2 <memmove+0xa>
    57ce:	2300      	movs	r3, #0
    57d0:	e00c      	b.n	57ec <memmove+0x24>
    57d2:	188c      	adds	r4, r1, r2
    57d4:	42a0      	cmp	r0, r4
    57d6:	d2fa      	bcs.n	57ce <memmove+0x6>
    57d8:	1885      	adds	r5, r0, r2
    57da:	1c13      	adds	r3, r2, #0
    57dc:	3b01      	subs	r3, #1
    57de:	d30b      	bcc.n	57f8 <memmove+0x30>
    57e0:	4251      	negs	r1, r2
    57e2:	1866      	adds	r6, r4, r1
    57e4:	5cf6      	ldrb	r6, [r6, r3]
    57e6:	1869      	adds	r1, r5, r1
    57e8:	54ce      	strb	r6, [r1, r3]
    57ea:	e7f7      	b.n	57dc <memmove+0x14>
    57ec:	4293      	cmp	r3, r2
    57ee:	d003      	beq.n	57f8 <memmove+0x30>
    57f0:	5ccc      	ldrb	r4, [r1, r3]
    57f2:	54c4      	strb	r4, [r0, r3]
    57f4:	3301      	adds	r3, #1
    57f6:	e7f9      	b.n	57ec <memmove+0x24>
    57f8:	bd70      	pop	{r4, r5, r6, pc}
	...

000057fc <_realloc_r>:
    57fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    57fe:	b087      	sub	sp, #28
    5800:	9003      	str	r0, [sp, #12]
    5802:	1c0c      	adds	r4, r1, #0
    5804:	9205      	str	r2, [sp, #20]
    5806:	d103      	bne.n	5810 <_realloc_r+0x14>
    5808:	1c11      	adds	r1, r2, #0
    580a:	f7fe fcfb 	bl	4204 <_malloc_r>
    580e:	e195      	b.n	5b3c <_realloc_r+0x340>
    5810:	1c27      	adds	r7, r4, #0
    5812:	9803      	ldr	r0, [sp, #12]
    5814:	3f08      	subs	r7, #8
    5816:	f7fe fef8 	bl	460a <__malloc_lock>
    581a:	687d      	ldr	r5, [r7, #4]
    581c:	2303      	movs	r3, #3
    581e:	1c2e      	adds	r6, r5, #0
    5820:	439e      	bics	r6, r3
    5822:	9b05      	ldr	r3, [sp, #20]
    5824:	9601      	str	r6, [sp, #4]
    5826:	330b      	adds	r3, #11
    5828:	2b16      	cmp	r3, #22
    582a:	d904      	bls.n	5836 <_realloc_r+0x3a>
    582c:	2207      	movs	r2, #7
    582e:	4393      	bics	r3, r2
    5830:	9302      	str	r3, [sp, #8]
    5832:	d502      	bpl.n	583a <_realloc_r+0x3e>
    5834:	e005      	b.n	5842 <_realloc_r+0x46>
    5836:	2610      	movs	r6, #16
    5838:	9602      	str	r6, [sp, #8]
    583a:	9e02      	ldr	r6, [sp, #8]
    583c:	9805      	ldr	r0, [sp, #20]
    583e:	4286      	cmp	r6, r0
    5840:	d204      	bcs.n	584c <_realloc_r+0x50>
    5842:	9c03      	ldr	r4, [sp, #12]
    5844:	230c      	movs	r3, #12
    5846:	6023      	str	r3, [r4, #0]
    5848:	2000      	movs	r0, #0
    584a:	e177      	b.n	5b3c <_realloc_r+0x340>
    584c:	9e01      	ldr	r6, [sp, #4]
    584e:	9802      	ldr	r0, [sp, #8]
    5850:	4286      	cmp	r6, r0
    5852:	db00      	blt.n	5856 <_realloc_r+0x5a>
    5854:	e14e      	b.n	5af4 <_realloc_r+0x2f8>
    5856:	49ba      	ldr	r1, [pc, #744]	; (5b40 <_realloc_r+0x344>)
    5858:	19bb      	adds	r3, r7, r6
    585a:	688a      	ldr	r2, [r1, #8]
    585c:	685e      	ldr	r6, [r3, #4]
    585e:	4694      	mov	ip, r2
    5860:	4293      	cmp	r3, r2
    5862:	d006      	beq.n	5872 <_realloc_r+0x76>
    5864:	2201      	movs	r2, #1
    5866:	1c30      	adds	r0, r6, #0
    5868:	4390      	bics	r0, r2
    586a:	1818      	adds	r0, r3, r0
    586c:	6840      	ldr	r0, [r0, #4]
    586e:	4210      	tst	r0, r2
    5870:	d124      	bne.n	58bc <_realloc_r+0xc0>
    5872:	2203      	movs	r2, #3
    5874:	1c30      	adds	r0, r6, #0
    5876:	9e01      	ldr	r6, [sp, #4]
    5878:	4390      	bics	r0, r2
    587a:	1982      	adds	r2, r0, r6
    587c:	9e02      	ldr	r6, [sp, #8]
    587e:	4563      	cmp	r3, ip
    5880:	d114      	bne.n	58ac <_realloc_r+0xb0>
    5882:	3610      	adds	r6, #16
    5884:	42b2      	cmp	r2, r6
    5886:	db1b      	blt.n	58c0 <_realloc_r+0xc4>
    5888:	9802      	ldr	r0, [sp, #8]
    588a:	1c23      	adds	r3, r4, #0
    588c:	183e      	adds	r6, r7, r0
    588e:	608e      	str	r6, [r1, #8]
    5890:	1a12      	subs	r2, r2, r0
    5892:	2101      	movs	r1, #1
    5894:	430a      	orrs	r2, r1
    5896:	6072      	str	r2, [r6, #4]
    5898:	3b08      	subs	r3, #8
    589a:	685a      	ldr	r2, [r3, #4]
    589c:	4011      	ands	r1, r2
    589e:	4301      	orrs	r1, r0
    58a0:	6059      	str	r1, [r3, #4]
    58a2:	9803      	ldr	r0, [sp, #12]
    58a4:	f7fe feb2 	bl	460c <__malloc_unlock>
    58a8:	1c20      	adds	r0, r4, #0
    58aa:	e147      	b.n	5b3c <_realloc_r+0x340>
    58ac:	42b2      	cmp	r2, r6
    58ae:	db07      	blt.n	58c0 <_realloc_r+0xc4>
    58b0:	68d9      	ldr	r1, [r3, #12]
    58b2:	689b      	ldr	r3, [r3, #8]
    58b4:	9201      	str	r2, [sp, #4]
    58b6:	60d9      	str	r1, [r3, #12]
    58b8:	608b      	str	r3, [r1, #8]
    58ba:	e11b      	b.n	5af4 <_realloc_r+0x2f8>
    58bc:	2000      	movs	r0, #0
    58be:	1c03      	adds	r3, r0, #0
    58c0:	07e9      	lsls	r1, r5, #31
    58c2:	d500      	bpl.n	58c6 <_realloc_r+0xca>
    58c4:	e0c5      	b.n	5a52 <_realloc_r+0x256>
    58c6:	1c22      	adds	r2, r4, #0
    58c8:	3a08      	subs	r2, #8
    58ca:	6815      	ldr	r5, [r2, #0]
    58cc:	2203      	movs	r2, #3
    58ce:	1b7d      	subs	r5, r7, r5
    58d0:	686e      	ldr	r6, [r5, #4]
    58d2:	4396      	bics	r6, r2
    58d4:	9a01      	ldr	r2, [sp, #4]
    58d6:	18b6      	adds	r6, r6, r2
    58d8:	2b00      	cmp	r3, #0
    58da:	d100      	bne.n	58de <_realloc_r+0xe2>
    58dc:	e083      	b.n	59e6 <_realloc_r+0x1ea>
    58de:	1830      	adds	r0, r6, r0
    58e0:	9004      	str	r0, [sp, #16]
    58e2:	4563      	cmp	r3, ip
    58e4:	d144      	bne.n	5970 <_realloc_r+0x174>
    58e6:	9b02      	ldr	r3, [sp, #8]
    58e8:	3310      	adds	r3, #16
    58ea:	4298      	cmp	r0, r3
    58ec:	db7b      	blt.n	59e6 <_realloc_r+0x1ea>
    58ee:	68aa      	ldr	r2, [r5, #8]
    58f0:	68eb      	ldr	r3, [r5, #12]
    58f2:	1c2e      	adds	r6, r5, #0
    58f4:	60d3      	str	r3, [r2, #12]
    58f6:	609a      	str	r2, [r3, #8]
    58f8:	9a01      	ldr	r2, [sp, #4]
    58fa:	3608      	adds	r6, #8
    58fc:	3a04      	subs	r2, #4
    58fe:	2a24      	cmp	r2, #36	; 0x24
    5900:	d824      	bhi.n	594c <_realloc_r+0x150>
    5902:	1c33      	adds	r3, r6, #0
    5904:	2a13      	cmp	r2, #19
    5906:	d91a      	bls.n	593e <_realloc_r+0x142>
    5908:	6823      	ldr	r3, [r4, #0]
    590a:	60ab      	str	r3, [r5, #8]
    590c:	6860      	ldr	r0, [r4, #4]
    590e:	60e8      	str	r0, [r5, #12]
    5910:	2a1b      	cmp	r2, #27
    5912:	d803      	bhi.n	591c <_realloc_r+0x120>
    5914:	1c2b      	adds	r3, r5, #0
    5916:	3310      	adds	r3, #16
    5918:	3408      	adds	r4, #8
    591a:	e010      	b.n	593e <_realloc_r+0x142>
    591c:	68a1      	ldr	r1, [r4, #8]
    591e:	6129      	str	r1, [r5, #16]
    5920:	68e3      	ldr	r3, [r4, #12]
    5922:	616b      	str	r3, [r5, #20]
    5924:	2a24      	cmp	r2, #36	; 0x24
    5926:	d003      	beq.n	5930 <_realloc_r+0x134>
    5928:	1c2b      	adds	r3, r5, #0
    592a:	3318      	adds	r3, #24
    592c:	3410      	adds	r4, #16
    592e:	e006      	b.n	593e <_realloc_r+0x142>
    5930:	6920      	ldr	r0, [r4, #16]
    5932:	1c2b      	adds	r3, r5, #0
    5934:	61a8      	str	r0, [r5, #24]
    5936:	6961      	ldr	r1, [r4, #20]
    5938:	3320      	adds	r3, #32
    593a:	61e9      	str	r1, [r5, #28]
    593c:	3418      	adds	r4, #24
    593e:	6822      	ldr	r2, [r4, #0]
    5940:	601a      	str	r2, [r3, #0]
    5942:	6860      	ldr	r0, [r4, #4]
    5944:	6058      	str	r0, [r3, #4]
    5946:	68a4      	ldr	r4, [r4, #8]
    5948:	609c      	str	r4, [r3, #8]
    594a:	e003      	b.n	5954 <_realloc_r+0x158>
    594c:	1c30      	adds	r0, r6, #0
    594e:	1c21      	adds	r1, r4, #0
    5950:	f7ff ff3a 	bl	57c8 <memmove>
    5954:	9c02      	ldr	r4, [sp, #8]
    5956:	4b7a      	ldr	r3, [pc, #488]	; (5b40 <_realloc_r+0x344>)
    5958:	9804      	ldr	r0, [sp, #16]
    595a:	192a      	adds	r2, r5, r4
    595c:	609a      	str	r2, [r3, #8]
    595e:	1b07      	subs	r7, r0, r4
    5960:	2301      	movs	r3, #1
    5962:	431f      	orrs	r7, r3
    5964:	6057      	str	r7, [r2, #4]
    5966:	6869      	ldr	r1, [r5, #4]
    5968:	400b      	ands	r3, r1
    596a:	4323      	orrs	r3, r4
    596c:	606b      	str	r3, [r5, #4]
    596e:	e0bc      	b.n	5aea <_realloc_r+0x2ee>
    5970:	9a02      	ldr	r2, [sp, #8]
    5972:	4290      	cmp	r0, r2
    5974:	db37      	blt.n	59e6 <_realloc_r+0x1ea>
    5976:	68da      	ldr	r2, [r3, #12]
    5978:	689b      	ldr	r3, [r3, #8]
    597a:	1c28      	adds	r0, r5, #0
    597c:	60da      	str	r2, [r3, #12]
    597e:	6093      	str	r3, [r2, #8]
    5980:	68aa      	ldr	r2, [r5, #8]
    5982:	68eb      	ldr	r3, [r5, #12]
    5984:	3008      	adds	r0, #8
    5986:	60d3      	str	r3, [r2, #12]
    5988:	609a      	str	r2, [r3, #8]
    598a:	9a01      	ldr	r2, [sp, #4]
    598c:	3a04      	subs	r2, #4
    598e:	2a24      	cmp	r2, #36	; 0x24
    5990:	d824      	bhi.n	59dc <_realloc_r+0x1e0>
    5992:	2a13      	cmp	r2, #19
    5994:	d919      	bls.n	59ca <_realloc_r+0x1ce>
    5996:	6823      	ldr	r3, [r4, #0]
    5998:	60ab      	str	r3, [r5, #8]
    599a:	6866      	ldr	r6, [r4, #4]
    599c:	60ee      	str	r6, [r5, #12]
    599e:	2a1b      	cmp	r2, #27
    59a0:	d802      	bhi.n	59a8 <_realloc_r+0x1ac>
    59a2:	3008      	adds	r0, #8
    59a4:	3408      	adds	r4, #8
    59a6:	e010      	b.n	59ca <_realloc_r+0x1ce>
    59a8:	68a0      	ldr	r0, [r4, #8]
    59aa:	6128      	str	r0, [r5, #16]
    59ac:	68e1      	ldr	r1, [r4, #12]
    59ae:	6169      	str	r1, [r5, #20]
    59b0:	2a24      	cmp	r2, #36	; 0x24
    59b2:	d003      	beq.n	59bc <_realloc_r+0x1c0>
    59b4:	1c28      	adds	r0, r5, #0
    59b6:	3018      	adds	r0, #24
    59b8:	3410      	adds	r4, #16
    59ba:	e006      	b.n	59ca <_realloc_r+0x1ce>
    59bc:	6922      	ldr	r2, [r4, #16]
    59be:	1c28      	adds	r0, r5, #0
    59c0:	61aa      	str	r2, [r5, #24]
    59c2:	6963      	ldr	r3, [r4, #20]
    59c4:	3020      	adds	r0, #32
    59c6:	61eb      	str	r3, [r5, #28]
    59c8:	3418      	adds	r4, #24
    59ca:	6826      	ldr	r6, [r4, #0]
    59cc:	6006      	str	r6, [r0, #0]
    59ce:	6861      	ldr	r1, [r4, #4]
    59d0:	6041      	str	r1, [r0, #4]
    59d2:	68a4      	ldr	r4, [r4, #8]
    59d4:	6084      	str	r4, [r0, #8]
    59d6:	9c04      	ldr	r4, [sp, #16]
    59d8:	9401      	str	r4, [sp, #4]
    59da:	e034      	b.n	5a46 <_realloc_r+0x24a>
    59dc:	1c21      	adds	r1, r4, #0
    59de:	f7ff fef3 	bl	57c8 <memmove>
    59e2:	9e04      	ldr	r6, [sp, #16]
    59e4:	e02e      	b.n	5a44 <_realloc_r+0x248>
    59e6:	9802      	ldr	r0, [sp, #8]
    59e8:	4286      	cmp	r6, r0
    59ea:	db32      	blt.n	5a52 <_realloc_r+0x256>
    59ec:	68aa      	ldr	r2, [r5, #8]
    59ee:	68eb      	ldr	r3, [r5, #12]
    59f0:	1c28      	adds	r0, r5, #0
    59f2:	60d3      	str	r3, [r2, #12]
    59f4:	609a      	str	r2, [r3, #8]
    59f6:	9a01      	ldr	r2, [sp, #4]
    59f8:	3008      	adds	r0, #8
    59fa:	3a04      	subs	r2, #4
    59fc:	2a24      	cmp	r2, #36	; 0x24
    59fe:	d824      	bhi.n	5a4a <_realloc_r+0x24e>
    5a00:	2a13      	cmp	r2, #19
    5a02:	d919      	bls.n	5a38 <_realloc_r+0x23c>
    5a04:	6821      	ldr	r1, [r4, #0]
    5a06:	60a9      	str	r1, [r5, #8]
    5a08:	6863      	ldr	r3, [r4, #4]
    5a0a:	60eb      	str	r3, [r5, #12]
    5a0c:	2a1b      	cmp	r2, #27
    5a0e:	d802      	bhi.n	5a16 <_realloc_r+0x21a>
    5a10:	3008      	adds	r0, #8
    5a12:	3408      	adds	r4, #8
    5a14:	e010      	b.n	5a38 <_realloc_r+0x23c>
    5a16:	68a0      	ldr	r0, [r4, #8]
    5a18:	6128      	str	r0, [r5, #16]
    5a1a:	68e1      	ldr	r1, [r4, #12]
    5a1c:	6169      	str	r1, [r5, #20]
    5a1e:	2a24      	cmp	r2, #36	; 0x24
    5a20:	d003      	beq.n	5a2a <_realloc_r+0x22e>
    5a22:	1c28      	adds	r0, r5, #0
    5a24:	3018      	adds	r0, #24
    5a26:	3410      	adds	r4, #16
    5a28:	e006      	b.n	5a38 <_realloc_r+0x23c>
    5a2a:	6922      	ldr	r2, [r4, #16]
    5a2c:	1c28      	adds	r0, r5, #0
    5a2e:	61aa      	str	r2, [r5, #24]
    5a30:	6963      	ldr	r3, [r4, #20]
    5a32:	3020      	adds	r0, #32
    5a34:	61eb      	str	r3, [r5, #28]
    5a36:	3418      	adds	r4, #24
    5a38:	6821      	ldr	r1, [r4, #0]
    5a3a:	6001      	str	r1, [r0, #0]
    5a3c:	6862      	ldr	r2, [r4, #4]
    5a3e:	6042      	str	r2, [r0, #4]
    5a40:	68a4      	ldr	r4, [r4, #8]
    5a42:	6084      	str	r4, [r0, #8]
    5a44:	9601      	str	r6, [sp, #4]
    5a46:	1c2f      	adds	r7, r5, #0
    5a48:	e054      	b.n	5af4 <_realloc_r+0x2f8>
    5a4a:	1c21      	adds	r1, r4, #0
    5a4c:	f7ff febc 	bl	57c8 <memmove>
    5a50:	e7f8      	b.n	5a44 <_realloc_r+0x248>
    5a52:	9803      	ldr	r0, [sp, #12]
    5a54:	9905      	ldr	r1, [sp, #20]
    5a56:	f7fe fbd5 	bl	4204 <_malloc_r>
    5a5a:	1e06      	subs	r6, r0, #0
    5a5c:	d045      	beq.n	5aea <_realloc_r+0x2ee>
    5a5e:	1c22      	adds	r2, r4, #0
    5a60:	3a08      	subs	r2, #8
    5a62:	6852      	ldr	r2, [r2, #4]
    5a64:	2101      	movs	r1, #1
    5a66:	1c03      	adds	r3, r0, #0
    5a68:	438a      	bics	r2, r1
    5a6a:	3b08      	subs	r3, #8
    5a6c:	18ba      	adds	r2, r7, r2
    5a6e:	4293      	cmp	r3, r2
    5a70:	d106      	bne.n	5a80 <_realloc_r+0x284>
    5a72:	685b      	ldr	r3, [r3, #4]
    5a74:	9c01      	ldr	r4, [sp, #4]
    5a76:	2203      	movs	r2, #3
    5a78:	4393      	bics	r3, r2
    5a7a:	18e4      	adds	r4, r4, r3
    5a7c:	9401      	str	r4, [sp, #4]
    5a7e:	e039      	b.n	5af4 <_realloc_r+0x2f8>
    5a80:	9a01      	ldr	r2, [sp, #4]
    5a82:	3a04      	subs	r2, #4
    5a84:	2a24      	cmp	r2, #36	; 0x24
    5a86:	d829      	bhi.n	5adc <_realloc_r+0x2e0>
    5a88:	2a13      	cmp	r2, #19
    5a8a:	d91e      	bls.n	5aca <_realloc_r+0x2ce>
    5a8c:	6820      	ldr	r0, [r4, #0]
    5a8e:	6030      	str	r0, [r6, #0]
    5a90:	6861      	ldr	r1, [r4, #4]
    5a92:	6071      	str	r1, [r6, #4]
    5a94:	2a1b      	cmp	r2, #27
    5a96:	d804      	bhi.n	5aa2 <_realloc_r+0x2a6>
    5a98:	1c33      	adds	r3, r6, #0
    5a9a:	1c22      	adds	r2, r4, #0
    5a9c:	3308      	adds	r3, #8
    5a9e:	3208      	adds	r2, #8
    5aa0:	e015      	b.n	5ace <_realloc_r+0x2d2>
    5aa2:	68a3      	ldr	r3, [r4, #8]
    5aa4:	60b3      	str	r3, [r6, #8]
    5aa6:	68e0      	ldr	r0, [r4, #12]
    5aa8:	60f0      	str	r0, [r6, #12]
    5aaa:	2a24      	cmp	r2, #36	; 0x24
    5aac:	d004      	beq.n	5ab8 <_realloc_r+0x2bc>
    5aae:	1c33      	adds	r3, r6, #0
    5ab0:	1c22      	adds	r2, r4, #0
    5ab2:	3310      	adds	r3, #16
    5ab4:	3210      	adds	r2, #16
    5ab6:	e00a      	b.n	5ace <_realloc_r+0x2d2>
    5ab8:	6921      	ldr	r1, [r4, #16]
    5aba:	1c33      	adds	r3, r6, #0
    5abc:	6131      	str	r1, [r6, #16]
    5abe:	6960      	ldr	r0, [r4, #20]
    5ac0:	1c22      	adds	r2, r4, #0
    5ac2:	3318      	adds	r3, #24
    5ac4:	3218      	adds	r2, #24
    5ac6:	6170      	str	r0, [r6, #20]
    5ac8:	e001      	b.n	5ace <_realloc_r+0x2d2>
    5aca:	1c03      	adds	r3, r0, #0
    5acc:	1c22      	adds	r2, r4, #0
    5ace:	6811      	ldr	r1, [r2, #0]
    5ad0:	6019      	str	r1, [r3, #0]
    5ad2:	6850      	ldr	r0, [r2, #4]
    5ad4:	6058      	str	r0, [r3, #4]
    5ad6:	6892      	ldr	r2, [r2, #8]
    5ad8:	609a      	str	r2, [r3, #8]
    5ada:	e002      	b.n	5ae2 <_realloc_r+0x2e6>
    5adc:	1c21      	adds	r1, r4, #0
    5ade:	f7ff fe73 	bl	57c8 <memmove>
    5ae2:	9803      	ldr	r0, [sp, #12]
    5ae4:	1c21      	adds	r1, r4, #0
    5ae6:	f7fe fa83 	bl	3ff0 <_free_r>
    5aea:	9803      	ldr	r0, [sp, #12]
    5aec:	f7fe fd8e 	bl	460c <__malloc_unlock>
    5af0:	1c30      	adds	r0, r6, #0
    5af2:	e023      	b.n	5b3c <_realloc_r+0x340>
    5af4:	9c01      	ldr	r4, [sp, #4]
    5af6:	9e02      	ldr	r6, [sp, #8]
    5af8:	2301      	movs	r3, #1
    5afa:	1ba2      	subs	r2, r4, r6
    5afc:	6878      	ldr	r0, [r7, #4]
    5afe:	2a0f      	cmp	r2, #15
    5b00:	d90f      	bls.n	5b22 <_realloc_r+0x326>
    5b02:	4018      	ands	r0, r3
    5b04:	4330      	orrs	r0, r6
    5b06:	6078      	str	r0, [r7, #4]
    5b08:	1c18      	adds	r0, r3, #0
    5b0a:	19b9      	adds	r1, r7, r6
    5b0c:	4310      	orrs	r0, r2
    5b0e:	6048      	str	r0, [r1, #4]
    5b10:	188a      	adds	r2, r1, r2
    5b12:	6850      	ldr	r0, [r2, #4]
    5b14:	3108      	adds	r1, #8
    5b16:	4303      	orrs	r3, r0
    5b18:	6053      	str	r3, [r2, #4]
    5b1a:	9803      	ldr	r0, [sp, #12]
    5b1c:	f7fe fa68 	bl	3ff0 <_free_r>
    5b20:	e007      	b.n	5b32 <_realloc_r+0x336>
    5b22:	9c01      	ldr	r4, [sp, #4]
    5b24:	4018      	ands	r0, r3
    5b26:	4320      	orrs	r0, r4
    5b28:	6078      	str	r0, [r7, #4]
    5b2a:	193a      	adds	r2, r7, r4
    5b2c:	6856      	ldr	r6, [r2, #4]
    5b2e:	4333      	orrs	r3, r6
    5b30:	6053      	str	r3, [r2, #4]
    5b32:	9803      	ldr	r0, [sp, #12]
    5b34:	f7fe fd6a 	bl	460c <__malloc_unlock>
    5b38:	1c38      	adds	r0, r7, #0
    5b3a:	3008      	adds	r0, #8
    5b3c:	b007      	add	sp, #28
    5b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5b40:	200004b4 	.word	0x200004b4

00005b44 <__gnu_thumb1_case_uqi>:
    5b44:	b402      	push	{r1}
    5b46:	4671      	mov	r1, lr
    5b48:	0849      	lsrs	r1, r1, #1
    5b4a:	0049      	lsls	r1, r1, #1
    5b4c:	5c09      	ldrb	r1, [r1, r0]
    5b4e:	0049      	lsls	r1, r1, #1
    5b50:	448e      	add	lr, r1
    5b52:	bc02      	pop	{r1}
    5b54:	4770      	bx	lr
    5b56:	46c0      	nop			; (mov r8, r8)

00005b58 <__gnu_thumb1_case_uhi>:
    5b58:	b403      	push	{r0, r1}
    5b5a:	4671      	mov	r1, lr
    5b5c:	0849      	lsrs	r1, r1, #1
    5b5e:	0040      	lsls	r0, r0, #1
    5b60:	0049      	lsls	r1, r1, #1
    5b62:	5a09      	ldrh	r1, [r1, r0]
    5b64:	0049      	lsls	r1, r1, #1
    5b66:	448e      	add	lr, r1
    5b68:	bc03      	pop	{r0, r1}
    5b6a:	4770      	bx	lr

00005b6c <__aeabi_idiv>:
    5b6c:	2900      	cmp	r1, #0
    5b6e:	d041      	beq.n	5bf4 <.divsi3_skip_div0_test+0x84>

00005b70 <.divsi3_skip_div0_test>:
    5b70:	b410      	push	{r4}
    5b72:	1c04      	adds	r4, r0, #0
    5b74:	404c      	eors	r4, r1
    5b76:	46a4      	mov	ip, r4
    5b78:	2301      	movs	r3, #1
    5b7a:	2200      	movs	r2, #0
    5b7c:	2900      	cmp	r1, #0
    5b7e:	d500      	bpl.n	5b82 <.divsi3_skip_div0_test+0x12>
    5b80:	4249      	negs	r1, r1
    5b82:	2800      	cmp	r0, #0
    5b84:	d500      	bpl.n	5b88 <.divsi3_skip_div0_test+0x18>
    5b86:	4240      	negs	r0, r0
    5b88:	4288      	cmp	r0, r1
    5b8a:	d32c      	bcc.n	5be6 <.divsi3_skip_div0_test+0x76>
    5b8c:	2401      	movs	r4, #1
    5b8e:	0724      	lsls	r4, r4, #28
    5b90:	42a1      	cmp	r1, r4
    5b92:	d204      	bcs.n	5b9e <.divsi3_skip_div0_test+0x2e>
    5b94:	4281      	cmp	r1, r0
    5b96:	d202      	bcs.n	5b9e <.divsi3_skip_div0_test+0x2e>
    5b98:	0109      	lsls	r1, r1, #4
    5b9a:	011b      	lsls	r3, r3, #4
    5b9c:	e7f8      	b.n	5b90 <.divsi3_skip_div0_test+0x20>
    5b9e:	00e4      	lsls	r4, r4, #3
    5ba0:	42a1      	cmp	r1, r4
    5ba2:	d204      	bcs.n	5bae <.divsi3_skip_div0_test+0x3e>
    5ba4:	4281      	cmp	r1, r0
    5ba6:	d202      	bcs.n	5bae <.divsi3_skip_div0_test+0x3e>
    5ba8:	0049      	lsls	r1, r1, #1
    5baa:	005b      	lsls	r3, r3, #1
    5bac:	e7f8      	b.n	5ba0 <.divsi3_skip_div0_test+0x30>
    5bae:	4288      	cmp	r0, r1
    5bb0:	d301      	bcc.n	5bb6 <.divsi3_skip_div0_test+0x46>
    5bb2:	1a40      	subs	r0, r0, r1
    5bb4:	431a      	orrs	r2, r3
    5bb6:	084c      	lsrs	r4, r1, #1
    5bb8:	42a0      	cmp	r0, r4
    5bba:	d302      	bcc.n	5bc2 <.divsi3_skip_div0_test+0x52>
    5bbc:	1b00      	subs	r0, r0, r4
    5bbe:	085c      	lsrs	r4, r3, #1
    5bc0:	4322      	orrs	r2, r4
    5bc2:	088c      	lsrs	r4, r1, #2
    5bc4:	42a0      	cmp	r0, r4
    5bc6:	d302      	bcc.n	5bce <.divsi3_skip_div0_test+0x5e>
    5bc8:	1b00      	subs	r0, r0, r4
    5bca:	089c      	lsrs	r4, r3, #2
    5bcc:	4322      	orrs	r2, r4
    5bce:	08cc      	lsrs	r4, r1, #3
    5bd0:	42a0      	cmp	r0, r4
    5bd2:	d302      	bcc.n	5bda <.divsi3_skip_div0_test+0x6a>
    5bd4:	1b00      	subs	r0, r0, r4
    5bd6:	08dc      	lsrs	r4, r3, #3
    5bd8:	4322      	orrs	r2, r4
    5bda:	2800      	cmp	r0, #0
    5bdc:	d003      	beq.n	5be6 <.divsi3_skip_div0_test+0x76>
    5bde:	091b      	lsrs	r3, r3, #4
    5be0:	d001      	beq.n	5be6 <.divsi3_skip_div0_test+0x76>
    5be2:	0909      	lsrs	r1, r1, #4
    5be4:	e7e3      	b.n	5bae <.divsi3_skip_div0_test+0x3e>
    5be6:	1c10      	adds	r0, r2, #0
    5be8:	4664      	mov	r4, ip
    5bea:	2c00      	cmp	r4, #0
    5bec:	d500      	bpl.n	5bf0 <.divsi3_skip_div0_test+0x80>
    5bee:	4240      	negs	r0, r0
    5bf0:	bc10      	pop	{r4}
    5bf2:	4770      	bx	lr
    5bf4:	2800      	cmp	r0, #0
    5bf6:	d006      	beq.n	5c06 <.divsi3_skip_div0_test+0x96>
    5bf8:	db03      	blt.n	5c02 <.divsi3_skip_div0_test+0x92>
    5bfa:	2000      	movs	r0, #0
    5bfc:	43c0      	mvns	r0, r0
    5bfe:	0840      	lsrs	r0, r0, #1
    5c00:	e001      	b.n	5c06 <.divsi3_skip_div0_test+0x96>
    5c02:	2080      	movs	r0, #128	; 0x80
    5c04:	0600      	lsls	r0, r0, #24
    5c06:	b407      	push	{r0, r1, r2}
    5c08:	4802      	ldr	r0, [pc, #8]	; (5c14 <.divsi3_skip_div0_test+0xa4>)
    5c0a:	a102      	add	r1, pc, #8	; (adr r1, 5c14 <.divsi3_skip_div0_test+0xa4>)
    5c0c:	1840      	adds	r0, r0, r1
    5c0e:	9002      	str	r0, [sp, #8]
    5c10:	bd03      	pop	{r0, r1, pc}
    5c12:	46c0      	nop			; (mov r8, r8)
    5c14:	ffffbce5 	.word	0xffffbce5

00005c18 <__aeabi_idivmod>:
    5c18:	2900      	cmp	r1, #0
    5c1a:	d0eb      	beq.n	5bf4 <.divsi3_skip_div0_test+0x84>
    5c1c:	b503      	push	{r0, r1, lr}
    5c1e:	f7ff ffa7 	bl	5b70 <.divsi3_skip_div0_test>
    5c22:	bc0e      	pop	{r1, r2, r3}
    5c24:	4342      	muls	r2, r0
    5c26:	1a89      	subs	r1, r1, r2
    5c28:	4718      	bx	r3
    5c2a:	46c0      	nop			; (mov r8, r8)

00005c2c <__aeabi_cdrcmple>:
    5c2c:	4684      	mov	ip, r0
    5c2e:	1c10      	adds	r0, r2, #0
    5c30:	4662      	mov	r2, ip
    5c32:	468c      	mov	ip, r1
    5c34:	1c19      	adds	r1, r3, #0
    5c36:	4663      	mov	r3, ip
    5c38:	e000      	b.n	5c3c <__aeabi_cdcmpeq>
    5c3a:	46c0      	nop			; (mov r8, r8)

00005c3c <__aeabi_cdcmpeq>:
    5c3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    5c3e:	f000 ff43 	bl	6ac8 <__ledf2>
    5c42:	2800      	cmp	r0, #0
    5c44:	d401      	bmi.n	5c4a <__aeabi_cdcmpeq+0xe>
    5c46:	2100      	movs	r1, #0
    5c48:	42c8      	cmn	r0, r1
    5c4a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00005c4c <__aeabi_dcmpeq>:
    5c4c:	b510      	push	{r4, lr}
    5c4e:	f000 fe77 	bl	6940 <__eqdf2>
    5c52:	4240      	negs	r0, r0
    5c54:	3001      	adds	r0, #1
    5c56:	bd10      	pop	{r4, pc}

00005c58 <__aeabi_dcmplt>:
    5c58:	b510      	push	{r4, lr}
    5c5a:	f000 ff35 	bl	6ac8 <__ledf2>
    5c5e:	2800      	cmp	r0, #0
    5c60:	db01      	blt.n	5c66 <__aeabi_dcmplt+0xe>
    5c62:	2000      	movs	r0, #0
    5c64:	bd10      	pop	{r4, pc}
    5c66:	2001      	movs	r0, #1
    5c68:	bd10      	pop	{r4, pc}
    5c6a:	46c0      	nop			; (mov r8, r8)

00005c6c <__aeabi_dcmple>:
    5c6c:	b510      	push	{r4, lr}
    5c6e:	f000 ff2b 	bl	6ac8 <__ledf2>
    5c72:	2800      	cmp	r0, #0
    5c74:	dd01      	ble.n	5c7a <__aeabi_dcmple+0xe>
    5c76:	2000      	movs	r0, #0
    5c78:	bd10      	pop	{r4, pc}
    5c7a:	2001      	movs	r0, #1
    5c7c:	bd10      	pop	{r4, pc}
    5c7e:	46c0      	nop			; (mov r8, r8)

00005c80 <__aeabi_dcmpgt>:
    5c80:	b510      	push	{r4, lr}
    5c82:	f000 fea7 	bl	69d4 <__gedf2>
    5c86:	2800      	cmp	r0, #0
    5c88:	dc01      	bgt.n	5c8e <__aeabi_dcmpgt+0xe>
    5c8a:	2000      	movs	r0, #0
    5c8c:	bd10      	pop	{r4, pc}
    5c8e:	2001      	movs	r0, #1
    5c90:	bd10      	pop	{r4, pc}
    5c92:	46c0      	nop			; (mov r8, r8)

00005c94 <__aeabi_dcmpge>:
    5c94:	b510      	push	{r4, lr}
    5c96:	f000 fe9d 	bl	69d4 <__gedf2>
    5c9a:	2800      	cmp	r0, #0
    5c9c:	da01      	bge.n	5ca2 <__aeabi_dcmpge+0xe>
    5c9e:	2000      	movs	r0, #0
    5ca0:	bd10      	pop	{r4, pc}
    5ca2:	2001      	movs	r0, #1
    5ca4:	bd10      	pop	{r4, pc}
    5ca6:	46c0      	nop			; (mov r8, r8)

00005ca8 <__aeabi_dadd>:
    5ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5caa:	465f      	mov	r7, fp
    5cac:	4656      	mov	r6, sl
    5cae:	4644      	mov	r4, r8
    5cb0:	464d      	mov	r5, r9
    5cb2:	b4f0      	push	{r4, r5, r6, r7}
    5cb4:	030c      	lsls	r4, r1, #12
    5cb6:	004d      	lsls	r5, r1, #1
    5cb8:	0fce      	lsrs	r6, r1, #31
    5cba:	0a61      	lsrs	r1, r4, #9
    5cbc:	0f44      	lsrs	r4, r0, #29
    5cbe:	4321      	orrs	r1, r4
    5cc0:	00c4      	lsls	r4, r0, #3
    5cc2:	0318      	lsls	r0, r3, #12
    5cc4:	4680      	mov	r8, r0
    5cc6:	0058      	lsls	r0, r3, #1
    5cc8:	0d40      	lsrs	r0, r0, #21
    5cca:	4682      	mov	sl, r0
    5ccc:	0fd8      	lsrs	r0, r3, #31
    5cce:	4684      	mov	ip, r0
    5cd0:	4640      	mov	r0, r8
    5cd2:	0a40      	lsrs	r0, r0, #9
    5cd4:	0f53      	lsrs	r3, r2, #29
    5cd6:	4303      	orrs	r3, r0
    5cd8:	00d0      	lsls	r0, r2, #3
    5cda:	0d6d      	lsrs	r5, r5, #21
    5cdc:	1c37      	adds	r7, r6, #0
    5cde:	4683      	mov	fp, r0
    5ce0:	4652      	mov	r2, sl
    5ce2:	4566      	cmp	r6, ip
    5ce4:	d100      	bne.n	5ce8 <__aeabi_dadd+0x40>
    5ce6:	e0a4      	b.n	5e32 <__aeabi_dadd+0x18a>
    5ce8:	1aaf      	subs	r7, r5, r2
    5cea:	2f00      	cmp	r7, #0
    5cec:	dc00      	bgt.n	5cf0 <__aeabi_dadd+0x48>
    5cee:	e109      	b.n	5f04 <__aeabi_dadd+0x25c>
    5cf0:	2a00      	cmp	r2, #0
    5cf2:	d13b      	bne.n	5d6c <__aeabi_dadd+0xc4>
    5cf4:	4318      	orrs	r0, r3
    5cf6:	d000      	beq.n	5cfa <__aeabi_dadd+0x52>
    5cf8:	e0ea      	b.n	5ed0 <__aeabi_dadd+0x228>
    5cfa:	0763      	lsls	r3, r4, #29
    5cfc:	d100      	bne.n	5d00 <__aeabi_dadd+0x58>
    5cfe:	e087      	b.n	5e10 <__aeabi_dadd+0x168>
    5d00:	230f      	movs	r3, #15
    5d02:	4023      	ands	r3, r4
    5d04:	2b04      	cmp	r3, #4
    5d06:	d100      	bne.n	5d0a <__aeabi_dadd+0x62>
    5d08:	e082      	b.n	5e10 <__aeabi_dadd+0x168>
    5d0a:	1d22      	adds	r2, r4, #4
    5d0c:	42a2      	cmp	r2, r4
    5d0e:	41a4      	sbcs	r4, r4
    5d10:	4264      	negs	r4, r4
    5d12:	2380      	movs	r3, #128	; 0x80
    5d14:	1909      	adds	r1, r1, r4
    5d16:	041b      	lsls	r3, r3, #16
    5d18:	400b      	ands	r3, r1
    5d1a:	1c37      	adds	r7, r6, #0
    5d1c:	1c14      	adds	r4, r2, #0
    5d1e:	2b00      	cmp	r3, #0
    5d20:	d100      	bne.n	5d24 <__aeabi_dadd+0x7c>
    5d22:	e07c      	b.n	5e1e <__aeabi_dadd+0x176>
    5d24:	4bce      	ldr	r3, [pc, #824]	; (6060 <__aeabi_dadd+0x3b8>)
    5d26:	3501      	adds	r5, #1
    5d28:	429d      	cmp	r5, r3
    5d2a:	d100      	bne.n	5d2e <__aeabi_dadd+0x86>
    5d2c:	e105      	b.n	5f3a <__aeabi_dadd+0x292>
    5d2e:	4bcd      	ldr	r3, [pc, #820]	; (6064 <__aeabi_dadd+0x3bc>)
    5d30:	08e4      	lsrs	r4, r4, #3
    5d32:	4019      	ands	r1, r3
    5d34:	0748      	lsls	r0, r1, #29
    5d36:	0249      	lsls	r1, r1, #9
    5d38:	4304      	orrs	r4, r0
    5d3a:	0b0b      	lsrs	r3, r1, #12
    5d3c:	2000      	movs	r0, #0
    5d3e:	2100      	movs	r1, #0
    5d40:	031b      	lsls	r3, r3, #12
    5d42:	0b1a      	lsrs	r2, r3, #12
    5d44:	0d0b      	lsrs	r3, r1, #20
    5d46:	056d      	lsls	r5, r5, #21
    5d48:	051b      	lsls	r3, r3, #20
    5d4a:	4313      	orrs	r3, r2
    5d4c:	086a      	lsrs	r2, r5, #1
    5d4e:	4dc6      	ldr	r5, [pc, #792]	; (6068 <__aeabi_dadd+0x3c0>)
    5d50:	07ff      	lsls	r7, r7, #31
    5d52:	401d      	ands	r5, r3
    5d54:	4315      	orrs	r5, r2
    5d56:	006d      	lsls	r5, r5, #1
    5d58:	086d      	lsrs	r5, r5, #1
    5d5a:	1c29      	adds	r1, r5, #0
    5d5c:	4339      	orrs	r1, r7
    5d5e:	1c20      	adds	r0, r4, #0
    5d60:	bc3c      	pop	{r2, r3, r4, r5}
    5d62:	4690      	mov	r8, r2
    5d64:	4699      	mov	r9, r3
    5d66:	46a2      	mov	sl, r4
    5d68:	46ab      	mov	fp, r5
    5d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5d6c:	48bc      	ldr	r0, [pc, #752]	; (6060 <__aeabi_dadd+0x3b8>)
    5d6e:	4285      	cmp	r5, r0
    5d70:	d0c3      	beq.n	5cfa <__aeabi_dadd+0x52>
    5d72:	2080      	movs	r0, #128	; 0x80
    5d74:	0400      	lsls	r0, r0, #16
    5d76:	4303      	orrs	r3, r0
    5d78:	2f38      	cmp	r7, #56	; 0x38
    5d7a:	dd00      	ble.n	5d7e <__aeabi_dadd+0xd6>
    5d7c:	e0f0      	b.n	5f60 <__aeabi_dadd+0x2b8>
    5d7e:	2f1f      	cmp	r7, #31
    5d80:	dd00      	ble.n	5d84 <__aeabi_dadd+0xdc>
    5d82:	e124      	b.n	5fce <__aeabi_dadd+0x326>
    5d84:	2020      	movs	r0, #32
    5d86:	1bc0      	subs	r0, r0, r7
    5d88:	1c1a      	adds	r2, r3, #0
    5d8a:	4681      	mov	r9, r0
    5d8c:	4082      	lsls	r2, r0
    5d8e:	4658      	mov	r0, fp
    5d90:	40f8      	lsrs	r0, r7
    5d92:	4302      	orrs	r2, r0
    5d94:	4694      	mov	ip, r2
    5d96:	4658      	mov	r0, fp
    5d98:	464a      	mov	r2, r9
    5d9a:	4090      	lsls	r0, r2
    5d9c:	1e42      	subs	r2, r0, #1
    5d9e:	4190      	sbcs	r0, r2
    5da0:	40fb      	lsrs	r3, r7
    5da2:	4662      	mov	r2, ip
    5da4:	4302      	orrs	r2, r0
    5da6:	1c1f      	adds	r7, r3, #0
    5da8:	1aa2      	subs	r2, r4, r2
    5daa:	4294      	cmp	r4, r2
    5dac:	41a4      	sbcs	r4, r4
    5dae:	4264      	negs	r4, r4
    5db0:	1bc9      	subs	r1, r1, r7
    5db2:	1b09      	subs	r1, r1, r4
    5db4:	1c14      	adds	r4, r2, #0
    5db6:	020b      	lsls	r3, r1, #8
    5db8:	d59f      	bpl.n	5cfa <__aeabi_dadd+0x52>
    5dba:	0249      	lsls	r1, r1, #9
    5dbc:	0a4f      	lsrs	r7, r1, #9
    5dbe:	2f00      	cmp	r7, #0
    5dc0:	d100      	bne.n	5dc4 <__aeabi_dadd+0x11c>
    5dc2:	e0c8      	b.n	5f56 <__aeabi_dadd+0x2ae>
    5dc4:	1c38      	adds	r0, r7, #0
    5dc6:	f7fc f9a9 	bl	211c <__clzsi2>
    5dca:	1c02      	adds	r2, r0, #0
    5dcc:	3a08      	subs	r2, #8
    5dce:	2a1f      	cmp	r2, #31
    5dd0:	dd00      	ble.n	5dd4 <__aeabi_dadd+0x12c>
    5dd2:	e0b5      	b.n	5f40 <__aeabi_dadd+0x298>
    5dd4:	2128      	movs	r1, #40	; 0x28
    5dd6:	1a09      	subs	r1, r1, r0
    5dd8:	1c20      	adds	r0, r4, #0
    5dda:	4097      	lsls	r7, r2
    5ddc:	40c8      	lsrs	r0, r1
    5dde:	4307      	orrs	r7, r0
    5de0:	4094      	lsls	r4, r2
    5de2:	4295      	cmp	r5, r2
    5de4:	dd00      	ble.n	5de8 <__aeabi_dadd+0x140>
    5de6:	e0b2      	b.n	5f4e <__aeabi_dadd+0x2a6>
    5de8:	1b55      	subs	r5, r2, r5
    5dea:	1c69      	adds	r1, r5, #1
    5dec:	291f      	cmp	r1, #31
    5dee:	dd00      	ble.n	5df2 <__aeabi_dadd+0x14a>
    5df0:	e0dc      	b.n	5fac <__aeabi_dadd+0x304>
    5df2:	221f      	movs	r2, #31
    5df4:	1b55      	subs	r5, r2, r5
    5df6:	1c3b      	adds	r3, r7, #0
    5df8:	1c22      	adds	r2, r4, #0
    5dfa:	40ab      	lsls	r3, r5
    5dfc:	40ca      	lsrs	r2, r1
    5dfe:	40ac      	lsls	r4, r5
    5e00:	1e65      	subs	r5, r4, #1
    5e02:	41ac      	sbcs	r4, r5
    5e04:	4313      	orrs	r3, r2
    5e06:	40cf      	lsrs	r7, r1
    5e08:	431c      	orrs	r4, r3
    5e0a:	1c39      	adds	r1, r7, #0
    5e0c:	2500      	movs	r5, #0
    5e0e:	e774      	b.n	5cfa <__aeabi_dadd+0x52>
    5e10:	2380      	movs	r3, #128	; 0x80
    5e12:	041b      	lsls	r3, r3, #16
    5e14:	400b      	ands	r3, r1
    5e16:	1c37      	adds	r7, r6, #0
    5e18:	2b00      	cmp	r3, #0
    5e1a:	d000      	beq.n	5e1e <__aeabi_dadd+0x176>
    5e1c:	e782      	b.n	5d24 <__aeabi_dadd+0x7c>
    5e1e:	4b90      	ldr	r3, [pc, #576]	; (6060 <__aeabi_dadd+0x3b8>)
    5e20:	0748      	lsls	r0, r1, #29
    5e22:	08e4      	lsrs	r4, r4, #3
    5e24:	4304      	orrs	r4, r0
    5e26:	08c9      	lsrs	r1, r1, #3
    5e28:	429d      	cmp	r5, r3
    5e2a:	d048      	beq.n	5ebe <__aeabi_dadd+0x216>
    5e2c:	0309      	lsls	r1, r1, #12
    5e2e:	0b0b      	lsrs	r3, r1, #12
    5e30:	e784      	b.n	5d3c <__aeabi_dadd+0x94>
    5e32:	1aaa      	subs	r2, r5, r2
    5e34:	4694      	mov	ip, r2
    5e36:	2a00      	cmp	r2, #0
    5e38:	dc00      	bgt.n	5e3c <__aeabi_dadd+0x194>
    5e3a:	e098      	b.n	5f6e <__aeabi_dadd+0x2c6>
    5e3c:	4650      	mov	r0, sl
    5e3e:	2800      	cmp	r0, #0
    5e40:	d052      	beq.n	5ee8 <__aeabi_dadd+0x240>
    5e42:	4887      	ldr	r0, [pc, #540]	; (6060 <__aeabi_dadd+0x3b8>)
    5e44:	4285      	cmp	r5, r0
    5e46:	d100      	bne.n	5e4a <__aeabi_dadd+0x1a2>
    5e48:	e757      	b.n	5cfa <__aeabi_dadd+0x52>
    5e4a:	2080      	movs	r0, #128	; 0x80
    5e4c:	0400      	lsls	r0, r0, #16
    5e4e:	4303      	orrs	r3, r0
    5e50:	4662      	mov	r2, ip
    5e52:	2a38      	cmp	r2, #56	; 0x38
    5e54:	dd00      	ble.n	5e58 <__aeabi_dadd+0x1b0>
    5e56:	e0fc      	b.n	6052 <__aeabi_dadd+0x3aa>
    5e58:	2a1f      	cmp	r2, #31
    5e5a:	dd00      	ble.n	5e5e <__aeabi_dadd+0x1b6>
    5e5c:	e14a      	b.n	60f4 <__aeabi_dadd+0x44c>
    5e5e:	2220      	movs	r2, #32
    5e60:	4660      	mov	r0, ip
    5e62:	1a10      	subs	r0, r2, r0
    5e64:	1c1a      	adds	r2, r3, #0
    5e66:	4082      	lsls	r2, r0
    5e68:	4682      	mov	sl, r0
    5e6a:	4691      	mov	r9, r2
    5e6c:	4658      	mov	r0, fp
    5e6e:	4662      	mov	r2, ip
    5e70:	40d0      	lsrs	r0, r2
    5e72:	464a      	mov	r2, r9
    5e74:	4302      	orrs	r2, r0
    5e76:	4690      	mov	r8, r2
    5e78:	4658      	mov	r0, fp
    5e7a:	4652      	mov	r2, sl
    5e7c:	4090      	lsls	r0, r2
    5e7e:	1e42      	subs	r2, r0, #1
    5e80:	4190      	sbcs	r0, r2
    5e82:	4642      	mov	r2, r8
    5e84:	4302      	orrs	r2, r0
    5e86:	4660      	mov	r0, ip
    5e88:	40c3      	lsrs	r3, r0
    5e8a:	1912      	adds	r2, r2, r4
    5e8c:	42a2      	cmp	r2, r4
    5e8e:	41a4      	sbcs	r4, r4
    5e90:	4264      	negs	r4, r4
    5e92:	1859      	adds	r1, r3, r1
    5e94:	1909      	adds	r1, r1, r4
    5e96:	1c14      	adds	r4, r2, #0
    5e98:	0208      	lsls	r0, r1, #8
    5e9a:	d400      	bmi.n	5e9e <__aeabi_dadd+0x1f6>
    5e9c:	e72d      	b.n	5cfa <__aeabi_dadd+0x52>
    5e9e:	4b70      	ldr	r3, [pc, #448]	; (6060 <__aeabi_dadd+0x3b8>)
    5ea0:	3501      	adds	r5, #1
    5ea2:	429d      	cmp	r5, r3
    5ea4:	d100      	bne.n	5ea8 <__aeabi_dadd+0x200>
    5ea6:	e122      	b.n	60ee <__aeabi_dadd+0x446>
    5ea8:	4b6e      	ldr	r3, [pc, #440]	; (6064 <__aeabi_dadd+0x3bc>)
    5eaa:	0860      	lsrs	r0, r4, #1
    5eac:	4019      	ands	r1, r3
    5eae:	2301      	movs	r3, #1
    5eb0:	4023      	ands	r3, r4
    5eb2:	1c1c      	adds	r4, r3, #0
    5eb4:	4304      	orrs	r4, r0
    5eb6:	07cb      	lsls	r3, r1, #31
    5eb8:	431c      	orrs	r4, r3
    5eba:	0849      	lsrs	r1, r1, #1
    5ebc:	e71d      	b.n	5cfa <__aeabi_dadd+0x52>
    5ebe:	1c23      	adds	r3, r4, #0
    5ec0:	430b      	orrs	r3, r1
    5ec2:	d03a      	beq.n	5f3a <__aeabi_dadd+0x292>
    5ec4:	2380      	movs	r3, #128	; 0x80
    5ec6:	031b      	lsls	r3, r3, #12
    5ec8:	430b      	orrs	r3, r1
    5eca:	031b      	lsls	r3, r3, #12
    5ecc:	0b1b      	lsrs	r3, r3, #12
    5ece:	e735      	b.n	5d3c <__aeabi_dadd+0x94>
    5ed0:	3f01      	subs	r7, #1
    5ed2:	2f00      	cmp	r7, #0
    5ed4:	d165      	bne.n	5fa2 <__aeabi_dadd+0x2fa>
    5ed6:	4658      	mov	r0, fp
    5ed8:	1a22      	subs	r2, r4, r0
    5eda:	4294      	cmp	r4, r2
    5edc:	41a4      	sbcs	r4, r4
    5ede:	4264      	negs	r4, r4
    5ee0:	1ac9      	subs	r1, r1, r3
    5ee2:	1b09      	subs	r1, r1, r4
    5ee4:	1c14      	adds	r4, r2, #0
    5ee6:	e766      	b.n	5db6 <__aeabi_dadd+0x10e>
    5ee8:	4658      	mov	r0, fp
    5eea:	4318      	orrs	r0, r3
    5eec:	d100      	bne.n	5ef0 <__aeabi_dadd+0x248>
    5eee:	e704      	b.n	5cfa <__aeabi_dadd+0x52>
    5ef0:	2201      	movs	r2, #1
    5ef2:	4252      	negs	r2, r2
    5ef4:	4494      	add	ip, r2
    5ef6:	4660      	mov	r0, ip
    5ef8:	2800      	cmp	r0, #0
    5efa:	d000      	beq.n	5efe <__aeabi_dadd+0x256>
    5efc:	e0c5      	b.n	608a <__aeabi_dadd+0x3e2>
    5efe:	4658      	mov	r0, fp
    5f00:	1902      	adds	r2, r0, r4
    5f02:	e7c3      	b.n	5e8c <__aeabi_dadd+0x1e4>
    5f04:	2f00      	cmp	r7, #0
    5f06:	d173      	bne.n	5ff0 <__aeabi_dadd+0x348>
    5f08:	1c68      	adds	r0, r5, #1
    5f0a:	0540      	lsls	r0, r0, #21
    5f0c:	0d40      	lsrs	r0, r0, #21
    5f0e:	2801      	cmp	r0, #1
    5f10:	dc00      	bgt.n	5f14 <__aeabi_dadd+0x26c>
    5f12:	e0de      	b.n	60d2 <__aeabi_dadd+0x42a>
    5f14:	465a      	mov	r2, fp
    5f16:	1aa2      	subs	r2, r4, r2
    5f18:	4294      	cmp	r4, r2
    5f1a:	41bf      	sbcs	r7, r7
    5f1c:	1ac8      	subs	r0, r1, r3
    5f1e:	427f      	negs	r7, r7
    5f20:	1bc7      	subs	r7, r0, r7
    5f22:	0238      	lsls	r0, r7, #8
    5f24:	d400      	bmi.n	5f28 <__aeabi_dadd+0x280>
    5f26:	e089      	b.n	603c <__aeabi_dadd+0x394>
    5f28:	465a      	mov	r2, fp
    5f2a:	1b14      	subs	r4, r2, r4
    5f2c:	45a3      	cmp	fp, r4
    5f2e:	4192      	sbcs	r2, r2
    5f30:	1a59      	subs	r1, r3, r1
    5f32:	4252      	negs	r2, r2
    5f34:	1a8f      	subs	r7, r1, r2
    5f36:	4666      	mov	r6, ip
    5f38:	e741      	b.n	5dbe <__aeabi_dadd+0x116>
    5f3a:	2300      	movs	r3, #0
    5f3c:	2400      	movs	r4, #0
    5f3e:	e6fd      	b.n	5d3c <__aeabi_dadd+0x94>
    5f40:	1c27      	adds	r7, r4, #0
    5f42:	3828      	subs	r0, #40	; 0x28
    5f44:	4087      	lsls	r7, r0
    5f46:	2400      	movs	r4, #0
    5f48:	4295      	cmp	r5, r2
    5f4a:	dc00      	bgt.n	5f4e <__aeabi_dadd+0x2a6>
    5f4c:	e74c      	b.n	5de8 <__aeabi_dadd+0x140>
    5f4e:	4945      	ldr	r1, [pc, #276]	; (6064 <__aeabi_dadd+0x3bc>)
    5f50:	1aad      	subs	r5, r5, r2
    5f52:	4039      	ands	r1, r7
    5f54:	e6d1      	b.n	5cfa <__aeabi_dadd+0x52>
    5f56:	1c20      	adds	r0, r4, #0
    5f58:	f7fc f8e0 	bl	211c <__clzsi2>
    5f5c:	3020      	adds	r0, #32
    5f5e:	e734      	b.n	5dca <__aeabi_dadd+0x122>
    5f60:	465a      	mov	r2, fp
    5f62:	431a      	orrs	r2, r3
    5f64:	1e53      	subs	r3, r2, #1
    5f66:	419a      	sbcs	r2, r3
    5f68:	b2d2      	uxtb	r2, r2
    5f6a:	2700      	movs	r7, #0
    5f6c:	e71c      	b.n	5da8 <__aeabi_dadd+0x100>
    5f6e:	2a00      	cmp	r2, #0
    5f70:	d000      	beq.n	5f74 <__aeabi_dadd+0x2cc>
    5f72:	e0dc      	b.n	612e <__aeabi_dadd+0x486>
    5f74:	1c68      	adds	r0, r5, #1
    5f76:	0542      	lsls	r2, r0, #21
    5f78:	0d52      	lsrs	r2, r2, #21
    5f7a:	2a01      	cmp	r2, #1
    5f7c:	dc00      	bgt.n	5f80 <__aeabi_dadd+0x2d8>
    5f7e:	e08d      	b.n	609c <__aeabi_dadd+0x3f4>
    5f80:	4d37      	ldr	r5, [pc, #220]	; (6060 <__aeabi_dadd+0x3b8>)
    5f82:	42a8      	cmp	r0, r5
    5f84:	d100      	bne.n	5f88 <__aeabi_dadd+0x2e0>
    5f86:	e0f3      	b.n	6170 <__aeabi_dadd+0x4c8>
    5f88:	465d      	mov	r5, fp
    5f8a:	192a      	adds	r2, r5, r4
    5f8c:	42a2      	cmp	r2, r4
    5f8e:	41a4      	sbcs	r4, r4
    5f90:	4264      	negs	r4, r4
    5f92:	1859      	adds	r1, r3, r1
    5f94:	1909      	adds	r1, r1, r4
    5f96:	07cc      	lsls	r4, r1, #31
    5f98:	0852      	lsrs	r2, r2, #1
    5f9a:	4314      	orrs	r4, r2
    5f9c:	0849      	lsrs	r1, r1, #1
    5f9e:	1c05      	adds	r5, r0, #0
    5fa0:	e6ab      	b.n	5cfa <__aeabi_dadd+0x52>
    5fa2:	482f      	ldr	r0, [pc, #188]	; (6060 <__aeabi_dadd+0x3b8>)
    5fa4:	4285      	cmp	r5, r0
    5fa6:	d000      	beq.n	5faa <__aeabi_dadd+0x302>
    5fa8:	e6e6      	b.n	5d78 <__aeabi_dadd+0xd0>
    5faa:	e6a6      	b.n	5cfa <__aeabi_dadd+0x52>
    5fac:	1c2b      	adds	r3, r5, #0
    5fae:	3b1f      	subs	r3, #31
    5fb0:	1c3a      	adds	r2, r7, #0
    5fb2:	40da      	lsrs	r2, r3
    5fb4:	1c13      	adds	r3, r2, #0
    5fb6:	2920      	cmp	r1, #32
    5fb8:	d06c      	beq.n	6094 <__aeabi_dadd+0x3ec>
    5fba:	223f      	movs	r2, #63	; 0x3f
    5fbc:	1b55      	subs	r5, r2, r5
    5fbe:	40af      	lsls	r7, r5
    5fc0:	433c      	orrs	r4, r7
    5fc2:	1e60      	subs	r0, r4, #1
    5fc4:	4184      	sbcs	r4, r0
    5fc6:	431c      	orrs	r4, r3
    5fc8:	2100      	movs	r1, #0
    5fca:	2500      	movs	r5, #0
    5fcc:	e695      	b.n	5cfa <__aeabi_dadd+0x52>
    5fce:	1c38      	adds	r0, r7, #0
    5fd0:	3820      	subs	r0, #32
    5fd2:	1c1a      	adds	r2, r3, #0
    5fd4:	40c2      	lsrs	r2, r0
    5fd6:	1c10      	adds	r0, r2, #0
    5fd8:	2f20      	cmp	r7, #32
    5fda:	d05d      	beq.n	6098 <__aeabi_dadd+0x3f0>
    5fdc:	2240      	movs	r2, #64	; 0x40
    5fde:	1bd7      	subs	r7, r2, r7
    5fe0:	40bb      	lsls	r3, r7
    5fe2:	465a      	mov	r2, fp
    5fe4:	431a      	orrs	r2, r3
    5fe6:	1e53      	subs	r3, r2, #1
    5fe8:	419a      	sbcs	r2, r3
    5fea:	4302      	orrs	r2, r0
    5fec:	2700      	movs	r7, #0
    5fee:	e6db      	b.n	5da8 <__aeabi_dadd+0x100>
    5ff0:	2d00      	cmp	r5, #0
    5ff2:	d03b      	beq.n	606c <__aeabi_dadd+0x3c4>
    5ff4:	4d1a      	ldr	r5, [pc, #104]	; (6060 <__aeabi_dadd+0x3b8>)
    5ff6:	45aa      	cmp	sl, r5
    5ff8:	d100      	bne.n	5ffc <__aeabi_dadd+0x354>
    5ffa:	e093      	b.n	6124 <__aeabi_dadd+0x47c>
    5ffc:	2580      	movs	r5, #128	; 0x80
    5ffe:	042d      	lsls	r5, r5, #16
    6000:	427f      	negs	r7, r7
    6002:	4329      	orrs	r1, r5
    6004:	2f38      	cmp	r7, #56	; 0x38
    6006:	dd00      	ble.n	600a <__aeabi_dadd+0x362>
    6008:	e0ac      	b.n	6164 <__aeabi_dadd+0x4bc>
    600a:	2f1f      	cmp	r7, #31
    600c:	dd00      	ble.n	6010 <__aeabi_dadd+0x368>
    600e:	e129      	b.n	6264 <__aeabi_dadd+0x5bc>
    6010:	2520      	movs	r5, #32
    6012:	1bed      	subs	r5, r5, r7
    6014:	1c08      	adds	r0, r1, #0
    6016:	1c26      	adds	r6, r4, #0
    6018:	40a8      	lsls	r0, r5
    601a:	40fe      	lsrs	r6, r7
    601c:	40ac      	lsls	r4, r5
    601e:	4306      	orrs	r6, r0
    6020:	1e65      	subs	r5, r4, #1
    6022:	41ac      	sbcs	r4, r5
    6024:	4334      	orrs	r4, r6
    6026:	40f9      	lsrs	r1, r7
    6028:	465d      	mov	r5, fp
    602a:	1b2c      	subs	r4, r5, r4
    602c:	45a3      	cmp	fp, r4
    602e:	4192      	sbcs	r2, r2
    6030:	1a5b      	subs	r3, r3, r1
    6032:	4252      	negs	r2, r2
    6034:	1a99      	subs	r1, r3, r2
    6036:	4655      	mov	r5, sl
    6038:	4666      	mov	r6, ip
    603a:	e6bc      	b.n	5db6 <__aeabi_dadd+0x10e>
    603c:	1c13      	adds	r3, r2, #0
    603e:	433b      	orrs	r3, r7
    6040:	1c14      	adds	r4, r2, #0
    6042:	2b00      	cmp	r3, #0
    6044:	d000      	beq.n	6048 <__aeabi_dadd+0x3a0>
    6046:	e6ba      	b.n	5dbe <__aeabi_dadd+0x116>
    6048:	2700      	movs	r7, #0
    604a:	2100      	movs	r1, #0
    604c:	2400      	movs	r4, #0
    604e:	2500      	movs	r5, #0
    6050:	e6e5      	b.n	5e1e <__aeabi_dadd+0x176>
    6052:	465a      	mov	r2, fp
    6054:	431a      	orrs	r2, r3
    6056:	1e53      	subs	r3, r2, #1
    6058:	419a      	sbcs	r2, r3
    605a:	b2d2      	uxtb	r2, r2
    605c:	2300      	movs	r3, #0
    605e:	e714      	b.n	5e8a <__aeabi_dadd+0x1e2>
    6060:	000007ff 	.word	0x000007ff
    6064:	ff7fffff 	.word	0xff7fffff
    6068:	800fffff 	.word	0x800fffff
    606c:	1c0d      	adds	r5, r1, #0
    606e:	4325      	orrs	r5, r4
    6070:	d058      	beq.n	6124 <__aeabi_dadd+0x47c>
    6072:	43ff      	mvns	r7, r7
    6074:	2f00      	cmp	r7, #0
    6076:	d151      	bne.n	611c <__aeabi_dadd+0x474>
    6078:	1b04      	subs	r4, r0, r4
    607a:	45a3      	cmp	fp, r4
    607c:	4192      	sbcs	r2, r2
    607e:	1a59      	subs	r1, r3, r1
    6080:	4252      	negs	r2, r2
    6082:	1a89      	subs	r1, r1, r2
    6084:	4655      	mov	r5, sl
    6086:	4666      	mov	r6, ip
    6088:	e695      	b.n	5db6 <__aeabi_dadd+0x10e>
    608a:	4896      	ldr	r0, [pc, #600]	; (62e4 <__aeabi_dadd+0x63c>)
    608c:	4285      	cmp	r5, r0
    608e:	d000      	beq.n	6092 <__aeabi_dadd+0x3ea>
    6090:	e6de      	b.n	5e50 <__aeabi_dadd+0x1a8>
    6092:	e632      	b.n	5cfa <__aeabi_dadd+0x52>
    6094:	2700      	movs	r7, #0
    6096:	e793      	b.n	5fc0 <__aeabi_dadd+0x318>
    6098:	2300      	movs	r3, #0
    609a:	e7a2      	b.n	5fe2 <__aeabi_dadd+0x33a>
    609c:	1c08      	adds	r0, r1, #0
    609e:	4320      	orrs	r0, r4
    60a0:	2d00      	cmp	r5, #0
    60a2:	d000      	beq.n	60a6 <__aeabi_dadd+0x3fe>
    60a4:	e0c4      	b.n	6230 <__aeabi_dadd+0x588>
    60a6:	2800      	cmp	r0, #0
    60a8:	d100      	bne.n	60ac <__aeabi_dadd+0x404>
    60aa:	e0f7      	b.n	629c <__aeabi_dadd+0x5f4>
    60ac:	4658      	mov	r0, fp
    60ae:	4318      	orrs	r0, r3
    60b0:	d100      	bne.n	60b4 <__aeabi_dadd+0x40c>
    60b2:	e622      	b.n	5cfa <__aeabi_dadd+0x52>
    60b4:	4658      	mov	r0, fp
    60b6:	1902      	adds	r2, r0, r4
    60b8:	42a2      	cmp	r2, r4
    60ba:	41a4      	sbcs	r4, r4
    60bc:	4264      	negs	r4, r4
    60be:	1859      	adds	r1, r3, r1
    60c0:	1909      	adds	r1, r1, r4
    60c2:	1c14      	adds	r4, r2, #0
    60c4:	020a      	lsls	r2, r1, #8
    60c6:	d400      	bmi.n	60ca <__aeabi_dadd+0x422>
    60c8:	e617      	b.n	5cfa <__aeabi_dadd+0x52>
    60ca:	4b87      	ldr	r3, [pc, #540]	; (62e8 <__aeabi_dadd+0x640>)
    60cc:	2501      	movs	r5, #1
    60ce:	4019      	ands	r1, r3
    60d0:	e613      	b.n	5cfa <__aeabi_dadd+0x52>
    60d2:	1c08      	adds	r0, r1, #0
    60d4:	4320      	orrs	r0, r4
    60d6:	2d00      	cmp	r5, #0
    60d8:	d139      	bne.n	614e <__aeabi_dadd+0x4a6>
    60da:	2800      	cmp	r0, #0
    60dc:	d171      	bne.n	61c2 <__aeabi_dadd+0x51a>
    60de:	4659      	mov	r1, fp
    60e0:	4319      	orrs	r1, r3
    60e2:	d003      	beq.n	60ec <__aeabi_dadd+0x444>
    60e4:	1c19      	adds	r1, r3, #0
    60e6:	465c      	mov	r4, fp
    60e8:	4666      	mov	r6, ip
    60ea:	e606      	b.n	5cfa <__aeabi_dadd+0x52>
    60ec:	2700      	movs	r7, #0
    60ee:	2100      	movs	r1, #0
    60f0:	2400      	movs	r4, #0
    60f2:	e694      	b.n	5e1e <__aeabi_dadd+0x176>
    60f4:	4660      	mov	r0, ip
    60f6:	3820      	subs	r0, #32
    60f8:	1c1a      	adds	r2, r3, #0
    60fa:	40c2      	lsrs	r2, r0
    60fc:	4660      	mov	r0, ip
    60fe:	4691      	mov	r9, r2
    6100:	2820      	cmp	r0, #32
    6102:	d100      	bne.n	6106 <__aeabi_dadd+0x45e>
    6104:	e0ac      	b.n	6260 <__aeabi_dadd+0x5b8>
    6106:	2240      	movs	r2, #64	; 0x40
    6108:	1a12      	subs	r2, r2, r0
    610a:	4093      	lsls	r3, r2
    610c:	465a      	mov	r2, fp
    610e:	431a      	orrs	r2, r3
    6110:	1e53      	subs	r3, r2, #1
    6112:	419a      	sbcs	r2, r3
    6114:	464b      	mov	r3, r9
    6116:	431a      	orrs	r2, r3
    6118:	2300      	movs	r3, #0
    611a:	e6b6      	b.n	5e8a <__aeabi_dadd+0x1e2>
    611c:	4d71      	ldr	r5, [pc, #452]	; (62e4 <__aeabi_dadd+0x63c>)
    611e:	45aa      	cmp	sl, r5
    6120:	d000      	beq.n	6124 <__aeabi_dadd+0x47c>
    6122:	e76f      	b.n	6004 <__aeabi_dadd+0x35c>
    6124:	1c19      	adds	r1, r3, #0
    6126:	465c      	mov	r4, fp
    6128:	4655      	mov	r5, sl
    612a:	4666      	mov	r6, ip
    612c:	e5e5      	b.n	5cfa <__aeabi_dadd+0x52>
    612e:	2d00      	cmp	r5, #0
    6130:	d122      	bne.n	6178 <__aeabi_dadd+0x4d0>
    6132:	1c0d      	adds	r5, r1, #0
    6134:	4325      	orrs	r5, r4
    6136:	d077      	beq.n	6228 <__aeabi_dadd+0x580>
    6138:	43d5      	mvns	r5, r2
    613a:	2d00      	cmp	r5, #0
    613c:	d171      	bne.n	6222 <__aeabi_dadd+0x57a>
    613e:	445c      	add	r4, fp
    6140:	455c      	cmp	r4, fp
    6142:	4192      	sbcs	r2, r2
    6144:	1859      	adds	r1, r3, r1
    6146:	4252      	negs	r2, r2
    6148:	1889      	adds	r1, r1, r2
    614a:	4655      	mov	r5, sl
    614c:	e6a4      	b.n	5e98 <__aeabi_dadd+0x1f0>
    614e:	2800      	cmp	r0, #0
    6150:	d14d      	bne.n	61ee <__aeabi_dadd+0x546>
    6152:	4659      	mov	r1, fp
    6154:	4319      	orrs	r1, r3
    6156:	d100      	bne.n	615a <__aeabi_dadd+0x4b2>
    6158:	e094      	b.n	6284 <__aeabi_dadd+0x5dc>
    615a:	1c19      	adds	r1, r3, #0
    615c:	465c      	mov	r4, fp
    615e:	4666      	mov	r6, ip
    6160:	4d60      	ldr	r5, [pc, #384]	; (62e4 <__aeabi_dadd+0x63c>)
    6162:	e5ca      	b.n	5cfa <__aeabi_dadd+0x52>
    6164:	430c      	orrs	r4, r1
    6166:	1e61      	subs	r1, r4, #1
    6168:	418c      	sbcs	r4, r1
    616a:	b2e4      	uxtb	r4, r4
    616c:	2100      	movs	r1, #0
    616e:	e75b      	b.n	6028 <__aeabi_dadd+0x380>
    6170:	1c05      	adds	r5, r0, #0
    6172:	2100      	movs	r1, #0
    6174:	2400      	movs	r4, #0
    6176:	e652      	b.n	5e1e <__aeabi_dadd+0x176>
    6178:	4d5a      	ldr	r5, [pc, #360]	; (62e4 <__aeabi_dadd+0x63c>)
    617a:	45aa      	cmp	sl, r5
    617c:	d054      	beq.n	6228 <__aeabi_dadd+0x580>
    617e:	4255      	negs	r5, r2
    6180:	2280      	movs	r2, #128	; 0x80
    6182:	0410      	lsls	r0, r2, #16
    6184:	4301      	orrs	r1, r0
    6186:	2d38      	cmp	r5, #56	; 0x38
    6188:	dd00      	ble.n	618c <__aeabi_dadd+0x4e4>
    618a:	e081      	b.n	6290 <__aeabi_dadd+0x5e8>
    618c:	2d1f      	cmp	r5, #31
    618e:	dd00      	ble.n	6192 <__aeabi_dadd+0x4ea>
    6190:	e092      	b.n	62b8 <__aeabi_dadd+0x610>
    6192:	2220      	movs	r2, #32
    6194:	1b50      	subs	r0, r2, r5
    6196:	1c0a      	adds	r2, r1, #0
    6198:	4684      	mov	ip, r0
    619a:	4082      	lsls	r2, r0
    619c:	1c20      	adds	r0, r4, #0
    619e:	40e8      	lsrs	r0, r5
    61a0:	4302      	orrs	r2, r0
    61a2:	4690      	mov	r8, r2
    61a4:	4662      	mov	r2, ip
    61a6:	4094      	lsls	r4, r2
    61a8:	1e60      	subs	r0, r4, #1
    61aa:	4184      	sbcs	r4, r0
    61ac:	4642      	mov	r2, r8
    61ae:	4314      	orrs	r4, r2
    61b0:	40e9      	lsrs	r1, r5
    61b2:	445c      	add	r4, fp
    61b4:	455c      	cmp	r4, fp
    61b6:	4192      	sbcs	r2, r2
    61b8:	18cb      	adds	r3, r1, r3
    61ba:	4252      	negs	r2, r2
    61bc:	1899      	adds	r1, r3, r2
    61be:	4655      	mov	r5, sl
    61c0:	e66a      	b.n	5e98 <__aeabi_dadd+0x1f0>
    61c2:	4658      	mov	r0, fp
    61c4:	4318      	orrs	r0, r3
    61c6:	d100      	bne.n	61ca <__aeabi_dadd+0x522>
    61c8:	e597      	b.n	5cfa <__aeabi_dadd+0x52>
    61ca:	4658      	mov	r0, fp
    61cc:	1a27      	subs	r7, r4, r0
    61ce:	42bc      	cmp	r4, r7
    61d0:	4192      	sbcs	r2, r2
    61d2:	1ac8      	subs	r0, r1, r3
    61d4:	4252      	negs	r2, r2
    61d6:	1a80      	subs	r0, r0, r2
    61d8:	0202      	lsls	r2, r0, #8
    61da:	d566      	bpl.n	62aa <__aeabi_dadd+0x602>
    61dc:	4658      	mov	r0, fp
    61de:	1b04      	subs	r4, r0, r4
    61e0:	45a3      	cmp	fp, r4
    61e2:	4192      	sbcs	r2, r2
    61e4:	1a59      	subs	r1, r3, r1
    61e6:	4252      	negs	r2, r2
    61e8:	1a89      	subs	r1, r1, r2
    61ea:	4666      	mov	r6, ip
    61ec:	e585      	b.n	5cfa <__aeabi_dadd+0x52>
    61ee:	4658      	mov	r0, fp
    61f0:	4318      	orrs	r0, r3
    61f2:	d033      	beq.n	625c <__aeabi_dadd+0x5b4>
    61f4:	0748      	lsls	r0, r1, #29
    61f6:	08e4      	lsrs	r4, r4, #3
    61f8:	4304      	orrs	r4, r0
    61fa:	2080      	movs	r0, #128	; 0x80
    61fc:	08c9      	lsrs	r1, r1, #3
    61fe:	0300      	lsls	r0, r0, #12
    6200:	4201      	tst	r1, r0
    6202:	d008      	beq.n	6216 <__aeabi_dadd+0x56e>
    6204:	08dd      	lsrs	r5, r3, #3
    6206:	4205      	tst	r5, r0
    6208:	d105      	bne.n	6216 <__aeabi_dadd+0x56e>
    620a:	4659      	mov	r1, fp
    620c:	08ca      	lsrs	r2, r1, #3
    620e:	075c      	lsls	r4, r3, #29
    6210:	4314      	orrs	r4, r2
    6212:	1c29      	adds	r1, r5, #0
    6214:	4666      	mov	r6, ip
    6216:	0f63      	lsrs	r3, r4, #29
    6218:	00c9      	lsls	r1, r1, #3
    621a:	4319      	orrs	r1, r3
    621c:	00e4      	lsls	r4, r4, #3
    621e:	4d31      	ldr	r5, [pc, #196]	; (62e4 <__aeabi_dadd+0x63c>)
    6220:	e56b      	b.n	5cfa <__aeabi_dadd+0x52>
    6222:	4a30      	ldr	r2, [pc, #192]	; (62e4 <__aeabi_dadd+0x63c>)
    6224:	4592      	cmp	sl, r2
    6226:	d1ae      	bne.n	6186 <__aeabi_dadd+0x4de>
    6228:	1c19      	adds	r1, r3, #0
    622a:	465c      	mov	r4, fp
    622c:	4655      	mov	r5, sl
    622e:	e564      	b.n	5cfa <__aeabi_dadd+0x52>
    6230:	2800      	cmp	r0, #0
    6232:	d036      	beq.n	62a2 <__aeabi_dadd+0x5fa>
    6234:	4658      	mov	r0, fp
    6236:	4318      	orrs	r0, r3
    6238:	d010      	beq.n	625c <__aeabi_dadd+0x5b4>
    623a:	2580      	movs	r5, #128	; 0x80
    623c:	0748      	lsls	r0, r1, #29
    623e:	08e4      	lsrs	r4, r4, #3
    6240:	08c9      	lsrs	r1, r1, #3
    6242:	032d      	lsls	r5, r5, #12
    6244:	4304      	orrs	r4, r0
    6246:	4229      	tst	r1, r5
    6248:	d0e5      	beq.n	6216 <__aeabi_dadd+0x56e>
    624a:	08d8      	lsrs	r0, r3, #3
    624c:	4228      	tst	r0, r5
    624e:	d1e2      	bne.n	6216 <__aeabi_dadd+0x56e>
    6250:	465d      	mov	r5, fp
    6252:	08ea      	lsrs	r2, r5, #3
    6254:	075c      	lsls	r4, r3, #29
    6256:	4314      	orrs	r4, r2
    6258:	1c01      	adds	r1, r0, #0
    625a:	e7dc      	b.n	6216 <__aeabi_dadd+0x56e>
    625c:	4d21      	ldr	r5, [pc, #132]	; (62e4 <__aeabi_dadd+0x63c>)
    625e:	e54c      	b.n	5cfa <__aeabi_dadd+0x52>
    6260:	2300      	movs	r3, #0
    6262:	e753      	b.n	610c <__aeabi_dadd+0x464>
    6264:	1c3d      	adds	r5, r7, #0
    6266:	3d20      	subs	r5, #32
    6268:	1c0a      	adds	r2, r1, #0
    626a:	40ea      	lsrs	r2, r5
    626c:	1c15      	adds	r5, r2, #0
    626e:	2f20      	cmp	r7, #32
    6270:	d034      	beq.n	62dc <__aeabi_dadd+0x634>
    6272:	2640      	movs	r6, #64	; 0x40
    6274:	1bf7      	subs	r7, r6, r7
    6276:	40b9      	lsls	r1, r7
    6278:	430c      	orrs	r4, r1
    627a:	1e61      	subs	r1, r4, #1
    627c:	418c      	sbcs	r4, r1
    627e:	432c      	orrs	r4, r5
    6280:	2100      	movs	r1, #0
    6282:	e6d1      	b.n	6028 <__aeabi_dadd+0x380>
    6284:	2408      	movs	r4, #8
    6286:	2700      	movs	r7, #0
    6288:	4918      	ldr	r1, [pc, #96]	; (62ec <__aeabi_dadd+0x644>)
    628a:	4264      	negs	r4, r4
    628c:	4d15      	ldr	r5, [pc, #84]	; (62e4 <__aeabi_dadd+0x63c>)
    628e:	e5c6      	b.n	5e1e <__aeabi_dadd+0x176>
    6290:	430c      	orrs	r4, r1
    6292:	1e61      	subs	r1, r4, #1
    6294:	418c      	sbcs	r4, r1
    6296:	b2e4      	uxtb	r4, r4
    6298:	2100      	movs	r1, #0
    629a:	e78a      	b.n	61b2 <__aeabi_dadd+0x50a>
    629c:	1c19      	adds	r1, r3, #0
    629e:	465c      	mov	r4, fp
    62a0:	e52b      	b.n	5cfa <__aeabi_dadd+0x52>
    62a2:	1c19      	adds	r1, r3, #0
    62a4:	465c      	mov	r4, fp
    62a6:	4d0f      	ldr	r5, [pc, #60]	; (62e4 <__aeabi_dadd+0x63c>)
    62a8:	e527      	b.n	5cfa <__aeabi_dadd+0x52>
    62aa:	1c03      	adds	r3, r0, #0
    62ac:	433b      	orrs	r3, r7
    62ae:	d100      	bne.n	62b2 <__aeabi_dadd+0x60a>
    62b0:	e71c      	b.n	60ec <__aeabi_dadd+0x444>
    62b2:	1c01      	adds	r1, r0, #0
    62b4:	1c3c      	adds	r4, r7, #0
    62b6:	e520      	b.n	5cfa <__aeabi_dadd+0x52>
    62b8:	2020      	movs	r0, #32
    62ba:	4240      	negs	r0, r0
    62bc:	1940      	adds	r0, r0, r5
    62be:	1c0a      	adds	r2, r1, #0
    62c0:	40c2      	lsrs	r2, r0
    62c2:	4690      	mov	r8, r2
    62c4:	2d20      	cmp	r5, #32
    62c6:	d00b      	beq.n	62e0 <__aeabi_dadd+0x638>
    62c8:	2040      	movs	r0, #64	; 0x40
    62ca:	1b45      	subs	r5, r0, r5
    62cc:	40a9      	lsls	r1, r5
    62ce:	430c      	orrs	r4, r1
    62d0:	1e61      	subs	r1, r4, #1
    62d2:	418c      	sbcs	r4, r1
    62d4:	4645      	mov	r5, r8
    62d6:	432c      	orrs	r4, r5
    62d8:	2100      	movs	r1, #0
    62da:	e76a      	b.n	61b2 <__aeabi_dadd+0x50a>
    62dc:	2100      	movs	r1, #0
    62de:	e7cb      	b.n	6278 <__aeabi_dadd+0x5d0>
    62e0:	2100      	movs	r1, #0
    62e2:	e7f4      	b.n	62ce <__aeabi_dadd+0x626>
    62e4:	000007ff 	.word	0x000007ff
    62e8:	ff7fffff 	.word	0xff7fffff
    62ec:	007fffff 	.word	0x007fffff

000062f0 <__aeabi_ddiv>:
    62f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    62f2:	4656      	mov	r6, sl
    62f4:	4644      	mov	r4, r8
    62f6:	465f      	mov	r7, fp
    62f8:	464d      	mov	r5, r9
    62fa:	b4f0      	push	{r4, r5, r6, r7}
    62fc:	1c1f      	adds	r7, r3, #0
    62fe:	030b      	lsls	r3, r1, #12
    6300:	0b1b      	lsrs	r3, r3, #12
    6302:	4698      	mov	r8, r3
    6304:	004b      	lsls	r3, r1, #1
    6306:	b087      	sub	sp, #28
    6308:	1c04      	adds	r4, r0, #0
    630a:	4681      	mov	r9, r0
    630c:	0d5b      	lsrs	r3, r3, #21
    630e:	0fc8      	lsrs	r0, r1, #31
    6310:	1c16      	adds	r6, r2, #0
    6312:	469a      	mov	sl, r3
    6314:	9000      	str	r0, [sp, #0]
    6316:	2b00      	cmp	r3, #0
    6318:	d051      	beq.n	63be <__aeabi_ddiv+0xce>
    631a:	4b6b      	ldr	r3, [pc, #428]	; (64c8 <__aeabi_ddiv+0x1d8>)
    631c:	459a      	cmp	sl, r3
    631e:	d031      	beq.n	6384 <__aeabi_ddiv+0x94>
    6320:	2280      	movs	r2, #128	; 0x80
    6322:	4641      	mov	r1, r8
    6324:	0352      	lsls	r2, r2, #13
    6326:	430a      	orrs	r2, r1
    6328:	0f63      	lsrs	r3, r4, #29
    632a:	00d2      	lsls	r2, r2, #3
    632c:	431a      	orrs	r2, r3
    632e:	4b67      	ldr	r3, [pc, #412]	; (64cc <__aeabi_ddiv+0x1dc>)
    6330:	4690      	mov	r8, r2
    6332:	2500      	movs	r5, #0
    6334:	00e2      	lsls	r2, r4, #3
    6336:	4691      	mov	r9, r2
    6338:	449a      	add	sl, r3
    633a:	2400      	movs	r4, #0
    633c:	9502      	str	r5, [sp, #8]
    633e:	033b      	lsls	r3, r7, #12
    6340:	0b1b      	lsrs	r3, r3, #12
    6342:	469b      	mov	fp, r3
    6344:	0ffd      	lsrs	r5, r7, #31
    6346:	007b      	lsls	r3, r7, #1
    6348:	1c31      	adds	r1, r6, #0
    634a:	0d5b      	lsrs	r3, r3, #21
    634c:	9501      	str	r5, [sp, #4]
    634e:	d060      	beq.n	6412 <__aeabi_ddiv+0x122>
    6350:	4a5d      	ldr	r2, [pc, #372]	; (64c8 <__aeabi_ddiv+0x1d8>)
    6352:	4293      	cmp	r3, r2
    6354:	d054      	beq.n	6400 <__aeabi_ddiv+0x110>
    6356:	2180      	movs	r1, #128	; 0x80
    6358:	4658      	mov	r0, fp
    635a:	0349      	lsls	r1, r1, #13
    635c:	4301      	orrs	r1, r0
    635e:	0f72      	lsrs	r2, r6, #29
    6360:	00c9      	lsls	r1, r1, #3
    6362:	4311      	orrs	r1, r2
    6364:	4a59      	ldr	r2, [pc, #356]	; (64cc <__aeabi_ddiv+0x1dc>)
    6366:	468b      	mov	fp, r1
    6368:	189b      	adds	r3, r3, r2
    636a:	00f1      	lsls	r1, r6, #3
    636c:	2000      	movs	r0, #0
    636e:	9a00      	ldr	r2, [sp, #0]
    6370:	4304      	orrs	r4, r0
    6372:	406a      	eors	r2, r5
    6374:	9203      	str	r2, [sp, #12]
    6376:	2c0f      	cmp	r4, #15
    6378:	d900      	bls.n	637c <__aeabi_ddiv+0x8c>
    637a:	e0b1      	b.n	64e0 <__aeabi_ddiv+0x1f0>
    637c:	4e54      	ldr	r6, [pc, #336]	; (64d0 <__aeabi_ddiv+0x1e0>)
    637e:	00a4      	lsls	r4, r4, #2
    6380:	5934      	ldr	r4, [r6, r4]
    6382:	46a7      	mov	pc, r4
    6384:	4640      	mov	r0, r8
    6386:	4304      	orrs	r4, r0
    6388:	d16e      	bne.n	6468 <__aeabi_ddiv+0x178>
    638a:	2100      	movs	r1, #0
    638c:	2502      	movs	r5, #2
    638e:	2408      	movs	r4, #8
    6390:	4688      	mov	r8, r1
    6392:	4689      	mov	r9, r1
    6394:	9502      	str	r5, [sp, #8]
    6396:	e7d2      	b.n	633e <__aeabi_ddiv+0x4e>
    6398:	9c00      	ldr	r4, [sp, #0]
    639a:	9802      	ldr	r0, [sp, #8]
    639c:	46c3      	mov	fp, r8
    639e:	4649      	mov	r1, r9
    63a0:	9401      	str	r4, [sp, #4]
    63a2:	2802      	cmp	r0, #2
    63a4:	d064      	beq.n	6470 <__aeabi_ddiv+0x180>
    63a6:	2803      	cmp	r0, #3
    63a8:	d100      	bne.n	63ac <__aeabi_ddiv+0xbc>
    63aa:	e2af      	b.n	690c <__aeabi_ddiv+0x61c>
    63ac:	2801      	cmp	r0, #1
    63ae:	d000      	beq.n	63b2 <__aeabi_ddiv+0xc2>
    63b0:	e23c      	b.n	682c <__aeabi_ddiv+0x53c>
    63b2:	9a01      	ldr	r2, [sp, #4]
    63b4:	2400      	movs	r4, #0
    63b6:	4002      	ands	r2, r0
    63b8:	2500      	movs	r5, #0
    63ba:	46a1      	mov	r9, r4
    63bc:	e060      	b.n	6480 <__aeabi_ddiv+0x190>
    63be:	4643      	mov	r3, r8
    63c0:	4323      	orrs	r3, r4
    63c2:	d04a      	beq.n	645a <__aeabi_ddiv+0x16a>
    63c4:	4640      	mov	r0, r8
    63c6:	2800      	cmp	r0, #0
    63c8:	d100      	bne.n	63cc <__aeabi_ddiv+0xdc>
    63ca:	e1c4      	b.n	6756 <__aeabi_ddiv+0x466>
    63cc:	f7fb fea6 	bl	211c <__clzsi2>
    63d0:	1e03      	subs	r3, r0, #0
    63d2:	2b27      	cmp	r3, #39	; 0x27
    63d4:	dd00      	ble.n	63d8 <__aeabi_ddiv+0xe8>
    63d6:	e1b7      	b.n	6748 <__aeabi_ddiv+0x458>
    63d8:	2128      	movs	r1, #40	; 0x28
    63da:	1a0d      	subs	r5, r1, r0
    63dc:	1c21      	adds	r1, r4, #0
    63de:	3b08      	subs	r3, #8
    63e0:	4642      	mov	r2, r8
    63e2:	40e9      	lsrs	r1, r5
    63e4:	409a      	lsls	r2, r3
    63e6:	1c0d      	adds	r5, r1, #0
    63e8:	4315      	orrs	r5, r2
    63ea:	1c22      	adds	r2, r4, #0
    63ec:	409a      	lsls	r2, r3
    63ee:	46a8      	mov	r8, r5
    63f0:	4691      	mov	r9, r2
    63f2:	4b38      	ldr	r3, [pc, #224]	; (64d4 <__aeabi_ddiv+0x1e4>)
    63f4:	2500      	movs	r5, #0
    63f6:	1a1b      	subs	r3, r3, r0
    63f8:	469a      	mov	sl, r3
    63fa:	2400      	movs	r4, #0
    63fc:	9502      	str	r5, [sp, #8]
    63fe:	e79e      	b.n	633e <__aeabi_ddiv+0x4e>
    6400:	465a      	mov	r2, fp
    6402:	4316      	orrs	r6, r2
    6404:	2003      	movs	r0, #3
    6406:	2e00      	cmp	r6, #0
    6408:	d1b1      	bne.n	636e <__aeabi_ddiv+0x7e>
    640a:	46b3      	mov	fp, r6
    640c:	2100      	movs	r1, #0
    640e:	2002      	movs	r0, #2
    6410:	e7ad      	b.n	636e <__aeabi_ddiv+0x7e>
    6412:	465a      	mov	r2, fp
    6414:	4332      	orrs	r2, r6
    6416:	d01b      	beq.n	6450 <__aeabi_ddiv+0x160>
    6418:	465b      	mov	r3, fp
    641a:	2b00      	cmp	r3, #0
    641c:	d100      	bne.n	6420 <__aeabi_ddiv+0x130>
    641e:	e18e      	b.n	673e <__aeabi_ddiv+0x44e>
    6420:	4658      	mov	r0, fp
    6422:	f7fb fe7b 	bl	211c <__clzsi2>
    6426:	2827      	cmp	r0, #39	; 0x27
    6428:	dd00      	ble.n	642c <__aeabi_ddiv+0x13c>
    642a:	e181      	b.n	6730 <__aeabi_ddiv+0x440>
    642c:	2228      	movs	r2, #40	; 0x28
    642e:	1a17      	subs	r7, r2, r0
    6430:	1c01      	adds	r1, r0, #0
    6432:	1c32      	adds	r2, r6, #0
    6434:	3908      	subs	r1, #8
    6436:	465b      	mov	r3, fp
    6438:	40fa      	lsrs	r2, r7
    643a:	408b      	lsls	r3, r1
    643c:	1c17      	adds	r7, r2, #0
    643e:	431f      	orrs	r7, r3
    6440:	1c33      	adds	r3, r6, #0
    6442:	408b      	lsls	r3, r1
    6444:	46bb      	mov	fp, r7
    6446:	1c19      	adds	r1, r3, #0
    6448:	4b22      	ldr	r3, [pc, #136]	; (64d4 <__aeabi_ddiv+0x1e4>)
    644a:	1a1b      	subs	r3, r3, r0
    644c:	2000      	movs	r0, #0
    644e:	e78e      	b.n	636e <__aeabi_ddiv+0x7e>
    6450:	2700      	movs	r7, #0
    6452:	46bb      	mov	fp, r7
    6454:	2100      	movs	r1, #0
    6456:	2001      	movs	r0, #1
    6458:	e789      	b.n	636e <__aeabi_ddiv+0x7e>
    645a:	2000      	movs	r0, #0
    645c:	2501      	movs	r5, #1
    645e:	2404      	movs	r4, #4
    6460:	4680      	mov	r8, r0
    6462:	4681      	mov	r9, r0
    6464:	9502      	str	r5, [sp, #8]
    6466:	e76a      	b.n	633e <__aeabi_ddiv+0x4e>
    6468:	2503      	movs	r5, #3
    646a:	240c      	movs	r4, #12
    646c:	9502      	str	r5, [sp, #8]
    646e:	e766      	b.n	633e <__aeabi_ddiv+0x4e>
    6470:	9c01      	ldr	r4, [sp, #4]
    6472:	9403      	str	r4, [sp, #12]
    6474:	9d03      	ldr	r5, [sp, #12]
    6476:	2201      	movs	r2, #1
    6478:	402a      	ands	r2, r5
    647a:	2400      	movs	r4, #0
    647c:	4d12      	ldr	r5, [pc, #72]	; (64c8 <__aeabi_ddiv+0x1d8>)
    647e:	46a1      	mov	r9, r4
    6480:	2000      	movs	r0, #0
    6482:	2100      	movs	r1, #0
    6484:	0324      	lsls	r4, r4, #12
    6486:	0b26      	lsrs	r6, r4, #12
    6488:	0d0c      	lsrs	r4, r1, #20
    648a:	0524      	lsls	r4, r4, #20
    648c:	4b12      	ldr	r3, [pc, #72]	; (64d8 <__aeabi_ddiv+0x1e8>)
    648e:	4334      	orrs	r4, r6
    6490:	052d      	lsls	r5, r5, #20
    6492:	4023      	ands	r3, r4
    6494:	432b      	orrs	r3, r5
    6496:	005b      	lsls	r3, r3, #1
    6498:	085b      	lsrs	r3, r3, #1
    649a:	07d2      	lsls	r2, r2, #31
    649c:	1c19      	adds	r1, r3, #0
    649e:	4648      	mov	r0, r9
    64a0:	4311      	orrs	r1, r2
    64a2:	b007      	add	sp, #28
    64a4:	bc3c      	pop	{r2, r3, r4, r5}
    64a6:	4690      	mov	r8, r2
    64a8:	4699      	mov	r9, r3
    64aa:	46a2      	mov	sl, r4
    64ac:	46ab      	mov	fp, r5
    64ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    64b0:	2301      	movs	r3, #1
    64b2:	425b      	negs	r3, r3
    64b4:	2200      	movs	r2, #0
    64b6:	4c09      	ldr	r4, [pc, #36]	; (64dc <__aeabi_ddiv+0x1ec>)
    64b8:	4699      	mov	r9, r3
    64ba:	4d03      	ldr	r5, [pc, #12]	; (64c8 <__aeabi_ddiv+0x1d8>)
    64bc:	e7e0      	b.n	6480 <__aeabi_ddiv+0x190>
    64be:	2400      	movs	r4, #0
    64c0:	2500      	movs	r5, #0
    64c2:	46a1      	mov	r9, r4
    64c4:	e7dc      	b.n	6480 <__aeabi_ddiv+0x190>
    64c6:	46c0      	nop			; (mov r8, r8)
    64c8:	000007ff 	.word	0x000007ff
    64cc:	fffffc01 	.word	0xfffffc01
    64d0:	00007c30 	.word	0x00007c30
    64d4:	fffffc0d 	.word	0xfffffc0d
    64d8:	800fffff 	.word	0x800fffff
    64dc:	000fffff 	.word	0x000fffff
    64e0:	4655      	mov	r5, sl
    64e2:	1aed      	subs	r5, r5, r3
    64e4:	9504      	str	r5, [sp, #16]
    64e6:	45d8      	cmp	r8, fp
    64e8:	d900      	bls.n	64ec <__aeabi_ddiv+0x1fc>
    64ea:	e153      	b.n	6794 <__aeabi_ddiv+0x4a4>
    64ec:	d100      	bne.n	64f0 <__aeabi_ddiv+0x200>
    64ee:	e14e      	b.n	678e <__aeabi_ddiv+0x49e>
    64f0:	9c04      	ldr	r4, [sp, #16]
    64f2:	2500      	movs	r5, #0
    64f4:	3c01      	subs	r4, #1
    64f6:	464e      	mov	r6, r9
    64f8:	9404      	str	r4, [sp, #16]
    64fa:	4647      	mov	r7, r8
    64fc:	46a9      	mov	r9, r5
    64fe:	4658      	mov	r0, fp
    6500:	0203      	lsls	r3, r0, #8
    6502:	0e0c      	lsrs	r4, r1, #24
    6504:	431c      	orrs	r4, r3
    6506:	0209      	lsls	r1, r1, #8
    6508:	0c25      	lsrs	r5, r4, #16
    650a:	0423      	lsls	r3, r4, #16
    650c:	0c1b      	lsrs	r3, r3, #16
    650e:	9100      	str	r1, [sp, #0]
    6510:	1c38      	adds	r0, r7, #0
    6512:	1c29      	adds	r1, r5, #0
    6514:	9301      	str	r3, [sp, #4]
    6516:	f7fb f9a1 	bl	185c <__aeabi_uidiv>
    651a:	9901      	ldr	r1, [sp, #4]
    651c:	4683      	mov	fp, r0
    651e:	4341      	muls	r1, r0
    6520:	1c38      	adds	r0, r7, #0
    6522:	468a      	mov	sl, r1
    6524:	1c29      	adds	r1, r5, #0
    6526:	f7fb f9dd 	bl	18e4 <__aeabi_uidivmod>
    652a:	0c33      	lsrs	r3, r6, #16
    652c:	0409      	lsls	r1, r1, #16
    652e:	4319      	orrs	r1, r3
    6530:	458a      	cmp	sl, r1
    6532:	d90c      	bls.n	654e <__aeabi_ddiv+0x25e>
    6534:	465b      	mov	r3, fp
    6536:	1909      	adds	r1, r1, r4
    6538:	3b01      	subs	r3, #1
    653a:	428c      	cmp	r4, r1
    653c:	d900      	bls.n	6540 <__aeabi_ddiv+0x250>
    653e:	e147      	b.n	67d0 <__aeabi_ddiv+0x4e0>
    6540:	458a      	cmp	sl, r1
    6542:	d800      	bhi.n	6546 <__aeabi_ddiv+0x256>
    6544:	e144      	b.n	67d0 <__aeabi_ddiv+0x4e0>
    6546:	2202      	movs	r2, #2
    6548:	4252      	negs	r2, r2
    654a:	4493      	add	fp, r2
    654c:	1909      	adds	r1, r1, r4
    654e:	4653      	mov	r3, sl
    6550:	1acb      	subs	r3, r1, r3
    6552:	1c18      	adds	r0, r3, #0
    6554:	1c29      	adds	r1, r5, #0
    6556:	4698      	mov	r8, r3
    6558:	f7fb f980 	bl	185c <__aeabi_uidiv>
    655c:	1c07      	adds	r7, r0, #0
    655e:	9801      	ldr	r0, [sp, #4]
    6560:	1c29      	adds	r1, r5, #0
    6562:	4378      	muls	r0, r7
    6564:	4682      	mov	sl, r0
    6566:	4640      	mov	r0, r8
    6568:	f7fb f9bc 	bl	18e4 <__aeabi_uidivmod>
    656c:	0436      	lsls	r6, r6, #16
    656e:	040b      	lsls	r3, r1, #16
    6570:	0c36      	lsrs	r6, r6, #16
    6572:	4333      	orrs	r3, r6
    6574:	459a      	cmp	sl, r3
    6576:	d909      	bls.n	658c <__aeabi_ddiv+0x29c>
    6578:	191b      	adds	r3, r3, r4
    657a:	1e7a      	subs	r2, r7, #1
    657c:	429c      	cmp	r4, r3
    657e:	d900      	bls.n	6582 <__aeabi_ddiv+0x292>
    6580:	e124      	b.n	67cc <__aeabi_ddiv+0x4dc>
    6582:	459a      	cmp	sl, r3
    6584:	d800      	bhi.n	6588 <__aeabi_ddiv+0x298>
    6586:	e121      	b.n	67cc <__aeabi_ddiv+0x4dc>
    6588:	3f02      	subs	r7, #2
    658a:	191b      	adds	r3, r3, r4
    658c:	465e      	mov	r6, fp
    658e:	0432      	lsls	r2, r6, #16
    6590:	4317      	orrs	r7, r2
    6592:	0c38      	lsrs	r0, r7, #16
    6594:	46bb      	mov	fp, r7
    6596:	9e00      	ldr	r6, [sp, #0]
    6598:	9f00      	ldr	r7, [sp, #0]
    659a:	4651      	mov	r1, sl
    659c:	0c3f      	lsrs	r7, r7, #16
    659e:	0432      	lsls	r2, r6, #16
    65a0:	1a5b      	subs	r3, r3, r1
    65a2:	4659      	mov	r1, fp
    65a4:	46ba      	mov	sl, r7
    65a6:	0c12      	lsrs	r2, r2, #16
    65a8:	040f      	lsls	r7, r1, #16
    65aa:	0c3f      	lsrs	r7, r7, #16
    65ac:	4690      	mov	r8, r2
    65ae:	4651      	mov	r1, sl
    65b0:	437a      	muls	r2, r7
    65b2:	434f      	muls	r7, r1
    65b4:	4641      	mov	r1, r8
    65b6:	4341      	muls	r1, r0
    65b8:	4656      	mov	r6, sl
    65ba:	4370      	muls	r0, r6
    65bc:	19cf      	adds	r7, r1, r7
    65be:	0c16      	lsrs	r6, r2, #16
    65c0:	19be      	adds	r6, r7, r6
    65c2:	42b1      	cmp	r1, r6
    65c4:	d902      	bls.n	65cc <__aeabi_ddiv+0x2dc>
    65c6:	2780      	movs	r7, #128	; 0x80
    65c8:	027f      	lsls	r7, r7, #9
    65ca:	19c0      	adds	r0, r0, r7
    65cc:	0c31      	lsrs	r1, r6, #16
    65ce:	0412      	lsls	r2, r2, #16
    65d0:	0436      	lsls	r6, r6, #16
    65d2:	0c12      	lsrs	r2, r2, #16
    65d4:	1840      	adds	r0, r0, r1
    65d6:	18b6      	adds	r6, r6, r2
    65d8:	4283      	cmp	r3, r0
    65da:	d200      	bcs.n	65de <__aeabi_ddiv+0x2ee>
    65dc:	e0c4      	b.n	6768 <__aeabi_ddiv+0x478>
    65de:	d100      	bne.n	65e2 <__aeabi_ddiv+0x2f2>
    65e0:	e0be      	b.n	6760 <__aeabi_ddiv+0x470>
    65e2:	1a19      	subs	r1, r3, r0
    65e4:	4648      	mov	r0, r9
    65e6:	1b86      	subs	r6, r0, r6
    65e8:	45b1      	cmp	r9, r6
    65ea:	41bf      	sbcs	r7, r7
    65ec:	427f      	negs	r7, r7
    65ee:	1bcf      	subs	r7, r1, r7
    65f0:	42a7      	cmp	r7, r4
    65f2:	d100      	bne.n	65f6 <__aeabi_ddiv+0x306>
    65f4:	e113      	b.n	681e <__aeabi_ddiv+0x52e>
    65f6:	1c29      	adds	r1, r5, #0
    65f8:	1c38      	adds	r0, r7, #0
    65fa:	f7fb f92f 	bl	185c <__aeabi_uidiv>
    65fe:	9901      	ldr	r1, [sp, #4]
    6600:	9002      	str	r0, [sp, #8]
    6602:	4341      	muls	r1, r0
    6604:	1c38      	adds	r0, r7, #0
    6606:	4689      	mov	r9, r1
    6608:	1c29      	adds	r1, r5, #0
    660a:	f7fb f96b 	bl	18e4 <__aeabi_uidivmod>
    660e:	0c33      	lsrs	r3, r6, #16
    6610:	0409      	lsls	r1, r1, #16
    6612:	4319      	orrs	r1, r3
    6614:	4589      	cmp	r9, r1
    6616:	d90c      	bls.n	6632 <__aeabi_ddiv+0x342>
    6618:	9b02      	ldr	r3, [sp, #8]
    661a:	1909      	adds	r1, r1, r4
    661c:	3b01      	subs	r3, #1
    661e:	428c      	cmp	r4, r1
    6620:	d900      	bls.n	6624 <__aeabi_ddiv+0x334>
    6622:	e0ff      	b.n	6824 <__aeabi_ddiv+0x534>
    6624:	4589      	cmp	r9, r1
    6626:	d800      	bhi.n	662a <__aeabi_ddiv+0x33a>
    6628:	e0fc      	b.n	6824 <__aeabi_ddiv+0x534>
    662a:	9f02      	ldr	r7, [sp, #8]
    662c:	1909      	adds	r1, r1, r4
    662e:	3f02      	subs	r7, #2
    6630:	9702      	str	r7, [sp, #8]
    6632:	464f      	mov	r7, r9
    6634:	1bcf      	subs	r7, r1, r7
    6636:	1c38      	adds	r0, r7, #0
    6638:	1c29      	adds	r1, r5, #0
    663a:	9705      	str	r7, [sp, #20]
    663c:	f7fb f90e 	bl	185c <__aeabi_uidiv>
    6640:	1c07      	adds	r7, r0, #0
    6642:	9801      	ldr	r0, [sp, #4]
    6644:	1c29      	adds	r1, r5, #0
    6646:	4378      	muls	r0, r7
    6648:	4681      	mov	r9, r0
    664a:	9805      	ldr	r0, [sp, #20]
    664c:	f7fb f94a 	bl	18e4 <__aeabi_uidivmod>
    6650:	0436      	lsls	r6, r6, #16
    6652:	0409      	lsls	r1, r1, #16
    6654:	0c36      	lsrs	r6, r6, #16
    6656:	430e      	orrs	r6, r1
    6658:	45b1      	cmp	r9, r6
    665a:	d909      	bls.n	6670 <__aeabi_ddiv+0x380>
    665c:	1936      	adds	r6, r6, r4
    665e:	1e7b      	subs	r3, r7, #1
    6660:	42b4      	cmp	r4, r6
    6662:	d900      	bls.n	6666 <__aeabi_ddiv+0x376>
    6664:	e0e0      	b.n	6828 <__aeabi_ddiv+0x538>
    6666:	45b1      	cmp	r9, r6
    6668:	d800      	bhi.n	666c <__aeabi_ddiv+0x37c>
    666a:	e0dd      	b.n	6828 <__aeabi_ddiv+0x538>
    666c:	3f02      	subs	r7, #2
    666e:	1936      	adds	r6, r6, r4
    6670:	9d02      	ldr	r5, [sp, #8]
    6672:	4649      	mov	r1, r9
    6674:	1a76      	subs	r6, r6, r1
    6676:	0429      	lsls	r1, r5, #16
    6678:	4339      	orrs	r1, r7
    667a:	040b      	lsls	r3, r1, #16
    667c:	4657      	mov	r7, sl
    667e:	0c0a      	lsrs	r2, r1, #16
    6680:	0c1b      	lsrs	r3, r3, #16
    6682:	4640      	mov	r0, r8
    6684:	4645      	mov	r5, r8
    6686:	4358      	muls	r0, r3
    6688:	4355      	muls	r5, r2
    668a:	437b      	muls	r3, r7
    668c:	437a      	muls	r2, r7
    668e:	18eb      	adds	r3, r5, r3
    6690:	0c07      	lsrs	r7, r0, #16
    6692:	19db      	adds	r3, r3, r7
    6694:	429d      	cmp	r5, r3
    6696:	d902      	bls.n	669e <__aeabi_ddiv+0x3ae>
    6698:	2580      	movs	r5, #128	; 0x80
    669a:	026d      	lsls	r5, r5, #9
    669c:	1952      	adds	r2, r2, r5
    669e:	0c1d      	lsrs	r5, r3, #16
    66a0:	0400      	lsls	r0, r0, #16
    66a2:	041b      	lsls	r3, r3, #16
    66a4:	0c00      	lsrs	r0, r0, #16
    66a6:	1952      	adds	r2, r2, r5
    66a8:	181b      	adds	r3, r3, r0
    66aa:	4296      	cmp	r6, r2
    66ac:	d335      	bcc.n	671a <__aeabi_ddiv+0x42a>
    66ae:	d100      	bne.n	66b2 <__aeabi_ddiv+0x3c2>
    66b0:	e0fc      	b.n	68ac <__aeabi_ddiv+0x5bc>
    66b2:	2301      	movs	r3, #1
    66b4:	4319      	orrs	r1, r3
    66b6:	9e04      	ldr	r6, [sp, #16]
    66b8:	4f99      	ldr	r7, [pc, #612]	; (6920 <__aeabi_ddiv+0x630>)
    66ba:	19f5      	adds	r5, r6, r7
    66bc:	2d00      	cmp	r5, #0
    66be:	dc00      	bgt.n	66c2 <__aeabi_ddiv+0x3d2>
    66c0:	e0a1      	b.n	6806 <__aeabi_ddiv+0x516>
    66c2:	0748      	lsls	r0, r1, #29
    66c4:	d009      	beq.n	66da <__aeabi_ddiv+0x3ea>
    66c6:	230f      	movs	r3, #15
    66c8:	400b      	ands	r3, r1
    66ca:	2b04      	cmp	r3, #4
    66cc:	d005      	beq.n	66da <__aeabi_ddiv+0x3ea>
    66ce:	1d0b      	adds	r3, r1, #4
    66d0:	428b      	cmp	r3, r1
    66d2:	4189      	sbcs	r1, r1
    66d4:	4249      	negs	r1, r1
    66d6:	448b      	add	fp, r1
    66d8:	1c19      	adds	r1, r3, #0
    66da:	465a      	mov	r2, fp
    66dc:	01d2      	lsls	r2, r2, #7
    66de:	d507      	bpl.n	66f0 <__aeabi_ddiv+0x400>
    66e0:	4b90      	ldr	r3, [pc, #576]	; (6924 <__aeabi_ddiv+0x634>)
    66e2:	465c      	mov	r4, fp
    66e4:	9e04      	ldr	r6, [sp, #16]
    66e6:	2780      	movs	r7, #128	; 0x80
    66e8:	401c      	ands	r4, r3
    66ea:	00ff      	lsls	r7, r7, #3
    66ec:	46a3      	mov	fp, r4
    66ee:	19f5      	adds	r5, r6, r7
    66f0:	4b8d      	ldr	r3, [pc, #564]	; (6928 <__aeabi_ddiv+0x638>)
    66f2:	429d      	cmp	r5, r3
    66f4:	dd7a      	ble.n	67ec <__aeabi_ddiv+0x4fc>
    66f6:	9c03      	ldr	r4, [sp, #12]
    66f8:	2201      	movs	r2, #1
    66fa:	4022      	ands	r2, r4
    66fc:	2400      	movs	r4, #0
    66fe:	4d8b      	ldr	r5, [pc, #556]	; (692c <__aeabi_ddiv+0x63c>)
    6700:	46a1      	mov	r9, r4
    6702:	e6bd      	b.n	6480 <__aeabi_ddiv+0x190>
    6704:	2480      	movs	r4, #128	; 0x80
    6706:	0324      	lsls	r4, r4, #12
    6708:	4647      	mov	r7, r8
    670a:	4227      	tst	r7, r4
    670c:	d14c      	bne.n	67a8 <__aeabi_ddiv+0x4b8>
    670e:	433c      	orrs	r4, r7
    6710:	0324      	lsls	r4, r4, #12
    6712:	0b24      	lsrs	r4, r4, #12
    6714:	9a00      	ldr	r2, [sp, #0]
    6716:	4d85      	ldr	r5, [pc, #532]	; (692c <__aeabi_ddiv+0x63c>)
    6718:	e6b2      	b.n	6480 <__aeabi_ddiv+0x190>
    671a:	1936      	adds	r6, r6, r4
    671c:	1e48      	subs	r0, r1, #1
    671e:	42b4      	cmp	r4, r6
    6720:	d95e      	bls.n	67e0 <__aeabi_ddiv+0x4f0>
    6722:	1c01      	adds	r1, r0, #0
    6724:	4296      	cmp	r6, r2
    6726:	d1c4      	bne.n	66b2 <__aeabi_ddiv+0x3c2>
    6728:	9e00      	ldr	r6, [sp, #0]
    672a:	429e      	cmp	r6, r3
    672c:	d1c1      	bne.n	66b2 <__aeabi_ddiv+0x3c2>
    672e:	e7c2      	b.n	66b6 <__aeabi_ddiv+0x3c6>
    6730:	1c03      	adds	r3, r0, #0
    6732:	3b28      	subs	r3, #40	; 0x28
    6734:	1c31      	adds	r1, r6, #0
    6736:	4099      	lsls	r1, r3
    6738:	468b      	mov	fp, r1
    673a:	2100      	movs	r1, #0
    673c:	e684      	b.n	6448 <__aeabi_ddiv+0x158>
    673e:	1c30      	adds	r0, r6, #0
    6740:	f7fb fcec 	bl	211c <__clzsi2>
    6744:	3020      	adds	r0, #32
    6746:	e66e      	b.n	6426 <__aeabi_ddiv+0x136>
    6748:	3b28      	subs	r3, #40	; 0x28
    674a:	1c21      	adds	r1, r4, #0
    674c:	4099      	lsls	r1, r3
    674e:	2200      	movs	r2, #0
    6750:	4688      	mov	r8, r1
    6752:	4691      	mov	r9, r2
    6754:	e64d      	b.n	63f2 <__aeabi_ddiv+0x102>
    6756:	1c20      	adds	r0, r4, #0
    6758:	f7fb fce0 	bl	211c <__clzsi2>
    675c:	3020      	adds	r0, #32
    675e:	e637      	b.n	63d0 <__aeabi_ddiv+0xe0>
    6760:	2100      	movs	r1, #0
    6762:	45b1      	cmp	r9, r6
    6764:	d300      	bcc.n	6768 <__aeabi_ddiv+0x478>
    6766:	e73d      	b.n	65e4 <__aeabi_ddiv+0x2f4>
    6768:	9f00      	ldr	r7, [sp, #0]
    676a:	465a      	mov	r2, fp
    676c:	44b9      	add	r9, r7
    676e:	45b9      	cmp	r9, r7
    6770:	41bf      	sbcs	r7, r7
    6772:	427f      	negs	r7, r7
    6774:	193f      	adds	r7, r7, r4
    6776:	18fb      	adds	r3, r7, r3
    6778:	3a01      	subs	r2, #1
    677a:	429c      	cmp	r4, r3
    677c:	d21e      	bcs.n	67bc <__aeabi_ddiv+0x4cc>
    677e:	4298      	cmp	r0, r3
    6780:	d900      	bls.n	6784 <__aeabi_ddiv+0x494>
    6782:	e07e      	b.n	6882 <__aeabi_ddiv+0x592>
    6784:	d100      	bne.n	6788 <__aeabi_ddiv+0x498>
    6786:	e0b5      	b.n	68f4 <__aeabi_ddiv+0x604>
    6788:	1a19      	subs	r1, r3, r0
    678a:	4693      	mov	fp, r2
    678c:	e72a      	b.n	65e4 <__aeabi_ddiv+0x2f4>
    678e:	4589      	cmp	r9, r1
    6790:	d800      	bhi.n	6794 <__aeabi_ddiv+0x4a4>
    6792:	e6ad      	b.n	64f0 <__aeabi_ddiv+0x200>
    6794:	4648      	mov	r0, r9
    6796:	4646      	mov	r6, r8
    6798:	4642      	mov	r2, r8
    679a:	0877      	lsrs	r7, r6, #1
    679c:	07d3      	lsls	r3, r2, #31
    679e:	0846      	lsrs	r6, r0, #1
    67a0:	07c0      	lsls	r0, r0, #31
    67a2:	431e      	orrs	r6, r3
    67a4:	4681      	mov	r9, r0
    67a6:	e6aa      	b.n	64fe <__aeabi_ddiv+0x20e>
    67a8:	4658      	mov	r0, fp
    67aa:	4220      	tst	r0, r4
    67ac:	d112      	bne.n	67d4 <__aeabi_ddiv+0x4e4>
    67ae:	4304      	orrs	r4, r0
    67b0:	0324      	lsls	r4, r4, #12
    67b2:	1c2a      	adds	r2, r5, #0
    67b4:	0b24      	lsrs	r4, r4, #12
    67b6:	4689      	mov	r9, r1
    67b8:	4d5c      	ldr	r5, [pc, #368]	; (692c <__aeabi_ddiv+0x63c>)
    67ba:	e661      	b.n	6480 <__aeabi_ddiv+0x190>
    67bc:	42a3      	cmp	r3, r4
    67be:	d1e3      	bne.n	6788 <__aeabi_ddiv+0x498>
    67c0:	9f00      	ldr	r7, [sp, #0]
    67c2:	454f      	cmp	r7, r9
    67c4:	d9db      	bls.n	677e <__aeabi_ddiv+0x48e>
    67c6:	1a21      	subs	r1, r4, r0
    67c8:	4693      	mov	fp, r2
    67ca:	e70b      	b.n	65e4 <__aeabi_ddiv+0x2f4>
    67cc:	1c17      	adds	r7, r2, #0
    67ce:	e6dd      	b.n	658c <__aeabi_ddiv+0x29c>
    67d0:	469b      	mov	fp, r3
    67d2:	e6bc      	b.n	654e <__aeabi_ddiv+0x25e>
    67d4:	433c      	orrs	r4, r7
    67d6:	0324      	lsls	r4, r4, #12
    67d8:	0b24      	lsrs	r4, r4, #12
    67da:	9a00      	ldr	r2, [sp, #0]
    67dc:	4d53      	ldr	r5, [pc, #332]	; (692c <__aeabi_ddiv+0x63c>)
    67de:	e64f      	b.n	6480 <__aeabi_ddiv+0x190>
    67e0:	42b2      	cmp	r2, r6
    67e2:	d859      	bhi.n	6898 <__aeabi_ddiv+0x5a8>
    67e4:	d100      	bne.n	67e8 <__aeabi_ddiv+0x4f8>
    67e6:	e08a      	b.n	68fe <__aeabi_ddiv+0x60e>
    67e8:	1c01      	adds	r1, r0, #0
    67ea:	e762      	b.n	66b2 <__aeabi_ddiv+0x3c2>
    67ec:	465f      	mov	r7, fp
    67ee:	08c9      	lsrs	r1, r1, #3
    67f0:	077b      	lsls	r3, r7, #29
    67f2:	9e03      	ldr	r6, [sp, #12]
    67f4:	430b      	orrs	r3, r1
    67f6:	027c      	lsls	r4, r7, #9
    67f8:	056d      	lsls	r5, r5, #21
    67fa:	2201      	movs	r2, #1
    67fc:	4699      	mov	r9, r3
    67fe:	0b24      	lsrs	r4, r4, #12
    6800:	0d6d      	lsrs	r5, r5, #21
    6802:	4032      	ands	r2, r6
    6804:	e63c      	b.n	6480 <__aeabi_ddiv+0x190>
    6806:	4b4a      	ldr	r3, [pc, #296]	; (6930 <__aeabi_ddiv+0x640>)
    6808:	9f04      	ldr	r7, [sp, #16]
    680a:	1bdb      	subs	r3, r3, r7
    680c:	2b38      	cmp	r3, #56	; 0x38
    680e:	dd10      	ble.n	6832 <__aeabi_ddiv+0x542>
    6810:	9c03      	ldr	r4, [sp, #12]
    6812:	2201      	movs	r2, #1
    6814:	4022      	ands	r2, r4
    6816:	2400      	movs	r4, #0
    6818:	2500      	movs	r5, #0
    681a:	46a1      	mov	r9, r4
    681c:	e630      	b.n	6480 <__aeabi_ddiv+0x190>
    681e:	2101      	movs	r1, #1
    6820:	4249      	negs	r1, r1
    6822:	e748      	b.n	66b6 <__aeabi_ddiv+0x3c6>
    6824:	9302      	str	r3, [sp, #8]
    6826:	e704      	b.n	6632 <__aeabi_ddiv+0x342>
    6828:	1c1f      	adds	r7, r3, #0
    682a:	e721      	b.n	6670 <__aeabi_ddiv+0x380>
    682c:	9c01      	ldr	r4, [sp, #4]
    682e:	9403      	str	r4, [sp, #12]
    6830:	e741      	b.n	66b6 <__aeabi_ddiv+0x3c6>
    6832:	2b1f      	cmp	r3, #31
    6834:	dc40      	bgt.n	68b8 <__aeabi_ddiv+0x5c8>
    6836:	483f      	ldr	r0, [pc, #252]	; (6934 <__aeabi_ddiv+0x644>)
    6838:	9f04      	ldr	r7, [sp, #16]
    683a:	1c0c      	adds	r4, r1, #0
    683c:	183a      	adds	r2, r7, r0
    683e:	4658      	mov	r0, fp
    6840:	4091      	lsls	r1, r2
    6842:	40dc      	lsrs	r4, r3
    6844:	4090      	lsls	r0, r2
    6846:	4320      	orrs	r0, r4
    6848:	1c0a      	adds	r2, r1, #0
    684a:	1e51      	subs	r1, r2, #1
    684c:	418a      	sbcs	r2, r1
    684e:	1c01      	adds	r1, r0, #0
    6850:	4311      	orrs	r1, r2
    6852:	465a      	mov	r2, fp
    6854:	40da      	lsrs	r2, r3
    6856:	1c13      	adds	r3, r2, #0
    6858:	0748      	lsls	r0, r1, #29
    685a:	d009      	beq.n	6870 <__aeabi_ddiv+0x580>
    685c:	220f      	movs	r2, #15
    685e:	400a      	ands	r2, r1
    6860:	2a04      	cmp	r2, #4
    6862:	d005      	beq.n	6870 <__aeabi_ddiv+0x580>
    6864:	1d0a      	adds	r2, r1, #4
    6866:	428a      	cmp	r2, r1
    6868:	4189      	sbcs	r1, r1
    686a:	4249      	negs	r1, r1
    686c:	185b      	adds	r3, r3, r1
    686e:	1c11      	adds	r1, r2, #0
    6870:	021a      	lsls	r2, r3, #8
    6872:	d534      	bpl.n	68de <__aeabi_ddiv+0x5ee>
    6874:	9c03      	ldr	r4, [sp, #12]
    6876:	2201      	movs	r2, #1
    6878:	4022      	ands	r2, r4
    687a:	2400      	movs	r4, #0
    687c:	2501      	movs	r5, #1
    687e:	46a1      	mov	r9, r4
    6880:	e5fe      	b.n	6480 <__aeabi_ddiv+0x190>
    6882:	9f00      	ldr	r7, [sp, #0]
    6884:	2102      	movs	r1, #2
    6886:	4249      	negs	r1, r1
    6888:	44b9      	add	r9, r7
    688a:	448b      	add	fp, r1
    688c:	45b9      	cmp	r9, r7
    688e:	4189      	sbcs	r1, r1
    6890:	4249      	negs	r1, r1
    6892:	1909      	adds	r1, r1, r4
    6894:	18cb      	adds	r3, r1, r3
    6896:	e6a4      	b.n	65e2 <__aeabi_ddiv+0x2f2>
    6898:	9d00      	ldr	r5, [sp, #0]
    689a:	1e88      	subs	r0, r1, #2
    689c:	0069      	lsls	r1, r5, #1
    689e:	42a9      	cmp	r1, r5
    68a0:	41ad      	sbcs	r5, r5
    68a2:	426d      	negs	r5, r5
    68a4:	192c      	adds	r4, r5, r4
    68a6:	1936      	adds	r6, r6, r4
    68a8:	9100      	str	r1, [sp, #0]
    68aa:	e73a      	b.n	6722 <__aeabi_ddiv+0x432>
    68ac:	2b00      	cmp	r3, #0
    68ae:	d000      	beq.n	68b2 <__aeabi_ddiv+0x5c2>
    68b0:	e733      	b.n	671a <__aeabi_ddiv+0x42a>
    68b2:	2400      	movs	r4, #0
    68b4:	9400      	str	r4, [sp, #0]
    68b6:	e737      	b.n	6728 <__aeabi_ddiv+0x438>
    68b8:	4a1f      	ldr	r2, [pc, #124]	; (6938 <__aeabi_ddiv+0x648>)
    68ba:	9c04      	ldr	r4, [sp, #16]
    68bc:	465d      	mov	r5, fp
    68be:	1b12      	subs	r2, r2, r4
    68c0:	40d5      	lsrs	r5, r2
    68c2:	1c2a      	adds	r2, r5, #0
    68c4:	2b20      	cmp	r3, #32
    68c6:	d01f      	beq.n	6908 <__aeabi_ddiv+0x618>
    68c8:	4e1c      	ldr	r6, [pc, #112]	; (693c <__aeabi_ddiv+0x64c>)
    68ca:	465f      	mov	r7, fp
    68cc:	19a3      	adds	r3, r4, r6
    68ce:	409f      	lsls	r7, r3
    68d0:	1c3b      	adds	r3, r7, #0
    68d2:	4319      	orrs	r1, r3
    68d4:	1e4b      	subs	r3, r1, #1
    68d6:	4199      	sbcs	r1, r3
    68d8:	4311      	orrs	r1, r2
    68da:	2300      	movs	r3, #0
    68dc:	e7bc      	b.n	6858 <__aeabi_ddiv+0x568>
    68de:	075a      	lsls	r2, r3, #29
    68e0:	08c9      	lsrs	r1, r1, #3
    68e2:	430a      	orrs	r2, r1
    68e4:	9f03      	ldr	r7, [sp, #12]
    68e6:	4691      	mov	r9, r2
    68e8:	025b      	lsls	r3, r3, #9
    68ea:	2201      	movs	r2, #1
    68ec:	0b1c      	lsrs	r4, r3, #12
    68ee:	403a      	ands	r2, r7
    68f0:	2500      	movs	r5, #0
    68f2:	e5c5      	b.n	6480 <__aeabi_ddiv+0x190>
    68f4:	454e      	cmp	r6, r9
    68f6:	d8c4      	bhi.n	6882 <__aeabi_ddiv+0x592>
    68f8:	4693      	mov	fp, r2
    68fa:	2100      	movs	r1, #0
    68fc:	e672      	b.n	65e4 <__aeabi_ddiv+0x2f4>
    68fe:	9f00      	ldr	r7, [sp, #0]
    6900:	429f      	cmp	r7, r3
    6902:	d3c9      	bcc.n	6898 <__aeabi_ddiv+0x5a8>
    6904:	1c01      	adds	r1, r0, #0
    6906:	e70f      	b.n	6728 <__aeabi_ddiv+0x438>
    6908:	2300      	movs	r3, #0
    690a:	e7e2      	b.n	68d2 <__aeabi_ddiv+0x5e2>
    690c:	2480      	movs	r4, #128	; 0x80
    690e:	0324      	lsls	r4, r4, #12
    6910:	465f      	mov	r7, fp
    6912:	433c      	orrs	r4, r7
    6914:	0324      	lsls	r4, r4, #12
    6916:	0b24      	lsrs	r4, r4, #12
    6918:	9a01      	ldr	r2, [sp, #4]
    691a:	4689      	mov	r9, r1
    691c:	4d03      	ldr	r5, [pc, #12]	; (692c <__aeabi_ddiv+0x63c>)
    691e:	e5af      	b.n	6480 <__aeabi_ddiv+0x190>
    6920:	000003ff 	.word	0x000003ff
    6924:	feffffff 	.word	0xfeffffff
    6928:	000007fe 	.word	0x000007fe
    692c:	000007ff 	.word	0x000007ff
    6930:	fffffc02 	.word	0xfffffc02
    6934:	0000041e 	.word	0x0000041e
    6938:	fffffbe2 	.word	0xfffffbe2
    693c:	0000043e 	.word	0x0000043e

00006940 <__eqdf2>:
    6940:	b5f0      	push	{r4, r5, r6, r7, lr}
    6942:	465f      	mov	r7, fp
    6944:	4656      	mov	r6, sl
    6946:	464d      	mov	r5, r9
    6948:	4644      	mov	r4, r8
    694a:	b4f0      	push	{r4, r5, r6, r7}
    694c:	1c0d      	adds	r5, r1, #0
    694e:	1c04      	adds	r4, r0, #0
    6950:	4680      	mov	r8, r0
    6952:	0fe8      	lsrs	r0, r5, #31
    6954:	4681      	mov	r9, r0
    6956:	0318      	lsls	r0, r3, #12
    6958:	030f      	lsls	r7, r1, #12
    695a:	0b00      	lsrs	r0, r0, #12
    695c:	0b3f      	lsrs	r7, r7, #12
    695e:	b083      	sub	sp, #12
    6960:	4684      	mov	ip, r0
    6962:	481b      	ldr	r0, [pc, #108]	; (69d0 <__eqdf2+0x90>)
    6964:	9700      	str	r7, [sp, #0]
    6966:	0049      	lsls	r1, r1, #1
    6968:	005e      	lsls	r6, r3, #1
    696a:	0fdf      	lsrs	r7, r3, #31
    696c:	0d49      	lsrs	r1, r1, #21
    696e:	4692      	mov	sl, r2
    6970:	0d76      	lsrs	r6, r6, #21
    6972:	46bb      	mov	fp, r7
    6974:	4281      	cmp	r1, r0
    6976:	d00c      	beq.n	6992 <__eqdf2+0x52>
    6978:	4815      	ldr	r0, [pc, #84]	; (69d0 <__eqdf2+0x90>)
    697a:	4286      	cmp	r6, r0
    697c:	d010      	beq.n	69a0 <__eqdf2+0x60>
    697e:	2001      	movs	r0, #1
    6980:	42b1      	cmp	r1, r6
    6982:	d015      	beq.n	69b0 <__eqdf2+0x70>
    6984:	b003      	add	sp, #12
    6986:	bc3c      	pop	{r2, r3, r4, r5}
    6988:	4690      	mov	r8, r2
    698a:	4699      	mov	r9, r3
    698c:	46a2      	mov	sl, r4
    698e:	46ab      	mov	fp, r5
    6990:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6992:	9f00      	ldr	r7, [sp, #0]
    6994:	2001      	movs	r0, #1
    6996:	4327      	orrs	r7, r4
    6998:	d1f4      	bne.n	6984 <__eqdf2+0x44>
    699a:	480d      	ldr	r0, [pc, #52]	; (69d0 <__eqdf2+0x90>)
    699c:	4286      	cmp	r6, r0
    699e:	d1ee      	bne.n	697e <__eqdf2+0x3e>
    69a0:	4660      	mov	r0, ip
    69a2:	4302      	orrs	r2, r0
    69a4:	2001      	movs	r0, #1
    69a6:	2a00      	cmp	r2, #0
    69a8:	d1ec      	bne.n	6984 <__eqdf2+0x44>
    69aa:	2001      	movs	r0, #1
    69ac:	42b1      	cmp	r1, r6
    69ae:	d1e9      	bne.n	6984 <__eqdf2+0x44>
    69b0:	9b00      	ldr	r3, [sp, #0]
    69b2:	4563      	cmp	r3, ip
    69b4:	d1e6      	bne.n	6984 <__eqdf2+0x44>
    69b6:	45d0      	cmp	r8, sl
    69b8:	d1e4      	bne.n	6984 <__eqdf2+0x44>
    69ba:	45d9      	cmp	r9, fp
    69bc:	d006      	beq.n	69cc <__eqdf2+0x8c>
    69be:	2900      	cmp	r1, #0
    69c0:	d1e0      	bne.n	6984 <__eqdf2+0x44>
    69c2:	431c      	orrs	r4, r3
    69c4:	1c20      	adds	r0, r4, #0
    69c6:	1e44      	subs	r4, r0, #1
    69c8:	41a0      	sbcs	r0, r4
    69ca:	e7db      	b.n	6984 <__eqdf2+0x44>
    69cc:	2000      	movs	r0, #0
    69ce:	e7d9      	b.n	6984 <__eqdf2+0x44>
    69d0:	000007ff 	.word	0x000007ff

000069d4 <__gedf2>:
    69d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    69d6:	465f      	mov	r7, fp
    69d8:	4656      	mov	r6, sl
    69da:	464d      	mov	r5, r9
    69dc:	4644      	mov	r4, r8
    69de:	b4f0      	push	{r4, r5, r6, r7}
    69e0:	0fcd      	lsrs	r5, r1, #31
    69e2:	0fde      	lsrs	r6, r3, #31
    69e4:	46ac      	mov	ip, r5
    69e6:	031d      	lsls	r5, r3, #12
    69e8:	0b2d      	lsrs	r5, r5, #12
    69ea:	46b1      	mov	r9, r6
    69ec:	4e35      	ldr	r6, [pc, #212]	; (6ac4 <__gedf2+0xf0>)
    69ee:	030f      	lsls	r7, r1, #12
    69f0:	004c      	lsls	r4, r1, #1
    69f2:	46ab      	mov	fp, r5
    69f4:	005d      	lsls	r5, r3, #1
    69f6:	4680      	mov	r8, r0
    69f8:	0b3f      	lsrs	r7, r7, #12
    69fa:	0d64      	lsrs	r4, r4, #21
    69fc:	4692      	mov	sl, r2
    69fe:	0d6d      	lsrs	r5, r5, #21
    6a00:	42b4      	cmp	r4, r6
    6a02:	d031      	beq.n	6a68 <__gedf2+0x94>
    6a04:	4e2f      	ldr	r6, [pc, #188]	; (6ac4 <__gedf2+0xf0>)
    6a06:	42b5      	cmp	r5, r6
    6a08:	d034      	beq.n	6a74 <__gedf2+0xa0>
    6a0a:	2c00      	cmp	r4, #0
    6a0c:	d10e      	bne.n	6a2c <__gedf2+0x58>
    6a0e:	4338      	orrs	r0, r7
    6a10:	4241      	negs	r1, r0
    6a12:	4141      	adcs	r1, r0
    6a14:	1c08      	adds	r0, r1, #0
    6a16:	2d00      	cmp	r5, #0
    6a18:	d00b      	beq.n	6a32 <__gedf2+0x5e>
    6a1a:	2900      	cmp	r1, #0
    6a1c:	d119      	bne.n	6a52 <__gedf2+0x7e>
    6a1e:	45cc      	cmp	ip, r9
    6a20:	d02c      	beq.n	6a7c <__gedf2+0xa8>
    6a22:	4666      	mov	r6, ip
    6a24:	2e00      	cmp	r6, #0
    6a26:	d117      	bne.n	6a58 <__gedf2+0x84>
    6a28:	2001      	movs	r0, #1
    6a2a:	e017      	b.n	6a5c <__gedf2+0x88>
    6a2c:	2d00      	cmp	r5, #0
    6a2e:	d1f6      	bne.n	6a1e <__gedf2+0x4a>
    6a30:	1c28      	adds	r0, r5, #0
    6a32:	4659      	mov	r1, fp
    6a34:	430a      	orrs	r2, r1
    6a36:	4253      	negs	r3, r2
    6a38:	4153      	adcs	r3, r2
    6a3a:	2800      	cmp	r0, #0
    6a3c:	d106      	bne.n	6a4c <__gedf2+0x78>
    6a3e:	2b00      	cmp	r3, #0
    6a40:	d0ed      	beq.n	6a1e <__gedf2+0x4a>
    6a42:	4665      	mov	r5, ip
    6a44:	2001      	movs	r0, #1
    6a46:	2d00      	cmp	r5, #0
    6a48:	d008      	beq.n	6a5c <__gedf2+0x88>
    6a4a:	e005      	b.n	6a58 <__gedf2+0x84>
    6a4c:	2000      	movs	r0, #0
    6a4e:	2b00      	cmp	r3, #0
    6a50:	d104      	bne.n	6a5c <__gedf2+0x88>
    6a52:	464b      	mov	r3, r9
    6a54:	2b00      	cmp	r3, #0
    6a56:	d1e7      	bne.n	6a28 <__gedf2+0x54>
    6a58:	2001      	movs	r0, #1
    6a5a:	4240      	negs	r0, r0
    6a5c:	bc3c      	pop	{r2, r3, r4, r5}
    6a5e:	4690      	mov	r8, r2
    6a60:	4699      	mov	r9, r3
    6a62:	46a2      	mov	sl, r4
    6a64:	46ab      	mov	fp, r5
    6a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6a68:	1c3e      	adds	r6, r7, #0
    6a6a:	4306      	orrs	r6, r0
    6a6c:	d0ca      	beq.n	6a04 <__gedf2+0x30>
    6a6e:	2002      	movs	r0, #2
    6a70:	4240      	negs	r0, r0
    6a72:	e7f3      	b.n	6a5c <__gedf2+0x88>
    6a74:	465e      	mov	r6, fp
    6a76:	4316      	orrs	r6, r2
    6a78:	d0c7      	beq.n	6a0a <__gedf2+0x36>
    6a7a:	e7f8      	b.n	6a6e <__gedf2+0x9a>
    6a7c:	42ac      	cmp	r4, r5
    6a7e:	dc05      	bgt.n	6a8c <__gedf2+0xb8>
    6a80:	da09      	bge.n	6a96 <__gedf2+0xc2>
    6a82:	4663      	mov	r3, ip
    6a84:	2b00      	cmp	r3, #0
    6a86:	d0e7      	beq.n	6a58 <__gedf2+0x84>
    6a88:	2001      	movs	r0, #1
    6a8a:	e7e7      	b.n	6a5c <__gedf2+0x88>
    6a8c:	4661      	mov	r1, ip
    6a8e:	2900      	cmp	r1, #0
    6a90:	d1e2      	bne.n	6a58 <__gedf2+0x84>
    6a92:	2001      	movs	r0, #1
    6a94:	e7e2      	b.n	6a5c <__gedf2+0x88>
    6a96:	455f      	cmp	r7, fp
    6a98:	d808      	bhi.n	6aac <__gedf2+0xd8>
    6a9a:	d00c      	beq.n	6ab6 <__gedf2+0xe2>
    6a9c:	2000      	movs	r0, #0
    6a9e:	455f      	cmp	r7, fp
    6aa0:	d2dc      	bcs.n	6a5c <__gedf2+0x88>
    6aa2:	4666      	mov	r6, ip
    6aa4:	2e00      	cmp	r6, #0
    6aa6:	d0d7      	beq.n	6a58 <__gedf2+0x84>
    6aa8:	2001      	movs	r0, #1
    6aaa:	e7d7      	b.n	6a5c <__gedf2+0x88>
    6aac:	4665      	mov	r5, ip
    6aae:	2d00      	cmp	r5, #0
    6ab0:	d1d2      	bne.n	6a58 <__gedf2+0x84>
    6ab2:	2001      	movs	r0, #1
    6ab4:	e7d2      	b.n	6a5c <__gedf2+0x88>
    6ab6:	45d0      	cmp	r8, sl
    6ab8:	d8f8      	bhi.n	6aac <__gedf2+0xd8>
    6aba:	2000      	movs	r0, #0
    6abc:	45d0      	cmp	r8, sl
    6abe:	d3f0      	bcc.n	6aa2 <__gedf2+0xce>
    6ac0:	e7cc      	b.n	6a5c <__gedf2+0x88>
    6ac2:	46c0      	nop			; (mov r8, r8)
    6ac4:	000007ff 	.word	0x000007ff

00006ac8 <__ledf2>:
    6ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
    6aca:	4656      	mov	r6, sl
    6acc:	464d      	mov	r5, r9
    6ace:	4644      	mov	r4, r8
    6ad0:	465f      	mov	r7, fp
    6ad2:	b4f0      	push	{r4, r5, r6, r7}
    6ad4:	1c0d      	adds	r5, r1, #0
    6ad6:	b083      	sub	sp, #12
    6ad8:	1c04      	adds	r4, r0, #0
    6ada:	9001      	str	r0, [sp, #4]
    6adc:	0fe8      	lsrs	r0, r5, #31
    6ade:	4681      	mov	r9, r0
    6ae0:	0318      	lsls	r0, r3, #12
    6ae2:	030f      	lsls	r7, r1, #12
    6ae4:	0b00      	lsrs	r0, r0, #12
    6ae6:	0b3f      	lsrs	r7, r7, #12
    6ae8:	4684      	mov	ip, r0
    6aea:	4838      	ldr	r0, [pc, #224]	; (6bcc <__ledf2+0x104>)
    6aec:	9700      	str	r7, [sp, #0]
    6aee:	0049      	lsls	r1, r1, #1
    6af0:	005e      	lsls	r6, r3, #1
    6af2:	0fdf      	lsrs	r7, r3, #31
    6af4:	0d49      	lsrs	r1, r1, #21
    6af6:	4692      	mov	sl, r2
    6af8:	0d76      	lsrs	r6, r6, #21
    6afa:	46b8      	mov	r8, r7
    6afc:	4281      	cmp	r1, r0
    6afe:	d033      	beq.n	6b68 <__ledf2+0xa0>
    6b00:	4832      	ldr	r0, [pc, #200]	; (6bcc <__ledf2+0x104>)
    6b02:	4286      	cmp	r6, r0
    6b04:	d035      	beq.n	6b72 <__ledf2+0xaa>
    6b06:	2900      	cmp	r1, #0
    6b08:	d017      	beq.n	6b3a <__ledf2+0x72>
    6b0a:	2e00      	cmp	r6, #0
    6b0c:	d11e      	bne.n	6b4c <__ledf2+0x84>
    6b0e:	1c34      	adds	r4, r6, #0
    6b10:	4667      	mov	r7, ip
    6b12:	433a      	orrs	r2, r7
    6b14:	4253      	negs	r3, r2
    6b16:	4153      	adcs	r3, r2
    6b18:	2c00      	cmp	r4, #0
    6b1a:	d01e      	beq.n	6b5a <__ledf2+0x92>
    6b1c:	2000      	movs	r0, #0
    6b1e:	2b00      	cmp	r3, #0
    6b20:	d104      	bne.n	6b2c <__ledf2+0x64>
    6b22:	4640      	mov	r0, r8
    6b24:	2800      	cmp	r0, #0
    6b26:	d116      	bne.n	6b56 <__ledf2+0x8e>
    6b28:	2001      	movs	r0, #1
    6b2a:	4240      	negs	r0, r0
    6b2c:	b003      	add	sp, #12
    6b2e:	bc3c      	pop	{r2, r3, r4, r5}
    6b30:	4690      	mov	r8, r2
    6b32:	4699      	mov	r9, r3
    6b34:	46a2      	mov	sl, r4
    6b36:	46ab      	mov	fp, r5
    6b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6b3a:	9800      	ldr	r0, [sp, #0]
    6b3c:	4304      	orrs	r4, r0
    6b3e:	4260      	negs	r0, r4
    6b40:	4160      	adcs	r0, r4
    6b42:	1c04      	adds	r4, r0, #0
    6b44:	2e00      	cmp	r6, #0
    6b46:	d0e3      	beq.n	6b10 <__ledf2+0x48>
    6b48:	2800      	cmp	r0, #0
    6b4a:	d1ea      	bne.n	6b22 <__ledf2+0x5a>
    6b4c:	45c1      	cmp	r9, r8
    6b4e:	d015      	beq.n	6b7c <__ledf2+0xb4>
    6b50:	464f      	mov	r7, r9
    6b52:	2f00      	cmp	r7, #0
    6b54:	d1e8      	bne.n	6b28 <__ledf2+0x60>
    6b56:	2001      	movs	r0, #1
    6b58:	e7e8      	b.n	6b2c <__ledf2+0x64>
    6b5a:	2b00      	cmp	r3, #0
    6b5c:	d0f6      	beq.n	6b4c <__ledf2+0x84>
    6b5e:	464b      	mov	r3, r9
    6b60:	2001      	movs	r0, #1
    6b62:	2b00      	cmp	r3, #0
    6b64:	d0e2      	beq.n	6b2c <__ledf2+0x64>
    6b66:	e7df      	b.n	6b28 <__ledf2+0x60>
    6b68:	9f00      	ldr	r7, [sp, #0]
    6b6a:	2002      	movs	r0, #2
    6b6c:	4327      	orrs	r7, r4
    6b6e:	d1dd      	bne.n	6b2c <__ledf2+0x64>
    6b70:	e7c6      	b.n	6b00 <__ledf2+0x38>
    6b72:	4667      	mov	r7, ip
    6b74:	2002      	movs	r0, #2
    6b76:	4317      	orrs	r7, r2
    6b78:	d1d8      	bne.n	6b2c <__ledf2+0x64>
    6b7a:	e7c4      	b.n	6b06 <__ledf2+0x3e>
    6b7c:	42b1      	cmp	r1, r6
    6b7e:	dd04      	ble.n	6b8a <__ledf2+0xc2>
    6b80:	4648      	mov	r0, r9
    6b82:	2800      	cmp	r0, #0
    6b84:	d1d0      	bne.n	6b28 <__ledf2+0x60>
    6b86:	2001      	movs	r0, #1
    6b88:	e7d0      	b.n	6b2c <__ledf2+0x64>
    6b8a:	42b1      	cmp	r1, r6
    6b8c:	da04      	bge.n	6b98 <__ledf2+0xd0>
    6b8e:	464b      	mov	r3, r9
    6b90:	2b00      	cmp	r3, #0
    6b92:	d0c9      	beq.n	6b28 <__ledf2+0x60>
    6b94:	2001      	movs	r0, #1
    6b96:	e7c9      	b.n	6b2c <__ledf2+0x64>
    6b98:	9f00      	ldr	r7, [sp, #0]
    6b9a:	4567      	cmp	r7, ip
    6b9c:	d809      	bhi.n	6bb2 <__ledf2+0xea>
    6b9e:	d00d      	beq.n	6bbc <__ledf2+0xf4>
    6ba0:	9f00      	ldr	r7, [sp, #0]
    6ba2:	2000      	movs	r0, #0
    6ba4:	4567      	cmp	r7, ip
    6ba6:	d2c1      	bcs.n	6b2c <__ledf2+0x64>
    6ba8:	464f      	mov	r7, r9
    6baa:	2f00      	cmp	r7, #0
    6bac:	d0bc      	beq.n	6b28 <__ledf2+0x60>
    6bae:	2001      	movs	r0, #1
    6bb0:	e7bc      	b.n	6b2c <__ledf2+0x64>
    6bb2:	464b      	mov	r3, r9
    6bb4:	2b00      	cmp	r3, #0
    6bb6:	d1b7      	bne.n	6b28 <__ledf2+0x60>
    6bb8:	2001      	movs	r0, #1
    6bba:	e7b7      	b.n	6b2c <__ledf2+0x64>
    6bbc:	9801      	ldr	r0, [sp, #4]
    6bbe:	4550      	cmp	r0, sl
    6bc0:	d8f7      	bhi.n	6bb2 <__ledf2+0xea>
    6bc2:	9b01      	ldr	r3, [sp, #4]
    6bc4:	2000      	movs	r0, #0
    6bc6:	4553      	cmp	r3, sl
    6bc8:	d3ee      	bcc.n	6ba8 <__ledf2+0xe0>
    6bca:	e7af      	b.n	6b2c <__ledf2+0x64>
    6bcc:	000007ff 	.word	0x000007ff

00006bd0 <__aeabi_dmul>:
    6bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    6bd2:	4656      	mov	r6, sl
    6bd4:	4644      	mov	r4, r8
    6bd6:	465f      	mov	r7, fp
    6bd8:	464d      	mov	r5, r9
    6bda:	b4f0      	push	{r4, r5, r6, r7}
    6bdc:	1c1f      	adds	r7, r3, #0
    6bde:	030b      	lsls	r3, r1, #12
    6be0:	0b1b      	lsrs	r3, r3, #12
    6be2:	469a      	mov	sl, r3
    6be4:	004b      	lsls	r3, r1, #1
    6be6:	b087      	sub	sp, #28
    6be8:	1c04      	adds	r4, r0, #0
    6bea:	4680      	mov	r8, r0
    6bec:	0d5b      	lsrs	r3, r3, #21
    6bee:	0fc8      	lsrs	r0, r1, #31
    6bf0:	1c16      	adds	r6, r2, #0
    6bf2:	9302      	str	r3, [sp, #8]
    6bf4:	4681      	mov	r9, r0
    6bf6:	2b00      	cmp	r3, #0
    6bf8:	d068      	beq.n	6ccc <__aeabi_dmul+0xfc>
    6bfa:	4b69      	ldr	r3, [pc, #420]	; (6da0 <__aeabi_dmul+0x1d0>)
    6bfc:	9902      	ldr	r1, [sp, #8]
    6bfe:	4299      	cmp	r1, r3
    6c00:	d032      	beq.n	6c68 <__aeabi_dmul+0x98>
    6c02:	2280      	movs	r2, #128	; 0x80
    6c04:	4653      	mov	r3, sl
    6c06:	0352      	lsls	r2, r2, #13
    6c08:	431a      	orrs	r2, r3
    6c0a:	00d2      	lsls	r2, r2, #3
    6c0c:	0f63      	lsrs	r3, r4, #29
    6c0e:	431a      	orrs	r2, r3
    6c10:	4692      	mov	sl, r2
    6c12:	4a64      	ldr	r2, [pc, #400]	; (6da4 <__aeabi_dmul+0x1d4>)
    6c14:	00e0      	lsls	r0, r4, #3
    6c16:	1889      	adds	r1, r1, r2
    6c18:	4680      	mov	r8, r0
    6c1a:	9102      	str	r1, [sp, #8]
    6c1c:	2400      	movs	r4, #0
    6c1e:	2500      	movs	r5, #0
    6c20:	033b      	lsls	r3, r7, #12
    6c22:	0b1b      	lsrs	r3, r3, #12
    6c24:	469b      	mov	fp, r3
    6c26:	0078      	lsls	r0, r7, #1
    6c28:	0ffb      	lsrs	r3, r7, #31
    6c2a:	1c32      	adds	r2, r6, #0
    6c2c:	0d40      	lsrs	r0, r0, #21
    6c2e:	9303      	str	r3, [sp, #12]
    6c30:	d100      	bne.n	6c34 <__aeabi_dmul+0x64>
    6c32:	e075      	b.n	6d20 <__aeabi_dmul+0x150>
    6c34:	4b5a      	ldr	r3, [pc, #360]	; (6da0 <__aeabi_dmul+0x1d0>)
    6c36:	4298      	cmp	r0, r3
    6c38:	d069      	beq.n	6d0e <__aeabi_dmul+0x13e>
    6c3a:	2280      	movs	r2, #128	; 0x80
    6c3c:	4659      	mov	r1, fp
    6c3e:	0352      	lsls	r2, r2, #13
    6c40:	430a      	orrs	r2, r1
    6c42:	0f73      	lsrs	r3, r6, #29
    6c44:	00d2      	lsls	r2, r2, #3
    6c46:	431a      	orrs	r2, r3
    6c48:	4b56      	ldr	r3, [pc, #344]	; (6da4 <__aeabi_dmul+0x1d4>)
    6c4a:	4693      	mov	fp, r2
    6c4c:	18c0      	adds	r0, r0, r3
    6c4e:	00f2      	lsls	r2, r6, #3
    6c50:	2300      	movs	r3, #0
    6c52:	9903      	ldr	r1, [sp, #12]
    6c54:	464e      	mov	r6, r9
    6c56:	4071      	eors	r1, r6
    6c58:	431c      	orrs	r4, r3
    6c5a:	2c0f      	cmp	r4, #15
    6c5c:	d900      	bls.n	6c60 <__aeabi_dmul+0x90>
    6c5e:	e0ab      	b.n	6db8 <__aeabi_dmul+0x1e8>
    6c60:	4e51      	ldr	r6, [pc, #324]	; (6da8 <__aeabi_dmul+0x1d8>)
    6c62:	00a4      	lsls	r4, r4, #2
    6c64:	5934      	ldr	r4, [r6, r4]
    6c66:	46a7      	mov	pc, r4
    6c68:	4653      	mov	r3, sl
    6c6a:	431c      	orrs	r4, r3
    6c6c:	d000      	beq.n	6c70 <__aeabi_dmul+0xa0>
    6c6e:	e087      	b.n	6d80 <__aeabi_dmul+0x1b0>
    6c70:	2500      	movs	r5, #0
    6c72:	46aa      	mov	sl, r5
    6c74:	46a8      	mov	r8, r5
    6c76:	2408      	movs	r4, #8
    6c78:	2502      	movs	r5, #2
    6c7a:	e7d1      	b.n	6c20 <__aeabi_dmul+0x50>
    6c7c:	4649      	mov	r1, r9
    6c7e:	2d02      	cmp	r5, #2
    6c80:	d06c      	beq.n	6d5c <__aeabi_dmul+0x18c>
    6c82:	2d03      	cmp	r5, #3
    6c84:	d100      	bne.n	6c88 <__aeabi_dmul+0xb8>
    6c86:	e219      	b.n	70bc <__aeabi_dmul+0x4ec>
    6c88:	2d01      	cmp	r5, #1
    6c8a:	d000      	beq.n	6c8e <__aeabi_dmul+0xbe>
    6c8c:	e15a      	b.n	6f44 <__aeabi_dmul+0x374>
    6c8e:	400d      	ands	r5, r1
    6c90:	b2ed      	uxtb	r5, r5
    6c92:	2400      	movs	r4, #0
    6c94:	46a9      	mov	r9, r5
    6c96:	2300      	movs	r3, #0
    6c98:	46a0      	mov	r8, r4
    6c9a:	2000      	movs	r0, #0
    6c9c:	2100      	movs	r1, #0
    6c9e:	0325      	lsls	r5, r4, #12
    6ca0:	0d0a      	lsrs	r2, r1, #20
    6ca2:	051c      	lsls	r4, r3, #20
    6ca4:	0b2d      	lsrs	r5, r5, #12
    6ca6:	0512      	lsls	r2, r2, #20
    6ca8:	4b40      	ldr	r3, [pc, #256]	; (6dac <__aeabi_dmul+0x1dc>)
    6caa:	432a      	orrs	r2, r5
    6cac:	4013      	ands	r3, r2
    6cae:	4323      	orrs	r3, r4
    6cb0:	005b      	lsls	r3, r3, #1
    6cb2:	464c      	mov	r4, r9
    6cb4:	085b      	lsrs	r3, r3, #1
    6cb6:	07e2      	lsls	r2, r4, #31
    6cb8:	1c19      	adds	r1, r3, #0
    6cba:	4640      	mov	r0, r8
    6cbc:	4311      	orrs	r1, r2
    6cbe:	b007      	add	sp, #28
    6cc0:	bc3c      	pop	{r2, r3, r4, r5}
    6cc2:	4690      	mov	r8, r2
    6cc4:	4699      	mov	r9, r3
    6cc6:	46a2      	mov	sl, r4
    6cc8:	46ab      	mov	fp, r5
    6cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6ccc:	4653      	mov	r3, sl
    6cce:	4323      	orrs	r3, r4
    6cd0:	d050      	beq.n	6d74 <__aeabi_dmul+0x1a4>
    6cd2:	4653      	mov	r3, sl
    6cd4:	2b00      	cmp	r3, #0
    6cd6:	d100      	bne.n	6cda <__aeabi_dmul+0x10a>
    6cd8:	e186      	b.n	6fe8 <__aeabi_dmul+0x418>
    6cda:	4650      	mov	r0, sl
    6cdc:	f7fb fa1e 	bl	211c <__clzsi2>
    6ce0:	1e03      	subs	r3, r0, #0
    6ce2:	2b27      	cmp	r3, #39	; 0x27
    6ce4:	dd00      	ble.n	6ce8 <__aeabi_dmul+0x118>
    6ce6:	e178      	b.n	6fda <__aeabi_dmul+0x40a>
    6ce8:	2128      	movs	r1, #40	; 0x28
    6cea:	1a0d      	subs	r5, r1, r0
    6cec:	1c21      	adds	r1, r4, #0
    6cee:	3b08      	subs	r3, #8
    6cf0:	4652      	mov	r2, sl
    6cf2:	40e9      	lsrs	r1, r5
    6cf4:	409a      	lsls	r2, r3
    6cf6:	1c0d      	adds	r5, r1, #0
    6cf8:	4315      	orrs	r5, r2
    6cfa:	1c22      	adds	r2, r4, #0
    6cfc:	409a      	lsls	r2, r3
    6cfe:	46aa      	mov	sl, r5
    6d00:	4690      	mov	r8, r2
    6d02:	4b2b      	ldr	r3, [pc, #172]	; (6db0 <__aeabi_dmul+0x1e0>)
    6d04:	2400      	movs	r4, #0
    6d06:	1a1b      	subs	r3, r3, r0
    6d08:	9302      	str	r3, [sp, #8]
    6d0a:	2500      	movs	r5, #0
    6d0c:	e788      	b.n	6c20 <__aeabi_dmul+0x50>
    6d0e:	465b      	mov	r3, fp
    6d10:	431e      	orrs	r6, r3
    6d12:	2303      	movs	r3, #3
    6d14:	2e00      	cmp	r6, #0
    6d16:	d19c      	bne.n	6c52 <__aeabi_dmul+0x82>
    6d18:	46b3      	mov	fp, r6
    6d1a:	2200      	movs	r2, #0
    6d1c:	2302      	movs	r3, #2
    6d1e:	e798      	b.n	6c52 <__aeabi_dmul+0x82>
    6d20:	465b      	mov	r3, fp
    6d22:	4333      	orrs	r3, r6
    6d24:	d021      	beq.n	6d6a <__aeabi_dmul+0x19a>
    6d26:	4658      	mov	r0, fp
    6d28:	2800      	cmp	r0, #0
    6d2a:	d100      	bne.n	6d2e <__aeabi_dmul+0x15e>
    6d2c:	e150      	b.n	6fd0 <__aeabi_dmul+0x400>
    6d2e:	f7fb f9f5 	bl	211c <__clzsi2>
    6d32:	2827      	cmp	r0, #39	; 0x27
    6d34:	dd00      	ble.n	6d38 <__aeabi_dmul+0x168>
    6d36:	e144      	b.n	6fc2 <__aeabi_dmul+0x3f2>
    6d38:	2128      	movs	r1, #40	; 0x28
    6d3a:	1a0f      	subs	r7, r1, r0
    6d3c:	1c02      	adds	r2, r0, #0
    6d3e:	1c31      	adds	r1, r6, #0
    6d40:	3a08      	subs	r2, #8
    6d42:	465b      	mov	r3, fp
    6d44:	40f9      	lsrs	r1, r7
    6d46:	4093      	lsls	r3, r2
    6d48:	1c0f      	adds	r7, r1, #0
    6d4a:	431f      	orrs	r7, r3
    6d4c:	1c33      	adds	r3, r6, #0
    6d4e:	4093      	lsls	r3, r2
    6d50:	46bb      	mov	fp, r7
    6d52:	1c1a      	adds	r2, r3, #0
    6d54:	4b16      	ldr	r3, [pc, #88]	; (6db0 <__aeabi_dmul+0x1e0>)
    6d56:	1a18      	subs	r0, r3, r0
    6d58:	2300      	movs	r3, #0
    6d5a:	e77a      	b.n	6c52 <__aeabi_dmul+0x82>
    6d5c:	2301      	movs	r3, #1
    6d5e:	400b      	ands	r3, r1
    6d60:	2400      	movs	r4, #0
    6d62:	4699      	mov	r9, r3
    6d64:	46a0      	mov	r8, r4
    6d66:	4b0e      	ldr	r3, [pc, #56]	; (6da0 <__aeabi_dmul+0x1d0>)
    6d68:	e797      	b.n	6c9a <__aeabi_dmul+0xca>
    6d6a:	2700      	movs	r7, #0
    6d6c:	46bb      	mov	fp, r7
    6d6e:	2200      	movs	r2, #0
    6d70:	2301      	movs	r3, #1
    6d72:	e76e      	b.n	6c52 <__aeabi_dmul+0x82>
    6d74:	2100      	movs	r1, #0
    6d76:	2404      	movs	r4, #4
    6d78:	468a      	mov	sl, r1
    6d7a:	4688      	mov	r8, r1
    6d7c:	2501      	movs	r5, #1
    6d7e:	e74f      	b.n	6c20 <__aeabi_dmul+0x50>
    6d80:	240c      	movs	r4, #12
    6d82:	2503      	movs	r5, #3
    6d84:	e74c      	b.n	6c20 <__aeabi_dmul+0x50>
    6d86:	2301      	movs	r3, #1
    6d88:	425b      	negs	r3, r3
    6d8a:	2500      	movs	r5, #0
    6d8c:	4698      	mov	r8, r3
    6d8e:	46a9      	mov	r9, r5
    6d90:	4c08      	ldr	r4, [pc, #32]	; (6db4 <__aeabi_dmul+0x1e4>)
    6d92:	4b03      	ldr	r3, [pc, #12]	; (6da0 <__aeabi_dmul+0x1d0>)
    6d94:	e781      	b.n	6c9a <__aeabi_dmul+0xca>
    6d96:	46da      	mov	sl, fp
    6d98:	4690      	mov	r8, r2
    6d9a:	9903      	ldr	r1, [sp, #12]
    6d9c:	1c1d      	adds	r5, r3, #0
    6d9e:	e76e      	b.n	6c7e <__aeabi_dmul+0xae>
    6da0:	000007ff 	.word	0x000007ff
    6da4:	fffffc01 	.word	0xfffffc01
    6da8:	00007c70 	.word	0x00007c70
    6dac:	800fffff 	.word	0x800fffff
    6db0:	fffffc0d 	.word	0xfffffc0d
    6db4:	000fffff 	.word	0x000fffff
    6db8:	9f02      	ldr	r7, [sp, #8]
    6dba:	0c16      	lsrs	r6, r2, #16
    6dbc:	1838      	adds	r0, r7, r0
    6dbe:	9004      	str	r0, [sp, #16]
    6dc0:	4640      	mov	r0, r8
    6dc2:	0c07      	lsrs	r7, r0, #16
    6dc4:	0400      	lsls	r0, r0, #16
    6dc6:	0c00      	lsrs	r0, r0, #16
    6dc8:	0412      	lsls	r2, r2, #16
    6dca:	0c12      	lsrs	r2, r2, #16
    6dcc:	1c03      	adds	r3, r0, #0
    6dce:	4353      	muls	r3, r2
    6dd0:	1c04      	adds	r4, r0, #0
    6dd2:	1c3d      	adds	r5, r7, #0
    6dd4:	4374      	muls	r4, r6
    6dd6:	4355      	muls	r5, r2
    6dd8:	4698      	mov	r8, r3
    6dda:	1c3b      	adds	r3, r7, #0
    6ddc:	4373      	muls	r3, r6
    6dde:	1964      	adds	r4, r4, r5
    6de0:	46a4      	mov	ip, r4
    6de2:	4644      	mov	r4, r8
    6de4:	9302      	str	r3, [sp, #8]
    6de6:	0c23      	lsrs	r3, r4, #16
    6de8:	4463      	add	r3, ip
    6dea:	429d      	cmp	r5, r3
    6dec:	d904      	bls.n	6df8 <__aeabi_dmul+0x228>
    6dee:	9d02      	ldr	r5, [sp, #8]
    6df0:	2480      	movs	r4, #128	; 0x80
    6df2:	0264      	lsls	r4, r4, #9
    6df4:	192d      	adds	r5, r5, r4
    6df6:	9502      	str	r5, [sp, #8]
    6df8:	0c1d      	lsrs	r5, r3, #16
    6dfa:	9503      	str	r5, [sp, #12]
    6dfc:	4645      	mov	r5, r8
    6dfe:	042c      	lsls	r4, r5, #16
    6e00:	041b      	lsls	r3, r3, #16
    6e02:	0c24      	lsrs	r4, r4, #16
    6e04:	191c      	adds	r4, r3, r4
    6e06:	9405      	str	r4, [sp, #20]
    6e08:	465c      	mov	r4, fp
    6e0a:	0c23      	lsrs	r3, r4, #16
    6e0c:	1c05      	adds	r5, r0, #0
    6e0e:	4358      	muls	r0, r3
    6e10:	0424      	lsls	r4, r4, #16
    6e12:	0c24      	lsrs	r4, r4, #16
    6e14:	4684      	mov	ip, r0
    6e16:	1c38      	adds	r0, r7, #0
    6e18:	4360      	muls	r0, r4
    6e1a:	4365      	muls	r5, r4
    6e1c:	435f      	muls	r7, r3
    6e1e:	4681      	mov	r9, r0
    6e20:	44cc      	add	ip, r9
    6e22:	0c28      	lsrs	r0, r5, #16
    6e24:	4460      	add	r0, ip
    6e26:	46bb      	mov	fp, r7
    6e28:	4581      	cmp	r9, r0
    6e2a:	d902      	bls.n	6e32 <__aeabi_dmul+0x262>
    6e2c:	2780      	movs	r7, #128	; 0x80
    6e2e:	027f      	lsls	r7, r7, #9
    6e30:	44bb      	add	fp, r7
    6e32:	042d      	lsls	r5, r5, #16
    6e34:	0c07      	lsrs	r7, r0, #16
    6e36:	0c2d      	lsrs	r5, r5, #16
    6e38:	0400      	lsls	r0, r0, #16
    6e3a:	1940      	adds	r0, r0, r5
    6e3c:	4655      	mov	r5, sl
    6e3e:	46bc      	mov	ip, r7
    6e40:	042f      	lsls	r7, r5, #16
    6e42:	44e3      	add	fp, ip
    6e44:	4684      	mov	ip, r0
    6e46:	0c28      	lsrs	r0, r5, #16
    6e48:	0c3d      	lsrs	r5, r7, #16
    6e4a:	1c2f      	adds	r7, r5, #0
    6e4c:	4357      	muls	r7, r2
    6e4e:	46b8      	mov	r8, r7
    6e50:	1c2f      	adds	r7, r5, #0
    6e52:	4377      	muls	r7, r6
    6e54:	4342      	muls	r2, r0
    6e56:	46b9      	mov	r9, r7
    6e58:	4647      	mov	r7, r8
    6e5a:	0c3f      	lsrs	r7, r7, #16
    6e5c:	4491      	add	r9, r2
    6e5e:	46ba      	mov	sl, r7
    6e60:	44d1      	add	r9, sl
    6e62:	4346      	muls	r6, r0
    6e64:	454a      	cmp	r2, r9
    6e66:	d902      	bls.n	6e6e <__aeabi_dmul+0x29e>
    6e68:	2280      	movs	r2, #128	; 0x80
    6e6a:	0252      	lsls	r2, r2, #9
    6e6c:	18b6      	adds	r6, r6, r2
    6e6e:	464f      	mov	r7, r9
    6e70:	0c3a      	lsrs	r2, r7, #16
    6e72:	18b6      	adds	r6, r6, r2
    6e74:	043a      	lsls	r2, r7, #16
    6e76:	4647      	mov	r7, r8
    6e78:	043f      	lsls	r7, r7, #16
    6e7a:	0c3f      	lsrs	r7, r7, #16
    6e7c:	46b8      	mov	r8, r7
    6e7e:	1c2f      	adds	r7, r5, #0
    6e80:	4367      	muls	r7, r4
    6e82:	435d      	muls	r5, r3
    6e84:	4344      	muls	r4, r0
    6e86:	4358      	muls	r0, r3
    6e88:	1965      	adds	r5, r4, r5
    6e8a:	9001      	str	r0, [sp, #4]
    6e8c:	0c38      	lsrs	r0, r7, #16
    6e8e:	182d      	adds	r5, r5, r0
    6e90:	4442      	add	r2, r8
    6e92:	46b8      	mov	r8, r7
    6e94:	42ac      	cmp	r4, r5
    6e96:	d904      	bls.n	6ea2 <__aeabi_dmul+0x2d2>
    6e98:	9801      	ldr	r0, [sp, #4]
    6e9a:	2380      	movs	r3, #128	; 0x80
    6e9c:	025b      	lsls	r3, r3, #9
    6e9e:	18c0      	adds	r0, r0, r3
    6ea0:	9001      	str	r0, [sp, #4]
    6ea2:	9c03      	ldr	r4, [sp, #12]
    6ea4:	9f02      	ldr	r7, [sp, #8]
    6ea6:	1c20      	adds	r0, r4, #0
    6ea8:	4460      	add	r0, ip
    6eaa:	19c0      	adds	r0, r0, r7
    6eac:	4560      	cmp	r0, ip
    6eae:	41a4      	sbcs	r4, r4
    6eb0:	4647      	mov	r7, r8
    6eb2:	4264      	negs	r4, r4
    6eb4:	46a4      	mov	ip, r4
    6eb6:	042b      	lsls	r3, r5, #16
    6eb8:	043c      	lsls	r4, r7, #16
    6eba:	4699      	mov	r9, r3
    6ebc:	0c24      	lsrs	r4, r4, #16
    6ebe:	444c      	add	r4, r9
    6ec0:	46a0      	mov	r8, r4
    6ec2:	44d8      	add	r8, fp
    6ec4:	1880      	adds	r0, r0, r2
    6ec6:	46c2      	mov	sl, r8
    6ec8:	44e2      	add	sl, ip
    6eca:	4290      	cmp	r0, r2
    6ecc:	4192      	sbcs	r2, r2
    6ece:	4657      	mov	r7, sl
    6ed0:	4252      	negs	r2, r2
    6ed2:	4691      	mov	r9, r2
    6ed4:	19f2      	adds	r2, r6, r7
    6ed6:	45e2      	cmp	sl, ip
    6ed8:	41bf      	sbcs	r7, r7
    6eda:	427f      	negs	r7, r7
    6edc:	464b      	mov	r3, r9
    6ede:	46bc      	mov	ip, r7
    6ee0:	45d8      	cmp	r8, fp
    6ee2:	41bf      	sbcs	r7, r7
    6ee4:	18d4      	adds	r4, r2, r3
    6ee6:	427f      	negs	r7, r7
    6ee8:	4663      	mov	r3, ip
    6eea:	431f      	orrs	r7, r3
    6eec:	0c2d      	lsrs	r5, r5, #16
    6eee:	197f      	adds	r7, r7, r5
    6ef0:	42b2      	cmp	r2, r6
    6ef2:	4192      	sbcs	r2, r2
    6ef4:	454c      	cmp	r4, r9
    6ef6:	41ad      	sbcs	r5, r5
    6ef8:	4252      	negs	r2, r2
    6efa:	426d      	negs	r5, r5
    6efc:	4315      	orrs	r5, r2
    6efe:	9e01      	ldr	r6, [sp, #4]
    6f00:	197d      	adds	r5, r7, r5
    6f02:	19ab      	adds	r3, r5, r6
    6f04:	0de2      	lsrs	r2, r4, #23
    6f06:	025b      	lsls	r3, r3, #9
    6f08:	9f05      	ldr	r7, [sp, #20]
    6f0a:	4313      	orrs	r3, r2
    6f0c:	0242      	lsls	r2, r0, #9
    6f0e:	433a      	orrs	r2, r7
    6f10:	469a      	mov	sl, r3
    6f12:	1e53      	subs	r3, r2, #1
    6f14:	419a      	sbcs	r2, r3
    6f16:	0dc3      	lsrs	r3, r0, #23
    6f18:	1c10      	adds	r0, r2, #0
    6f1a:	4318      	orrs	r0, r3
    6f1c:	0264      	lsls	r4, r4, #9
    6f1e:	4320      	orrs	r0, r4
    6f20:	4680      	mov	r8, r0
    6f22:	4650      	mov	r0, sl
    6f24:	01c0      	lsls	r0, r0, #7
    6f26:	d50d      	bpl.n	6f44 <__aeabi_dmul+0x374>
    6f28:	4645      	mov	r5, r8
    6f2a:	2201      	movs	r2, #1
    6f2c:	4656      	mov	r6, sl
    6f2e:	9c04      	ldr	r4, [sp, #16]
    6f30:	086b      	lsrs	r3, r5, #1
    6f32:	402a      	ands	r2, r5
    6f34:	431a      	orrs	r2, r3
    6f36:	07f3      	lsls	r3, r6, #31
    6f38:	3401      	adds	r4, #1
    6f3a:	431a      	orrs	r2, r3
    6f3c:	0876      	lsrs	r6, r6, #1
    6f3e:	9404      	str	r4, [sp, #16]
    6f40:	4690      	mov	r8, r2
    6f42:	46b2      	mov	sl, r6
    6f44:	9e04      	ldr	r6, [sp, #16]
    6f46:	4f63      	ldr	r7, [pc, #396]	; (70d4 <__aeabi_dmul+0x504>)
    6f48:	19f3      	adds	r3, r6, r7
    6f4a:	2b00      	cmp	r3, #0
    6f4c:	dd61      	ble.n	7012 <__aeabi_dmul+0x442>
    6f4e:	4640      	mov	r0, r8
    6f50:	0740      	lsls	r0, r0, #29
    6f52:	d00b      	beq.n	6f6c <__aeabi_dmul+0x39c>
    6f54:	220f      	movs	r2, #15
    6f56:	4644      	mov	r4, r8
    6f58:	4022      	ands	r2, r4
    6f5a:	2a04      	cmp	r2, #4
    6f5c:	d006      	beq.n	6f6c <__aeabi_dmul+0x39c>
    6f5e:	4642      	mov	r2, r8
    6f60:	3204      	adds	r2, #4
    6f62:	4542      	cmp	r2, r8
    6f64:	4180      	sbcs	r0, r0
    6f66:	4240      	negs	r0, r0
    6f68:	4482      	add	sl, r0
    6f6a:	4690      	mov	r8, r2
    6f6c:	4655      	mov	r5, sl
    6f6e:	01ed      	lsls	r5, r5, #7
    6f70:	d507      	bpl.n	6f82 <__aeabi_dmul+0x3b2>
    6f72:	4b59      	ldr	r3, [pc, #356]	; (70d8 <__aeabi_dmul+0x508>)
    6f74:	4656      	mov	r6, sl
    6f76:	9f04      	ldr	r7, [sp, #16]
    6f78:	2080      	movs	r0, #128	; 0x80
    6f7a:	401e      	ands	r6, r3
    6f7c:	00c0      	lsls	r0, r0, #3
    6f7e:	46b2      	mov	sl, r6
    6f80:	183b      	adds	r3, r7, r0
    6f82:	4a56      	ldr	r2, [pc, #344]	; (70dc <__aeabi_dmul+0x50c>)
    6f84:	4293      	cmp	r3, r2
    6f86:	dd00      	ble.n	6f8a <__aeabi_dmul+0x3ba>
    6f88:	e6e8      	b.n	6d5c <__aeabi_dmul+0x18c>
    6f8a:	4644      	mov	r4, r8
    6f8c:	4655      	mov	r5, sl
    6f8e:	08e2      	lsrs	r2, r4, #3
    6f90:	0768      	lsls	r0, r5, #29
    6f92:	4310      	orrs	r0, r2
    6f94:	2201      	movs	r2, #1
    6f96:	026c      	lsls	r4, r5, #9
    6f98:	055b      	lsls	r3, r3, #21
    6f9a:	400a      	ands	r2, r1
    6f9c:	4680      	mov	r8, r0
    6f9e:	0b24      	lsrs	r4, r4, #12
    6fa0:	0d5b      	lsrs	r3, r3, #21
    6fa2:	4691      	mov	r9, r2
    6fa4:	e679      	b.n	6c9a <__aeabi_dmul+0xca>
    6fa6:	46da      	mov	sl, fp
    6fa8:	4690      	mov	r8, r2
    6faa:	1c1d      	adds	r5, r3, #0
    6fac:	e667      	b.n	6c7e <__aeabi_dmul+0xae>
    6fae:	2480      	movs	r4, #128	; 0x80
    6fb0:	0324      	lsls	r4, r4, #12
    6fb2:	4657      	mov	r7, sl
    6fb4:	4227      	tst	r7, r4
    6fb6:	d11c      	bne.n	6ff2 <__aeabi_dmul+0x422>
    6fb8:	433c      	orrs	r4, r7
    6fba:	0324      	lsls	r4, r4, #12
    6fbc:	0b24      	lsrs	r4, r4, #12
    6fbe:	4b48      	ldr	r3, [pc, #288]	; (70e0 <__aeabi_dmul+0x510>)
    6fc0:	e66b      	b.n	6c9a <__aeabi_dmul+0xca>
    6fc2:	1c03      	adds	r3, r0, #0
    6fc4:	3b28      	subs	r3, #40	; 0x28
    6fc6:	1c31      	adds	r1, r6, #0
    6fc8:	4099      	lsls	r1, r3
    6fca:	468b      	mov	fp, r1
    6fcc:	2200      	movs	r2, #0
    6fce:	e6c1      	b.n	6d54 <__aeabi_dmul+0x184>
    6fd0:	1c30      	adds	r0, r6, #0
    6fd2:	f7fb f8a3 	bl	211c <__clzsi2>
    6fd6:	3020      	adds	r0, #32
    6fd8:	e6ab      	b.n	6d32 <__aeabi_dmul+0x162>
    6fda:	3b28      	subs	r3, #40	; 0x28
    6fdc:	1c21      	adds	r1, r4, #0
    6fde:	4099      	lsls	r1, r3
    6fe0:	2200      	movs	r2, #0
    6fe2:	468a      	mov	sl, r1
    6fe4:	4690      	mov	r8, r2
    6fe6:	e68c      	b.n	6d02 <__aeabi_dmul+0x132>
    6fe8:	1c20      	adds	r0, r4, #0
    6fea:	f7fb f897 	bl	211c <__clzsi2>
    6fee:	3020      	adds	r0, #32
    6ff0:	e676      	b.n	6ce0 <__aeabi_dmul+0x110>
    6ff2:	4658      	mov	r0, fp
    6ff4:	4220      	tst	r0, r4
    6ff6:	d107      	bne.n	7008 <__aeabi_dmul+0x438>
    6ff8:	4304      	orrs	r4, r0
    6ffa:	9903      	ldr	r1, [sp, #12]
    6ffc:	0324      	lsls	r4, r4, #12
    6ffe:	0b24      	lsrs	r4, r4, #12
    7000:	4689      	mov	r9, r1
    7002:	4690      	mov	r8, r2
    7004:	4b36      	ldr	r3, [pc, #216]	; (70e0 <__aeabi_dmul+0x510>)
    7006:	e648      	b.n	6c9a <__aeabi_dmul+0xca>
    7008:	433c      	orrs	r4, r7
    700a:	0324      	lsls	r4, r4, #12
    700c:	0b24      	lsrs	r4, r4, #12
    700e:	4b34      	ldr	r3, [pc, #208]	; (70e0 <__aeabi_dmul+0x510>)
    7010:	e643      	b.n	6c9a <__aeabi_dmul+0xca>
    7012:	4b34      	ldr	r3, [pc, #208]	; (70e4 <__aeabi_dmul+0x514>)
    7014:	9e04      	ldr	r6, [sp, #16]
    7016:	1b9b      	subs	r3, r3, r6
    7018:	2b38      	cmp	r3, #56	; 0x38
    701a:	dd06      	ble.n	702a <__aeabi_dmul+0x45a>
    701c:	2301      	movs	r3, #1
    701e:	400b      	ands	r3, r1
    7020:	2400      	movs	r4, #0
    7022:	4699      	mov	r9, r3
    7024:	46a0      	mov	r8, r4
    7026:	2300      	movs	r3, #0
    7028:	e637      	b.n	6c9a <__aeabi_dmul+0xca>
    702a:	2b1f      	cmp	r3, #31
    702c:	dc25      	bgt.n	707a <__aeabi_dmul+0x4aa>
    702e:	9c04      	ldr	r4, [sp, #16]
    7030:	4d2d      	ldr	r5, [pc, #180]	; (70e8 <__aeabi_dmul+0x518>)
    7032:	4646      	mov	r6, r8
    7034:	1960      	adds	r0, r4, r5
    7036:	4652      	mov	r2, sl
    7038:	4644      	mov	r4, r8
    703a:	4086      	lsls	r6, r0
    703c:	40dc      	lsrs	r4, r3
    703e:	4082      	lsls	r2, r0
    7040:	4657      	mov	r7, sl
    7042:	1c30      	adds	r0, r6, #0
    7044:	4322      	orrs	r2, r4
    7046:	40df      	lsrs	r7, r3
    7048:	1e44      	subs	r4, r0, #1
    704a:	41a0      	sbcs	r0, r4
    704c:	4302      	orrs	r2, r0
    704e:	1c3b      	adds	r3, r7, #0
    7050:	0754      	lsls	r4, r2, #29
    7052:	d009      	beq.n	7068 <__aeabi_dmul+0x498>
    7054:	200f      	movs	r0, #15
    7056:	4010      	ands	r0, r2
    7058:	2804      	cmp	r0, #4
    705a:	d005      	beq.n	7068 <__aeabi_dmul+0x498>
    705c:	1d10      	adds	r0, r2, #4
    705e:	4290      	cmp	r0, r2
    7060:	4192      	sbcs	r2, r2
    7062:	4252      	negs	r2, r2
    7064:	189b      	adds	r3, r3, r2
    7066:	1c02      	adds	r2, r0, #0
    7068:	021d      	lsls	r5, r3, #8
    706a:	d51a      	bpl.n	70a2 <__aeabi_dmul+0x4d2>
    706c:	2301      	movs	r3, #1
    706e:	400b      	ands	r3, r1
    7070:	2400      	movs	r4, #0
    7072:	4699      	mov	r9, r3
    7074:	46a0      	mov	r8, r4
    7076:	2301      	movs	r3, #1
    7078:	e60f      	b.n	6c9a <__aeabi_dmul+0xca>
    707a:	481c      	ldr	r0, [pc, #112]	; (70ec <__aeabi_dmul+0x51c>)
    707c:	9c04      	ldr	r4, [sp, #16]
    707e:	4655      	mov	r5, sl
    7080:	1b00      	subs	r0, r0, r4
    7082:	40c5      	lsrs	r5, r0
    7084:	1c28      	adds	r0, r5, #0
    7086:	2b20      	cmp	r3, #32
    7088:	d016      	beq.n	70b8 <__aeabi_dmul+0x4e8>
    708a:	4e19      	ldr	r6, [pc, #100]	; (70f0 <__aeabi_dmul+0x520>)
    708c:	4657      	mov	r7, sl
    708e:	19a2      	adds	r2, r4, r6
    7090:	4097      	lsls	r7, r2
    7092:	1c3a      	adds	r2, r7, #0
    7094:	4643      	mov	r3, r8
    7096:	431a      	orrs	r2, r3
    7098:	1e53      	subs	r3, r2, #1
    709a:	419a      	sbcs	r2, r3
    709c:	4302      	orrs	r2, r0
    709e:	2300      	movs	r3, #0
    70a0:	e7d6      	b.n	7050 <__aeabi_dmul+0x480>
    70a2:	0758      	lsls	r0, r3, #29
    70a4:	025b      	lsls	r3, r3, #9
    70a6:	08d2      	lsrs	r2, r2, #3
    70a8:	0b1c      	lsrs	r4, r3, #12
    70aa:	2301      	movs	r3, #1
    70ac:	400b      	ands	r3, r1
    70ae:	4310      	orrs	r0, r2
    70b0:	4699      	mov	r9, r3
    70b2:	4680      	mov	r8, r0
    70b4:	2300      	movs	r3, #0
    70b6:	e5f0      	b.n	6c9a <__aeabi_dmul+0xca>
    70b8:	2200      	movs	r2, #0
    70ba:	e7eb      	b.n	7094 <__aeabi_dmul+0x4c4>
    70bc:	2480      	movs	r4, #128	; 0x80
    70be:	0324      	lsls	r4, r4, #12
    70c0:	4650      	mov	r0, sl
    70c2:	2301      	movs	r3, #1
    70c4:	4304      	orrs	r4, r0
    70c6:	4019      	ands	r1, r3
    70c8:	0324      	lsls	r4, r4, #12
    70ca:	0b24      	lsrs	r4, r4, #12
    70cc:	4689      	mov	r9, r1
    70ce:	4b04      	ldr	r3, [pc, #16]	; (70e0 <__aeabi_dmul+0x510>)
    70d0:	e5e3      	b.n	6c9a <__aeabi_dmul+0xca>
    70d2:	46c0      	nop			; (mov r8, r8)
    70d4:	000003ff 	.word	0x000003ff
    70d8:	feffffff 	.word	0xfeffffff
    70dc:	000007fe 	.word	0x000007fe
    70e0:	000007ff 	.word	0x000007ff
    70e4:	fffffc02 	.word	0xfffffc02
    70e8:	0000041e 	.word	0x0000041e
    70ec:	fffffbe2 	.word	0xfffffbe2
    70f0:	0000043e 	.word	0x0000043e

000070f4 <__aeabi_dsub>:
    70f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    70f6:	465f      	mov	r7, fp
    70f8:	4656      	mov	r6, sl
    70fa:	4644      	mov	r4, r8
    70fc:	464d      	mov	r5, r9
    70fe:	b4f0      	push	{r4, r5, r6, r7}
    7100:	030c      	lsls	r4, r1, #12
    7102:	004d      	lsls	r5, r1, #1
    7104:	0fcf      	lsrs	r7, r1, #31
    7106:	0a61      	lsrs	r1, r4, #9
    7108:	0f44      	lsrs	r4, r0, #29
    710a:	4321      	orrs	r1, r4
    710c:	00c4      	lsls	r4, r0, #3
    710e:	0318      	lsls	r0, r3, #12
    7110:	0fde      	lsrs	r6, r3, #31
    7112:	4680      	mov	r8, r0
    7114:	46b4      	mov	ip, r6
    7116:	4646      	mov	r6, r8
    7118:	0058      	lsls	r0, r3, #1
    711a:	0a76      	lsrs	r6, r6, #9
    711c:	0f53      	lsrs	r3, r2, #29
    711e:	4333      	orrs	r3, r6
    7120:	00d6      	lsls	r6, r2, #3
    7122:	4ad1      	ldr	r2, [pc, #836]	; (7468 <__aeabi_dsub+0x374>)
    7124:	0d6d      	lsrs	r5, r5, #21
    7126:	46ba      	mov	sl, r7
    7128:	0d40      	lsrs	r0, r0, #21
    712a:	46b3      	mov	fp, r6
    712c:	4290      	cmp	r0, r2
    712e:	d100      	bne.n	7132 <__aeabi_dsub+0x3e>
    7130:	e0f5      	b.n	731e <__aeabi_dsub+0x22a>
    7132:	4662      	mov	r2, ip
    7134:	2601      	movs	r6, #1
    7136:	4072      	eors	r2, r6
    7138:	4694      	mov	ip, r2
    713a:	4567      	cmp	r7, ip
    713c:	d100      	bne.n	7140 <__aeabi_dsub+0x4c>
    713e:	e0ab      	b.n	7298 <__aeabi_dsub+0x1a4>
    7140:	1a2f      	subs	r7, r5, r0
    7142:	2f00      	cmp	r7, #0
    7144:	dc00      	bgt.n	7148 <__aeabi_dsub+0x54>
    7146:	e111      	b.n	736c <__aeabi_dsub+0x278>
    7148:	2800      	cmp	r0, #0
    714a:	d13e      	bne.n	71ca <__aeabi_dsub+0xd6>
    714c:	4658      	mov	r0, fp
    714e:	4318      	orrs	r0, r3
    7150:	d000      	beq.n	7154 <__aeabi_dsub+0x60>
    7152:	e0f1      	b.n	7338 <__aeabi_dsub+0x244>
    7154:	0760      	lsls	r0, r4, #29
    7156:	d100      	bne.n	715a <__aeabi_dsub+0x66>
    7158:	e097      	b.n	728a <__aeabi_dsub+0x196>
    715a:	230f      	movs	r3, #15
    715c:	4023      	ands	r3, r4
    715e:	2b04      	cmp	r3, #4
    7160:	d100      	bne.n	7164 <__aeabi_dsub+0x70>
    7162:	e122      	b.n	73aa <__aeabi_dsub+0x2b6>
    7164:	1d22      	adds	r2, r4, #4
    7166:	42a2      	cmp	r2, r4
    7168:	41a4      	sbcs	r4, r4
    716a:	4264      	negs	r4, r4
    716c:	2380      	movs	r3, #128	; 0x80
    716e:	1909      	adds	r1, r1, r4
    7170:	041b      	lsls	r3, r3, #16
    7172:	2701      	movs	r7, #1
    7174:	4650      	mov	r0, sl
    7176:	400b      	ands	r3, r1
    7178:	4007      	ands	r7, r0
    717a:	1c14      	adds	r4, r2, #0
    717c:	2b00      	cmp	r3, #0
    717e:	d100      	bne.n	7182 <__aeabi_dsub+0x8e>
    7180:	e079      	b.n	7276 <__aeabi_dsub+0x182>
    7182:	4bb9      	ldr	r3, [pc, #740]	; (7468 <__aeabi_dsub+0x374>)
    7184:	3501      	adds	r5, #1
    7186:	429d      	cmp	r5, r3
    7188:	d100      	bne.n	718c <__aeabi_dsub+0x98>
    718a:	e10b      	b.n	73a4 <__aeabi_dsub+0x2b0>
    718c:	4bb7      	ldr	r3, [pc, #732]	; (746c <__aeabi_dsub+0x378>)
    718e:	08e4      	lsrs	r4, r4, #3
    7190:	4019      	ands	r1, r3
    7192:	0748      	lsls	r0, r1, #29
    7194:	0249      	lsls	r1, r1, #9
    7196:	4304      	orrs	r4, r0
    7198:	0b0b      	lsrs	r3, r1, #12
    719a:	2000      	movs	r0, #0
    719c:	2100      	movs	r1, #0
    719e:	031b      	lsls	r3, r3, #12
    71a0:	0b1a      	lsrs	r2, r3, #12
    71a2:	0d0b      	lsrs	r3, r1, #20
    71a4:	056d      	lsls	r5, r5, #21
    71a6:	051b      	lsls	r3, r3, #20
    71a8:	4313      	orrs	r3, r2
    71aa:	086a      	lsrs	r2, r5, #1
    71ac:	4db0      	ldr	r5, [pc, #704]	; (7470 <__aeabi_dsub+0x37c>)
    71ae:	07ff      	lsls	r7, r7, #31
    71b0:	401d      	ands	r5, r3
    71b2:	4315      	orrs	r5, r2
    71b4:	006d      	lsls	r5, r5, #1
    71b6:	086d      	lsrs	r5, r5, #1
    71b8:	1c29      	adds	r1, r5, #0
    71ba:	4339      	orrs	r1, r7
    71bc:	1c20      	adds	r0, r4, #0
    71be:	bc3c      	pop	{r2, r3, r4, r5}
    71c0:	4690      	mov	r8, r2
    71c2:	4699      	mov	r9, r3
    71c4:	46a2      	mov	sl, r4
    71c6:	46ab      	mov	fp, r5
    71c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    71ca:	48a7      	ldr	r0, [pc, #668]	; (7468 <__aeabi_dsub+0x374>)
    71cc:	4285      	cmp	r5, r0
    71ce:	d0c1      	beq.n	7154 <__aeabi_dsub+0x60>
    71d0:	2080      	movs	r0, #128	; 0x80
    71d2:	0400      	lsls	r0, r0, #16
    71d4:	4303      	orrs	r3, r0
    71d6:	2f38      	cmp	r7, #56	; 0x38
    71d8:	dd00      	ble.n	71dc <__aeabi_dsub+0xe8>
    71da:	e0fd      	b.n	73d8 <__aeabi_dsub+0x2e4>
    71dc:	2f1f      	cmp	r7, #31
    71de:	dd00      	ble.n	71e2 <__aeabi_dsub+0xee>
    71e0:	e131      	b.n	7446 <__aeabi_dsub+0x352>
    71e2:	2020      	movs	r0, #32
    71e4:	1bc0      	subs	r0, r0, r7
    71e6:	1c1a      	adds	r2, r3, #0
    71e8:	465e      	mov	r6, fp
    71ea:	4082      	lsls	r2, r0
    71ec:	40fe      	lsrs	r6, r7
    71ee:	4332      	orrs	r2, r6
    71f0:	4694      	mov	ip, r2
    71f2:	465a      	mov	r2, fp
    71f4:	4082      	lsls	r2, r0
    71f6:	1c10      	adds	r0, r2, #0
    71f8:	1e42      	subs	r2, r0, #1
    71fa:	4190      	sbcs	r0, r2
    71fc:	40fb      	lsrs	r3, r7
    71fe:	4662      	mov	r2, ip
    7200:	4302      	orrs	r2, r0
    7202:	1c1f      	adds	r7, r3, #0
    7204:	1aa2      	subs	r2, r4, r2
    7206:	4294      	cmp	r4, r2
    7208:	41a4      	sbcs	r4, r4
    720a:	4264      	negs	r4, r4
    720c:	1bc9      	subs	r1, r1, r7
    720e:	1b09      	subs	r1, r1, r4
    7210:	1c14      	adds	r4, r2, #0
    7212:	020a      	lsls	r2, r1, #8
    7214:	d59e      	bpl.n	7154 <__aeabi_dsub+0x60>
    7216:	0249      	lsls	r1, r1, #9
    7218:	0a4f      	lsrs	r7, r1, #9
    721a:	2f00      	cmp	r7, #0
    721c:	d100      	bne.n	7220 <__aeabi_dsub+0x12c>
    721e:	e0d6      	b.n	73ce <__aeabi_dsub+0x2da>
    7220:	1c38      	adds	r0, r7, #0
    7222:	f7fa ff7b 	bl	211c <__clzsi2>
    7226:	1c02      	adds	r2, r0, #0
    7228:	3a08      	subs	r2, #8
    722a:	2a1f      	cmp	r2, #31
    722c:	dd00      	ble.n	7230 <__aeabi_dsub+0x13c>
    722e:	e0c3      	b.n	73b8 <__aeabi_dsub+0x2c4>
    7230:	2128      	movs	r1, #40	; 0x28
    7232:	1c23      	adds	r3, r4, #0
    7234:	1a09      	subs	r1, r1, r0
    7236:	4097      	lsls	r7, r2
    7238:	40cb      	lsrs	r3, r1
    723a:	431f      	orrs	r7, r3
    723c:	4094      	lsls	r4, r2
    723e:	4295      	cmp	r5, r2
    7240:	dd00      	ble.n	7244 <__aeabi_dsub+0x150>
    7242:	e0c0      	b.n	73c6 <__aeabi_dsub+0x2d2>
    7244:	1b55      	subs	r5, r2, r5
    7246:	1c69      	adds	r1, r5, #1
    7248:	291f      	cmp	r1, #31
    724a:	dd00      	ble.n	724e <__aeabi_dsub+0x15a>
    724c:	e0ea      	b.n	7424 <__aeabi_dsub+0x330>
    724e:	221f      	movs	r2, #31
    7250:	1b55      	subs	r5, r2, r5
    7252:	1c3b      	adds	r3, r7, #0
    7254:	1c22      	adds	r2, r4, #0
    7256:	40ab      	lsls	r3, r5
    7258:	40ca      	lsrs	r2, r1
    725a:	40ac      	lsls	r4, r5
    725c:	1e65      	subs	r5, r4, #1
    725e:	41ac      	sbcs	r4, r5
    7260:	4313      	orrs	r3, r2
    7262:	40cf      	lsrs	r7, r1
    7264:	431c      	orrs	r4, r3
    7266:	1c39      	adds	r1, r7, #0
    7268:	2500      	movs	r5, #0
    726a:	e773      	b.n	7154 <__aeabi_dsub+0x60>
    726c:	2408      	movs	r4, #8
    726e:	4981      	ldr	r1, [pc, #516]	; (7474 <__aeabi_dsub+0x380>)
    7270:	4d7d      	ldr	r5, [pc, #500]	; (7468 <__aeabi_dsub+0x374>)
    7272:	2700      	movs	r7, #0
    7274:	4264      	negs	r4, r4
    7276:	4b7c      	ldr	r3, [pc, #496]	; (7468 <__aeabi_dsub+0x374>)
    7278:	0748      	lsls	r0, r1, #29
    727a:	08e4      	lsrs	r4, r4, #3
    727c:	4304      	orrs	r4, r0
    727e:	08c9      	lsrs	r1, r1, #3
    7280:	429d      	cmp	r5, r3
    7282:	d050      	beq.n	7326 <__aeabi_dsub+0x232>
    7284:	0309      	lsls	r1, r1, #12
    7286:	0b0b      	lsrs	r3, r1, #12
    7288:	e787      	b.n	719a <__aeabi_dsub+0xa6>
    728a:	2380      	movs	r3, #128	; 0x80
    728c:	041b      	lsls	r3, r3, #16
    728e:	2701      	movs	r7, #1
    7290:	4652      	mov	r2, sl
    7292:	400b      	ands	r3, r1
    7294:	4017      	ands	r7, r2
    7296:	e771      	b.n	717c <__aeabi_dsub+0x88>
    7298:	1a2a      	subs	r2, r5, r0
    729a:	4694      	mov	ip, r2
    729c:	2a00      	cmp	r2, #0
    729e:	dc00      	bgt.n	72a2 <__aeabi_dsub+0x1ae>
    72a0:	e0a1      	b.n	73e6 <__aeabi_dsub+0x2f2>
    72a2:	2800      	cmp	r0, #0
    72a4:	d054      	beq.n	7350 <__aeabi_dsub+0x25c>
    72a6:	4870      	ldr	r0, [pc, #448]	; (7468 <__aeabi_dsub+0x374>)
    72a8:	4285      	cmp	r5, r0
    72aa:	d100      	bne.n	72ae <__aeabi_dsub+0x1ba>
    72ac:	e752      	b.n	7154 <__aeabi_dsub+0x60>
    72ae:	2080      	movs	r0, #128	; 0x80
    72b0:	0400      	lsls	r0, r0, #16
    72b2:	4303      	orrs	r3, r0
    72b4:	4660      	mov	r0, ip
    72b6:	2838      	cmp	r0, #56	; 0x38
    72b8:	dd00      	ble.n	72bc <__aeabi_dsub+0x1c8>
    72ba:	e110      	b.n	74de <__aeabi_dsub+0x3ea>
    72bc:	281f      	cmp	r0, #31
    72be:	dd00      	ble.n	72c2 <__aeabi_dsub+0x1ce>
    72c0:	e159      	b.n	7576 <__aeabi_dsub+0x482>
    72c2:	4662      	mov	r2, ip
    72c4:	2020      	movs	r0, #32
    72c6:	1a80      	subs	r0, r0, r2
    72c8:	1c1e      	adds	r6, r3, #0
    72ca:	4086      	lsls	r6, r0
    72cc:	46b1      	mov	r9, r6
    72ce:	465e      	mov	r6, fp
    72d0:	40d6      	lsrs	r6, r2
    72d2:	464a      	mov	r2, r9
    72d4:	4332      	orrs	r2, r6
    72d6:	465e      	mov	r6, fp
    72d8:	4086      	lsls	r6, r0
    72da:	4690      	mov	r8, r2
    72dc:	1c30      	adds	r0, r6, #0
    72de:	1e42      	subs	r2, r0, #1
    72e0:	4190      	sbcs	r0, r2
    72e2:	4642      	mov	r2, r8
    72e4:	4302      	orrs	r2, r0
    72e6:	4660      	mov	r0, ip
    72e8:	40c3      	lsrs	r3, r0
    72ea:	1912      	adds	r2, r2, r4
    72ec:	42a2      	cmp	r2, r4
    72ee:	41a4      	sbcs	r4, r4
    72f0:	4264      	negs	r4, r4
    72f2:	1859      	adds	r1, r3, r1
    72f4:	1909      	adds	r1, r1, r4
    72f6:	1c14      	adds	r4, r2, #0
    72f8:	0208      	lsls	r0, r1, #8
    72fa:	d400      	bmi.n	72fe <__aeabi_dsub+0x20a>
    72fc:	e72a      	b.n	7154 <__aeabi_dsub+0x60>
    72fe:	4b5a      	ldr	r3, [pc, #360]	; (7468 <__aeabi_dsub+0x374>)
    7300:	3501      	adds	r5, #1
    7302:	429d      	cmp	r5, r3
    7304:	d100      	bne.n	7308 <__aeabi_dsub+0x214>
    7306:	e133      	b.n	7570 <__aeabi_dsub+0x47c>
    7308:	4b58      	ldr	r3, [pc, #352]	; (746c <__aeabi_dsub+0x378>)
    730a:	0860      	lsrs	r0, r4, #1
    730c:	4019      	ands	r1, r3
    730e:	2301      	movs	r3, #1
    7310:	4023      	ands	r3, r4
    7312:	1c1c      	adds	r4, r3, #0
    7314:	4304      	orrs	r4, r0
    7316:	07cb      	lsls	r3, r1, #31
    7318:	431c      	orrs	r4, r3
    731a:	0849      	lsrs	r1, r1, #1
    731c:	e71a      	b.n	7154 <__aeabi_dsub+0x60>
    731e:	431e      	orrs	r6, r3
    7320:	d000      	beq.n	7324 <__aeabi_dsub+0x230>
    7322:	e70a      	b.n	713a <__aeabi_dsub+0x46>
    7324:	e705      	b.n	7132 <__aeabi_dsub+0x3e>
    7326:	1c23      	adds	r3, r4, #0
    7328:	430b      	orrs	r3, r1
    732a:	d03b      	beq.n	73a4 <__aeabi_dsub+0x2b0>
    732c:	2380      	movs	r3, #128	; 0x80
    732e:	031b      	lsls	r3, r3, #12
    7330:	430b      	orrs	r3, r1
    7332:	031b      	lsls	r3, r3, #12
    7334:	0b1b      	lsrs	r3, r3, #12
    7336:	e730      	b.n	719a <__aeabi_dsub+0xa6>
    7338:	3f01      	subs	r7, #1
    733a:	2f00      	cmp	r7, #0
    733c:	d16d      	bne.n	741a <__aeabi_dsub+0x326>
    733e:	465e      	mov	r6, fp
    7340:	1ba2      	subs	r2, r4, r6
    7342:	4294      	cmp	r4, r2
    7344:	41a4      	sbcs	r4, r4
    7346:	4264      	negs	r4, r4
    7348:	1ac9      	subs	r1, r1, r3
    734a:	1b09      	subs	r1, r1, r4
    734c:	1c14      	adds	r4, r2, #0
    734e:	e760      	b.n	7212 <__aeabi_dsub+0x11e>
    7350:	4658      	mov	r0, fp
    7352:	4318      	orrs	r0, r3
    7354:	d100      	bne.n	7358 <__aeabi_dsub+0x264>
    7356:	e6fd      	b.n	7154 <__aeabi_dsub+0x60>
    7358:	2601      	movs	r6, #1
    735a:	4276      	negs	r6, r6
    735c:	44b4      	add	ip, r6
    735e:	4660      	mov	r0, ip
    7360:	2800      	cmp	r0, #0
    7362:	d000      	beq.n	7366 <__aeabi_dsub+0x272>
    7364:	e0d2      	b.n	750c <__aeabi_dsub+0x418>
    7366:	465e      	mov	r6, fp
    7368:	1932      	adds	r2, r6, r4
    736a:	e7bf      	b.n	72ec <__aeabi_dsub+0x1f8>
    736c:	2f00      	cmp	r7, #0
    736e:	d000      	beq.n	7372 <__aeabi_dsub+0x27e>
    7370:	e082      	b.n	7478 <__aeabi_dsub+0x384>
    7372:	1c68      	adds	r0, r5, #1
    7374:	0540      	lsls	r0, r0, #21
    7376:	0d40      	lsrs	r0, r0, #21
    7378:	2801      	cmp	r0, #1
    737a:	dc00      	bgt.n	737e <__aeabi_dsub+0x28a>
    737c:	e0ea      	b.n	7554 <__aeabi_dsub+0x460>
    737e:	465a      	mov	r2, fp
    7380:	1aa2      	subs	r2, r4, r2
    7382:	4294      	cmp	r4, r2
    7384:	41bf      	sbcs	r7, r7
    7386:	1ac8      	subs	r0, r1, r3
    7388:	427f      	negs	r7, r7
    738a:	1bc7      	subs	r7, r0, r7
    738c:	023e      	lsls	r6, r7, #8
    738e:	d400      	bmi.n	7392 <__aeabi_dsub+0x29e>
    7390:	e09a      	b.n	74c8 <__aeabi_dsub+0x3d4>
    7392:	4658      	mov	r0, fp
    7394:	1b04      	subs	r4, r0, r4
    7396:	45a3      	cmp	fp, r4
    7398:	4192      	sbcs	r2, r2
    739a:	1a59      	subs	r1, r3, r1
    739c:	4252      	negs	r2, r2
    739e:	1a8f      	subs	r7, r1, r2
    73a0:	46e2      	mov	sl, ip
    73a2:	e73a      	b.n	721a <__aeabi_dsub+0x126>
    73a4:	2300      	movs	r3, #0
    73a6:	2400      	movs	r4, #0
    73a8:	e6f7      	b.n	719a <__aeabi_dsub+0xa6>
    73aa:	2380      	movs	r3, #128	; 0x80
    73ac:	041b      	lsls	r3, r3, #16
    73ae:	2701      	movs	r7, #1
    73b0:	4656      	mov	r6, sl
    73b2:	400b      	ands	r3, r1
    73b4:	4037      	ands	r7, r6
    73b6:	e6e1      	b.n	717c <__aeabi_dsub+0x88>
    73b8:	1c27      	adds	r7, r4, #0
    73ba:	3828      	subs	r0, #40	; 0x28
    73bc:	4087      	lsls	r7, r0
    73be:	2400      	movs	r4, #0
    73c0:	4295      	cmp	r5, r2
    73c2:	dc00      	bgt.n	73c6 <__aeabi_dsub+0x2d2>
    73c4:	e73e      	b.n	7244 <__aeabi_dsub+0x150>
    73c6:	4929      	ldr	r1, [pc, #164]	; (746c <__aeabi_dsub+0x378>)
    73c8:	1aad      	subs	r5, r5, r2
    73ca:	4039      	ands	r1, r7
    73cc:	e6c2      	b.n	7154 <__aeabi_dsub+0x60>
    73ce:	1c20      	adds	r0, r4, #0
    73d0:	f7fa fea4 	bl	211c <__clzsi2>
    73d4:	3020      	adds	r0, #32
    73d6:	e726      	b.n	7226 <__aeabi_dsub+0x132>
    73d8:	465a      	mov	r2, fp
    73da:	431a      	orrs	r2, r3
    73dc:	1e53      	subs	r3, r2, #1
    73de:	419a      	sbcs	r2, r3
    73e0:	b2d2      	uxtb	r2, r2
    73e2:	2700      	movs	r7, #0
    73e4:	e70e      	b.n	7204 <__aeabi_dsub+0x110>
    73e6:	2a00      	cmp	r2, #0
    73e8:	d000      	beq.n	73ec <__aeabi_dsub+0x2f8>
    73ea:	e0e0      	b.n	75ae <__aeabi_dsub+0x4ba>
    73ec:	1c68      	adds	r0, r5, #1
    73ee:	0546      	lsls	r6, r0, #21
    73f0:	0d76      	lsrs	r6, r6, #21
    73f2:	2e01      	cmp	r6, #1
    73f4:	dc00      	bgt.n	73f8 <__aeabi_dsub+0x304>
    73f6:	e092      	b.n	751e <__aeabi_dsub+0x42a>
    73f8:	4d1b      	ldr	r5, [pc, #108]	; (7468 <__aeabi_dsub+0x374>)
    73fa:	42a8      	cmp	r0, r5
    73fc:	d100      	bne.n	7400 <__aeabi_dsub+0x30c>
    73fe:	e0f7      	b.n	75f0 <__aeabi_dsub+0x4fc>
    7400:	465e      	mov	r6, fp
    7402:	1932      	adds	r2, r6, r4
    7404:	42a2      	cmp	r2, r4
    7406:	41a4      	sbcs	r4, r4
    7408:	4264      	negs	r4, r4
    740a:	1859      	adds	r1, r3, r1
    740c:	1909      	adds	r1, r1, r4
    740e:	07cc      	lsls	r4, r1, #31
    7410:	0852      	lsrs	r2, r2, #1
    7412:	4314      	orrs	r4, r2
    7414:	0849      	lsrs	r1, r1, #1
    7416:	1c05      	adds	r5, r0, #0
    7418:	e69c      	b.n	7154 <__aeabi_dsub+0x60>
    741a:	4813      	ldr	r0, [pc, #76]	; (7468 <__aeabi_dsub+0x374>)
    741c:	4285      	cmp	r5, r0
    741e:	d000      	beq.n	7422 <__aeabi_dsub+0x32e>
    7420:	e6d9      	b.n	71d6 <__aeabi_dsub+0xe2>
    7422:	e697      	b.n	7154 <__aeabi_dsub+0x60>
    7424:	1c2b      	adds	r3, r5, #0
    7426:	3b1f      	subs	r3, #31
    7428:	1c3e      	adds	r6, r7, #0
    742a:	40de      	lsrs	r6, r3
    742c:	1c33      	adds	r3, r6, #0
    742e:	2920      	cmp	r1, #32
    7430:	d071      	beq.n	7516 <__aeabi_dsub+0x422>
    7432:	223f      	movs	r2, #63	; 0x3f
    7434:	1b55      	subs	r5, r2, r5
    7436:	40af      	lsls	r7, r5
    7438:	433c      	orrs	r4, r7
    743a:	1e60      	subs	r0, r4, #1
    743c:	4184      	sbcs	r4, r0
    743e:	431c      	orrs	r4, r3
    7440:	2100      	movs	r1, #0
    7442:	2500      	movs	r5, #0
    7444:	e686      	b.n	7154 <__aeabi_dsub+0x60>
    7446:	1c38      	adds	r0, r7, #0
    7448:	3820      	subs	r0, #32
    744a:	1c1e      	adds	r6, r3, #0
    744c:	40c6      	lsrs	r6, r0
    744e:	1c30      	adds	r0, r6, #0
    7450:	2f20      	cmp	r7, #32
    7452:	d062      	beq.n	751a <__aeabi_dsub+0x426>
    7454:	2240      	movs	r2, #64	; 0x40
    7456:	1bd7      	subs	r7, r2, r7
    7458:	40bb      	lsls	r3, r7
    745a:	465a      	mov	r2, fp
    745c:	431a      	orrs	r2, r3
    745e:	1e53      	subs	r3, r2, #1
    7460:	419a      	sbcs	r2, r3
    7462:	4302      	orrs	r2, r0
    7464:	2700      	movs	r7, #0
    7466:	e6cd      	b.n	7204 <__aeabi_dsub+0x110>
    7468:	000007ff 	.word	0x000007ff
    746c:	ff7fffff 	.word	0xff7fffff
    7470:	800fffff 	.word	0x800fffff
    7474:	007fffff 	.word	0x007fffff
    7478:	2d00      	cmp	r5, #0
    747a:	d037      	beq.n	74ec <__aeabi_dsub+0x3f8>
    747c:	4db6      	ldr	r5, [pc, #728]	; (7758 <__aeabi_dsub+0x664>)
    747e:	42a8      	cmp	r0, r5
    7480:	d100      	bne.n	7484 <__aeabi_dsub+0x390>
    7482:	e08f      	b.n	75a4 <__aeabi_dsub+0x4b0>
    7484:	2580      	movs	r5, #128	; 0x80
    7486:	042d      	lsls	r5, r5, #16
    7488:	427f      	negs	r7, r7
    748a:	4329      	orrs	r1, r5
    748c:	2f38      	cmp	r7, #56	; 0x38
    748e:	dd00      	ble.n	7492 <__aeabi_dsub+0x39e>
    7490:	e0a8      	b.n	75e4 <__aeabi_dsub+0x4f0>
    7492:	2f1f      	cmp	r7, #31
    7494:	dd00      	ble.n	7498 <__aeabi_dsub+0x3a4>
    7496:	e124      	b.n	76e2 <__aeabi_dsub+0x5ee>
    7498:	2520      	movs	r5, #32
    749a:	1bed      	subs	r5, r5, r7
    749c:	1c0e      	adds	r6, r1, #0
    749e:	40ae      	lsls	r6, r5
    74a0:	46b0      	mov	r8, r6
    74a2:	1c26      	adds	r6, r4, #0
    74a4:	40fe      	lsrs	r6, r7
    74a6:	4642      	mov	r2, r8
    74a8:	40ac      	lsls	r4, r5
    74aa:	4316      	orrs	r6, r2
    74ac:	1e65      	subs	r5, r4, #1
    74ae:	41ac      	sbcs	r4, r5
    74b0:	4334      	orrs	r4, r6
    74b2:	40f9      	lsrs	r1, r7
    74b4:	465a      	mov	r2, fp
    74b6:	1b14      	subs	r4, r2, r4
    74b8:	45a3      	cmp	fp, r4
    74ba:	4192      	sbcs	r2, r2
    74bc:	1a5b      	subs	r3, r3, r1
    74be:	4252      	negs	r2, r2
    74c0:	1a99      	subs	r1, r3, r2
    74c2:	1c05      	adds	r5, r0, #0
    74c4:	46e2      	mov	sl, ip
    74c6:	e6a4      	b.n	7212 <__aeabi_dsub+0x11e>
    74c8:	1c13      	adds	r3, r2, #0
    74ca:	433b      	orrs	r3, r7
    74cc:	1c14      	adds	r4, r2, #0
    74ce:	2b00      	cmp	r3, #0
    74d0:	d000      	beq.n	74d4 <__aeabi_dsub+0x3e0>
    74d2:	e6a2      	b.n	721a <__aeabi_dsub+0x126>
    74d4:	2700      	movs	r7, #0
    74d6:	2100      	movs	r1, #0
    74d8:	2400      	movs	r4, #0
    74da:	2500      	movs	r5, #0
    74dc:	e6cb      	b.n	7276 <__aeabi_dsub+0x182>
    74de:	465a      	mov	r2, fp
    74e0:	431a      	orrs	r2, r3
    74e2:	1e53      	subs	r3, r2, #1
    74e4:	419a      	sbcs	r2, r3
    74e6:	b2d2      	uxtb	r2, r2
    74e8:	2300      	movs	r3, #0
    74ea:	e6fe      	b.n	72ea <__aeabi_dsub+0x1f6>
    74ec:	1c0d      	adds	r5, r1, #0
    74ee:	4325      	orrs	r5, r4
    74f0:	d058      	beq.n	75a4 <__aeabi_dsub+0x4b0>
    74f2:	43ff      	mvns	r7, r7
    74f4:	2f00      	cmp	r7, #0
    74f6:	d151      	bne.n	759c <__aeabi_dsub+0x4a8>
    74f8:	465a      	mov	r2, fp
    74fa:	1b14      	subs	r4, r2, r4
    74fc:	45a3      	cmp	fp, r4
    74fe:	4192      	sbcs	r2, r2
    7500:	1a59      	subs	r1, r3, r1
    7502:	4252      	negs	r2, r2
    7504:	1a89      	subs	r1, r1, r2
    7506:	1c05      	adds	r5, r0, #0
    7508:	46e2      	mov	sl, ip
    750a:	e682      	b.n	7212 <__aeabi_dsub+0x11e>
    750c:	4892      	ldr	r0, [pc, #584]	; (7758 <__aeabi_dsub+0x664>)
    750e:	4285      	cmp	r5, r0
    7510:	d000      	beq.n	7514 <__aeabi_dsub+0x420>
    7512:	e6cf      	b.n	72b4 <__aeabi_dsub+0x1c0>
    7514:	e61e      	b.n	7154 <__aeabi_dsub+0x60>
    7516:	2700      	movs	r7, #0
    7518:	e78e      	b.n	7438 <__aeabi_dsub+0x344>
    751a:	2300      	movs	r3, #0
    751c:	e79d      	b.n	745a <__aeabi_dsub+0x366>
    751e:	1c08      	adds	r0, r1, #0
    7520:	4320      	orrs	r0, r4
    7522:	2d00      	cmp	r5, #0
    7524:	d000      	beq.n	7528 <__aeabi_dsub+0x434>
    7526:	e0c2      	b.n	76ae <__aeabi_dsub+0x5ba>
    7528:	2800      	cmp	r0, #0
    752a:	d100      	bne.n	752e <__aeabi_dsub+0x43a>
    752c:	e0ef      	b.n	770e <__aeabi_dsub+0x61a>
    752e:	4658      	mov	r0, fp
    7530:	4318      	orrs	r0, r3
    7532:	d100      	bne.n	7536 <__aeabi_dsub+0x442>
    7534:	e60e      	b.n	7154 <__aeabi_dsub+0x60>
    7536:	4658      	mov	r0, fp
    7538:	1902      	adds	r2, r0, r4
    753a:	42a2      	cmp	r2, r4
    753c:	41a4      	sbcs	r4, r4
    753e:	4264      	negs	r4, r4
    7540:	1859      	adds	r1, r3, r1
    7542:	1909      	adds	r1, r1, r4
    7544:	1c14      	adds	r4, r2, #0
    7546:	020a      	lsls	r2, r1, #8
    7548:	d400      	bmi.n	754c <__aeabi_dsub+0x458>
    754a:	e603      	b.n	7154 <__aeabi_dsub+0x60>
    754c:	4b83      	ldr	r3, [pc, #524]	; (775c <__aeabi_dsub+0x668>)
    754e:	2501      	movs	r5, #1
    7550:	4019      	ands	r1, r3
    7552:	e5ff      	b.n	7154 <__aeabi_dsub+0x60>
    7554:	1c08      	adds	r0, r1, #0
    7556:	4320      	orrs	r0, r4
    7558:	2d00      	cmp	r5, #0
    755a:	d138      	bne.n	75ce <__aeabi_dsub+0x4da>
    755c:	2800      	cmp	r0, #0
    755e:	d16f      	bne.n	7640 <__aeabi_dsub+0x54c>
    7560:	4659      	mov	r1, fp
    7562:	4319      	orrs	r1, r3
    7564:	d003      	beq.n	756e <__aeabi_dsub+0x47a>
    7566:	1c19      	adds	r1, r3, #0
    7568:	465c      	mov	r4, fp
    756a:	46e2      	mov	sl, ip
    756c:	e5f2      	b.n	7154 <__aeabi_dsub+0x60>
    756e:	2700      	movs	r7, #0
    7570:	2100      	movs	r1, #0
    7572:	2400      	movs	r4, #0
    7574:	e67f      	b.n	7276 <__aeabi_dsub+0x182>
    7576:	4660      	mov	r0, ip
    7578:	3820      	subs	r0, #32
    757a:	1c1a      	adds	r2, r3, #0
    757c:	40c2      	lsrs	r2, r0
    757e:	4666      	mov	r6, ip
    7580:	1c10      	adds	r0, r2, #0
    7582:	2e20      	cmp	r6, #32
    7584:	d100      	bne.n	7588 <__aeabi_dsub+0x494>
    7586:	e0aa      	b.n	76de <__aeabi_dsub+0x5ea>
    7588:	2240      	movs	r2, #64	; 0x40
    758a:	1b92      	subs	r2, r2, r6
    758c:	4093      	lsls	r3, r2
    758e:	465a      	mov	r2, fp
    7590:	431a      	orrs	r2, r3
    7592:	1e53      	subs	r3, r2, #1
    7594:	419a      	sbcs	r2, r3
    7596:	4302      	orrs	r2, r0
    7598:	2300      	movs	r3, #0
    759a:	e6a6      	b.n	72ea <__aeabi_dsub+0x1f6>
    759c:	4d6e      	ldr	r5, [pc, #440]	; (7758 <__aeabi_dsub+0x664>)
    759e:	42a8      	cmp	r0, r5
    75a0:	d000      	beq.n	75a4 <__aeabi_dsub+0x4b0>
    75a2:	e773      	b.n	748c <__aeabi_dsub+0x398>
    75a4:	1c19      	adds	r1, r3, #0
    75a6:	465c      	mov	r4, fp
    75a8:	1c05      	adds	r5, r0, #0
    75aa:	46e2      	mov	sl, ip
    75ac:	e5d2      	b.n	7154 <__aeabi_dsub+0x60>
    75ae:	2d00      	cmp	r5, #0
    75b0:	d122      	bne.n	75f8 <__aeabi_dsub+0x504>
    75b2:	1c0d      	adds	r5, r1, #0
    75b4:	4325      	orrs	r5, r4
    75b6:	d076      	beq.n	76a6 <__aeabi_dsub+0x5b2>
    75b8:	43d5      	mvns	r5, r2
    75ba:	2d00      	cmp	r5, #0
    75bc:	d170      	bne.n	76a0 <__aeabi_dsub+0x5ac>
    75be:	445c      	add	r4, fp
    75c0:	455c      	cmp	r4, fp
    75c2:	4192      	sbcs	r2, r2
    75c4:	1859      	adds	r1, r3, r1
    75c6:	4252      	negs	r2, r2
    75c8:	1889      	adds	r1, r1, r2
    75ca:	1c05      	adds	r5, r0, #0
    75cc:	e694      	b.n	72f8 <__aeabi_dsub+0x204>
    75ce:	2800      	cmp	r0, #0
    75d0:	d14c      	bne.n	766c <__aeabi_dsub+0x578>
    75d2:	4659      	mov	r1, fp
    75d4:	4319      	orrs	r1, r3
    75d6:	d100      	bne.n	75da <__aeabi_dsub+0x4e6>
    75d8:	e648      	b.n	726c <__aeabi_dsub+0x178>
    75da:	1c19      	adds	r1, r3, #0
    75dc:	465c      	mov	r4, fp
    75de:	46e2      	mov	sl, ip
    75e0:	4d5d      	ldr	r5, [pc, #372]	; (7758 <__aeabi_dsub+0x664>)
    75e2:	e5b7      	b.n	7154 <__aeabi_dsub+0x60>
    75e4:	430c      	orrs	r4, r1
    75e6:	1e61      	subs	r1, r4, #1
    75e8:	418c      	sbcs	r4, r1
    75ea:	b2e4      	uxtb	r4, r4
    75ec:	2100      	movs	r1, #0
    75ee:	e761      	b.n	74b4 <__aeabi_dsub+0x3c0>
    75f0:	1c05      	adds	r5, r0, #0
    75f2:	2100      	movs	r1, #0
    75f4:	2400      	movs	r4, #0
    75f6:	e63e      	b.n	7276 <__aeabi_dsub+0x182>
    75f8:	4d57      	ldr	r5, [pc, #348]	; (7758 <__aeabi_dsub+0x664>)
    75fa:	42a8      	cmp	r0, r5
    75fc:	d053      	beq.n	76a6 <__aeabi_dsub+0x5b2>
    75fe:	4255      	negs	r5, r2
    7600:	2280      	movs	r2, #128	; 0x80
    7602:	0416      	lsls	r6, r2, #16
    7604:	4331      	orrs	r1, r6
    7606:	2d38      	cmp	r5, #56	; 0x38
    7608:	dc7b      	bgt.n	7702 <__aeabi_dsub+0x60e>
    760a:	2d1f      	cmp	r5, #31
    760c:	dd00      	ble.n	7610 <__aeabi_dsub+0x51c>
    760e:	e08c      	b.n	772a <__aeabi_dsub+0x636>
    7610:	2220      	movs	r2, #32
    7612:	1b56      	subs	r6, r2, r5
    7614:	1c0a      	adds	r2, r1, #0
    7616:	46b4      	mov	ip, r6
    7618:	40b2      	lsls	r2, r6
    761a:	1c26      	adds	r6, r4, #0
    761c:	40ee      	lsrs	r6, r5
    761e:	4332      	orrs	r2, r6
    7620:	4690      	mov	r8, r2
    7622:	4662      	mov	r2, ip
    7624:	4094      	lsls	r4, r2
    7626:	1e66      	subs	r6, r4, #1
    7628:	41b4      	sbcs	r4, r6
    762a:	4642      	mov	r2, r8
    762c:	4314      	orrs	r4, r2
    762e:	40e9      	lsrs	r1, r5
    7630:	445c      	add	r4, fp
    7632:	455c      	cmp	r4, fp
    7634:	4192      	sbcs	r2, r2
    7636:	18cb      	adds	r3, r1, r3
    7638:	4252      	negs	r2, r2
    763a:	1899      	adds	r1, r3, r2
    763c:	1c05      	adds	r5, r0, #0
    763e:	e65b      	b.n	72f8 <__aeabi_dsub+0x204>
    7640:	4658      	mov	r0, fp
    7642:	4318      	orrs	r0, r3
    7644:	d100      	bne.n	7648 <__aeabi_dsub+0x554>
    7646:	e585      	b.n	7154 <__aeabi_dsub+0x60>
    7648:	465e      	mov	r6, fp
    764a:	1ba7      	subs	r7, r4, r6
    764c:	42bc      	cmp	r4, r7
    764e:	4192      	sbcs	r2, r2
    7650:	1ac8      	subs	r0, r1, r3
    7652:	4252      	negs	r2, r2
    7654:	1a80      	subs	r0, r0, r2
    7656:	0206      	lsls	r6, r0, #8
    7658:	d560      	bpl.n	771c <__aeabi_dsub+0x628>
    765a:	4658      	mov	r0, fp
    765c:	1b04      	subs	r4, r0, r4
    765e:	45a3      	cmp	fp, r4
    7660:	4192      	sbcs	r2, r2
    7662:	1a59      	subs	r1, r3, r1
    7664:	4252      	negs	r2, r2
    7666:	1a89      	subs	r1, r1, r2
    7668:	46e2      	mov	sl, ip
    766a:	e573      	b.n	7154 <__aeabi_dsub+0x60>
    766c:	4658      	mov	r0, fp
    766e:	4318      	orrs	r0, r3
    7670:	d033      	beq.n	76da <__aeabi_dsub+0x5e6>
    7672:	0748      	lsls	r0, r1, #29
    7674:	08e4      	lsrs	r4, r4, #3
    7676:	4304      	orrs	r4, r0
    7678:	2080      	movs	r0, #128	; 0x80
    767a:	08c9      	lsrs	r1, r1, #3
    767c:	0300      	lsls	r0, r0, #12
    767e:	4201      	tst	r1, r0
    7680:	d008      	beq.n	7694 <__aeabi_dsub+0x5a0>
    7682:	08dd      	lsrs	r5, r3, #3
    7684:	4205      	tst	r5, r0
    7686:	d105      	bne.n	7694 <__aeabi_dsub+0x5a0>
    7688:	4659      	mov	r1, fp
    768a:	08ca      	lsrs	r2, r1, #3
    768c:	075c      	lsls	r4, r3, #29
    768e:	4314      	orrs	r4, r2
    7690:	1c29      	adds	r1, r5, #0
    7692:	46e2      	mov	sl, ip
    7694:	0f63      	lsrs	r3, r4, #29
    7696:	00c9      	lsls	r1, r1, #3
    7698:	4319      	orrs	r1, r3
    769a:	00e4      	lsls	r4, r4, #3
    769c:	4d2e      	ldr	r5, [pc, #184]	; (7758 <__aeabi_dsub+0x664>)
    769e:	e559      	b.n	7154 <__aeabi_dsub+0x60>
    76a0:	4a2d      	ldr	r2, [pc, #180]	; (7758 <__aeabi_dsub+0x664>)
    76a2:	4290      	cmp	r0, r2
    76a4:	d1af      	bne.n	7606 <__aeabi_dsub+0x512>
    76a6:	1c19      	adds	r1, r3, #0
    76a8:	465c      	mov	r4, fp
    76aa:	1c05      	adds	r5, r0, #0
    76ac:	e552      	b.n	7154 <__aeabi_dsub+0x60>
    76ae:	2800      	cmp	r0, #0
    76b0:	d030      	beq.n	7714 <__aeabi_dsub+0x620>
    76b2:	4658      	mov	r0, fp
    76b4:	4318      	orrs	r0, r3
    76b6:	d010      	beq.n	76da <__aeabi_dsub+0x5e6>
    76b8:	2580      	movs	r5, #128	; 0x80
    76ba:	0748      	lsls	r0, r1, #29
    76bc:	08e4      	lsrs	r4, r4, #3
    76be:	08c9      	lsrs	r1, r1, #3
    76c0:	032d      	lsls	r5, r5, #12
    76c2:	4304      	orrs	r4, r0
    76c4:	4229      	tst	r1, r5
    76c6:	d0e5      	beq.n	7694 <__aeabi_dsub+0x5a0>
    76c8:	08d8      	lsrs	r0, r3, #3
    76ca:	4228      	tst	r0, r5
    76cc:	d1e2      	bne.n	7694 <__aeabi_dsub+0x5a0>
    76ce:	465d      	mov	r5, fp
    76d0:	08ea      	lsrs	r2, r5, #3
    76d2:	075c      	lsls	r4, r3, #29
    76d4:	4314      	orrs	r4, r2
    76d6:	1c01      	adds	r1, r0, #0
    76d8:	e7dc      	b.n	7694 <__aeabi_dsub+0x5a0>
    76da:	4d1f      	ldr	r5, [pc, #124]	; (7758 <__aeabi_dsub+0x664>)
    76dc:	e53a      	b.n	7154 <__aeabi_dsub+0x60>
    76de:	2300      	movs	r3, #0
    76e0:	e755      	b.n	758e <__aeabi_dsub+0x49a>
    76e2:	1c3d      	adds	r5, r7, #0
    76e4:	3d20      	subs	r5, #32
    76e6:	1c0e      	adds	r6, r1, #0
    76e8:	40ee      	lsrs	r6, r5
    76ea:	1c35      	adds	r5, r6, #0
    76ec:	2f20      	cmp	r7, #32
    76ee:	d02e      	beq.n	774e <__aeabi_dsub+0x65a>
    76f0:	2640      	movs	r6, #64	; 0x40
    76f2:	1bf7      	subs	r7, r6, r7
    76f4:	40b9      	lsls	r1, r7
    76f6:	430c      	orrs	r4, r1
    76f8:	1e61      	subs	r1, r4, #1
    76fa:	418c      	sbcs	r4, r1
    76fc:	432c      	orrs	r4, r5
    76fe:	2100      	movs	r1, #0
    7700:	e6d8      	b.n	74b4 <__aeabi_dsub+0x3c0>
    7702:	430c      	orrs	r4, r1
    7704:	1e61      	subs	r1, r4, #1
    7706:	418c      	sbcs	r4, r1
    7708:	b2e4      	uxtb	r4, r4
    770a:	2100      	movs	r1, #0
    770c:	e790      	b.n	7630 <__aeabi_dsub+0x53c>
    770e:	1c19      	adds	r1, r3, #0
    7710:	465c      	mov	r4, fp
    7712:	e51f      	b.n	7154 <__aeabi_dsub+0x60>
    7714:	1c19      	adds	r1, r3, #0
    7716:	465c      	mov	r4, fp
    7718:	4d0f      	ldr	r5, [pc, #60]	; (7758 <__aeabi_dsub+0x664>)
    771a:	e51b      	b.n	7154 <__aeabi_dsub+0x60>
    771c:	1c03      	adds	r3, r0, #0
    771e:	433b      	orrs	r3, r7
    7720:	d100      	bne.n	7724 <__aeabi_dsub+0x630>
    7722:	e724      	b.n	756e <__aeabi_dsub+0x47a>
    7724:	1c01      	adds	r1, r0, #0
    7726:	1c3c      	adds	r4, r7, #0
    7728:	e514      	b.n	7154 <__aeabi_dsub+0x60>
    772a:	2620      	movs	r6, #32
    772c:	4276      	negs	r6, r6
    772e:	1976      	adds	r6, r6, r5
    7730:	1c0a      	adds	r2, r1, #0
    7732:	40f2      	lsrs	r2, r6
    7734:	4690      	mov	r8, r2
    7736:	2d20      	cmp	r5, #32
    7738:	d00b      	beq.n	7752 <__aeabi_dsub+0x65e>
    773a:	2640      	movs	r6, #64	; 0x40
    773c:	1b75      	subs	r5, r6, r5
    773e:	40a9      	lsls	r1, r5
    7740:	430c      	orrs	r4, r1
    7742:	1e61      	subs	r1, r4, #1
    7744:	418c      	sbcs	r4, r1
    7746:	4645      	mov	r5, r8
    7748:	432c      	orrs	r4, r5
    774a:	2100      	movs	r1, #0
    774c:	e770      	b.n	7630 <__aeabi_dsub+0x53c>
    774e:	2100      	movs	r1, #0
    7750:	e7d1      	b.n	76f6 <__aeabi_dsub+0x602>
    7752:	2100      	movs	r1, #0
    7754:	e7f4      	b.n	7740 <__aeabi_dsub+0x64c>
    7756:	46c0      	nop			; (mov r8, r8)
    7758:	000007ff 	.word	0x000007ff
    775c:	ff7fffff 	.word	0xff7fffff

00007760 <__aeabi_d2iz>:
    7760:	b570      	push	{r4, r5, r6, lr}
    7762:	1c0b      	adds	r3, r1, #0
    7764:	4c12      	ldr	r4, [pc, #72]	; (77b0 <__aeabi_d2iz+0x50>)
    7766:	0309      	lsls	r1, r1, #12
    7768:	0b0e      	lsrs	r6, r1, #12
    776a:	0059      	lsls	r1, r3, #1
    776c:	1c02      	adds	r2, r0, #0
    776e:	0d49      	lsrs	r1, r1, #21
    7770:	0fdd      	lsrs	r5, r3, #31
    7772:	2000      	movs	r0, #0
    7774:	42a1      	cmp	r1, r4
    7776:	dd11      	ble.n	779c <__aeabi_d2iz+0x3c>
    7778:	480e      	ldr	r0, [pc, #56]	; (77b4 <__aeabi_d2iz+0x54>)
    777a:	4281      	cmp	r1, r0
    777c:	dc0f      	bgt.n	779e <__aeabi_d2iz+0x3e>
    777e:	2080      	movs	r0, #128	; 0x80
    7780:	0340      	lsls	r0, r0, #13
    7782:	4306      	orrs	r6, r0
    7784:	480c      	ldr	r0, [pc, #48]	; (77b8 <__aeabi_d2iz+0x58>)
    7786:	1a40      	subs	r0, r0, r1
    7788:	281f      	cmp	r0, #31
    778a:	dd0b      	ble.n	77a4 <__aeabi_d2iz+0x44>
    778c:	4a0b      	ldr	r2, [pc, #44]	; (77bc <__aeabi_d2iz+0x5c>)
    778e:	1a52      	subs	r2, r2, r1
    7790:	40d6      	lsrs	r6, r2
    7792:	1c32      	adds	r2, r6, #0
    7794:	4250      	negs	r0, r2
    7796:	2d00      	cmp	r5, #0
    7798:	d100      	bne.n	779c <__aeabi_d2iz+0x3c>
    779a:	1c10      	adds	r0, r2, #0
    779c:	bd70      	pop	{r4, r5, r6, pc}
    779e:	4b08      	ldr	r3, [pc, #32]	; (77c0 <__aeabi_d2iz+0x60>)
    77a0:	18e8      	adds	r0, r5, r3
    77a2:	e7fb      	b.n	779c <__aeabi_d2iz+0x3c>
    77a4:	4b07      	ldr	r3, [pc, #28]	; (77c4 <__aeabi_d2iz+0x64>)
    77a6:	40c2      	lsrs	r2, r0
    77a8:	18c9      	adds	r1, r1, r3
    77aa:	408e      	lsls	r6, r1
    77ac:	4332      	orrs	r2, r6
    77ae:	e7f1      	b.n	7794 <__aeabi_d2iz+0x34>
    77b0:	000003fe 	.word	0x000003fe
    77b4:	0000041d 	.word	0x0000041d
    77b8:	00000433 	.word	0x00000433
    77bc:	00000413 	.word	0x00000413
    77c0:	7fffffff 	.word	0x7fffffff
    77c4:	fffffbed 	.word	0xfffffbed

000077c8 <__aeabi_i2d>:
    77c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    77ca:	1e04      	subs	r4, r0, #0
    77cc:	d031      	beq.n	7832 <__aeabi_i2d+0x6a>
    77ce:	0fc7      	lsrs	r7, r0, #31
    77d0:	d000      	beq.n	77d4 <__aeabi_i2d+0xc>
    77d2:	4244      	negs	r4, r0
    77d4:	1c20      	adds	r0, r4, #0
    77d6:	f7fa fca1 	bl	211c <__clzsi2>
    77da:	4d18      	ldr	r5, [pc, #96]	; (783c <__aeabi_i2d+0x74>)
    77dc:	1a2d      	subs	r5, r5, r0
    77de:	280a      	cmp	r0, #10
    77e0:	dd19      	ble.n	7816 <__aeabi_i2d+0x4e>
    77e2:	380b      	subs	r0, #11
    77e4:	4084      	lsls	r4, r0
    77e6:	0324      	lsls	r4, r4, #12
    77e8:	056d      	lsls	r5, r5, #21
    77ea:	0b24      	lsrs	r4, r4, #12
    77ec:	0d6d      	lsrs	r5, r5, #21
    77ee:	1c3a      	adds	r2, r7, #0
    77f0:	2600      	movs	r6, #0
    77f2:	2000      	movs	r0, #0
    77f4:	2100      	movs	r1, #0
    77f6:	0d0b      	lsrs	r3, r1, #20
    77f8:	0324      	lsls	r4, r4, #12
    77fa:	0b24      	lsrs	r4, r4, #12
    77fc:	051b      	lsls	r3, r3, #20
    77fe:	4323      	orrs	r3, r4
    7800:	4c0f      	ldr	r4, [pc, #60]	; (7840 <__aeabi_i2d+0x78>)
    7802:	052d      	lsls	r5, r5, #20
    7804:	401c      	ands	r4, r3
    7806:	432c      	orrs	r4, r5
    7808:	0064      	lsls	r4, r4, #1
    780a:	0864      	lsrs	r4, r4, #1
    780c:	07d3      	lsls	r3, r2, #31
    780e:	1c21      	adds	r1, r4, #0
    7810:	1c30      	adds	r0, r6, #0
    7812:	4319      	orrs	r1, r3
    7814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7816:	1c06      	adds	r6, r0, #0
    7818:	3615      	adds	r6, #21
    781a:	1c23      	adds	r3, r4, #0
    781c:	40b3      	lsls	r3, r6
    781e:	1c1e      	adds	r6, r3, #0
    7820:	230b      	movs	r3, #11
    7822:	1a18      	subs	r0, r3, r0
    7824:	40c4      	lsrs	r4, r0
    7826:	0324      	lsls	r4, r4, #12
    7828:	056d      	lsls	r5, r5, #21
    782a:	0b24      	lsrs	r4, r4, #12
    782c:	0d6d      	lsrs	r5, r5, #21
    782e:	1c3a      	adds	r2, r7, #0
    7830:	e7df      	b.n	77f2 <__aeabi_i2d+0x2a>
    7832:	2200      	movs	r2, #0
    7834:	2500      	movs	r5, #0
    7836:	2400      	movs	r4, #0
    7838:	2600      	movs	r6, #0
    783a:	e7da      	b.n	77f2 <__aeabi_i2d+0x2a>
    783c:	0000041e 	.word	0x0000041e
    7840:	800fffff 	.word	0x800fffff

00007844 <__aeabi_ui2d>:
    7844:	b510      	push	{r4, lr}
    7846:	1e04      	subs	r4, r0, #0
    7848:	d028      	beq.n	789c <__aeabi_ui2d+0x58>
    784a:	f7fa fc67 	bl	211c <__clzsi2>
    784e:	4a15      	ldr	r2, [pc, #84]	; (78a4 <__aeabi_ui2d+0x60>)
    7850:	1a12      	subs	r2, r2, r0
    7852:	280a      	cmp	r0, #10
    7854:	dd15      	ble.n	7882 <__aeabi_ui2d+0x3e>
    7856:	380b      	subs	r0, #11
    7858:	4084      	lsls	r4, r0
    785a:	0324      	lsls	r4, r4, #12
    785c:	0552      	lsls	r2, r2, #21
    785e:	0b24      	lsrs	r4, r4, #12
    7860:	0d52      	lsrs	r2, r2, #21
    7862:	2300      	movs	r3, #0
    7864:	2000      	movs	r0, #0
    7866:	2100      	movs	r1, #0
    7868:	0324      	lsls	r4, r4, #12
    786a:	1c18      	adds	r0, r3, #0
    786c:	0d0b      	lsrs	r3, r1, #20
    786e:	0b24      	lsrs	r4, r4, #12
    7870:	051b      	lsls	r3, r3, #20
    7872:	4323      	orrs	r3, r4
    7874:	4c0c      	ldr	r4, [pc, #48]	; (78a8 <__aeabi_ui2d+0x64>)
    7876:	0512      	lsls	r2, r2, #20
    7878:	401c      	ands	r4, r3
    787a:	4314      	orrs	r4, r2
    787c:	0064      	lsls	r4, r4, #1
    787e:	0861      	lsrs	r1, r4, #1
    7880:	bd10      	pop	{r4, pc}
    7882:	1c03      	adds	r3, r0, #0
    7884:	3315      	adds	r3, #21
    7886:	1c21      	adds	r1, r4, #0
    7888:	4099      	lsls	r1, r3
    788a:	1c0b      	adds	r3, r1, #0
    788c:	210b      	movs	r1, #11
    788e:	1a08      	subs	r0, r1, r0
    7890:	40c4      	lsrs	r4, r0
    7892:	0324      	lsls	r4, r4, #12
    7894:	0552      	lsls	r2, r2, #21
    7896:	0b24      	lsrs	r4, r4, #12
    7898:	0d52      	lsrs	r2, r2, #21
    789a:	e7e3      	b.n	7864 <__aeabi_ui2d+0x20>
    789c:	2200      	movs	r2, #0
    789e:	2400      	movs	r4, #0
    78a0:	2300      	movs	r3, #0
    78a2:	e7df      	b.n	7864 <__aeabi_ui2d+0x20>
    78a4:	0000041e 	.word	0x0000041e
    78a8:	800fffff 	.word	0x800fffff
    78ac:	00000338 	.word	0x00000338
    78b0:	00000580 	.word	0x00000580
    78b4:	00000580 	.word	0x00000580
    78b8:	00000580 	.word	0x00000580
    78bc:	00000580 	.word	0x00000580
    78c0:	00000580 	.word	0x00000580
    78c4:	00000580 	.word	0x00000580
    78c8:	00000580 	.word	0x00000580
    78cc:	00000580 	.word	0x00000580
    78d0:	00000580 	.word	0x00000580
    78d4:	00000580 	.word	0x00000580
    78d8:	00000580 	.word	0x00000580
    78dc:	00000580 	.word	0x00000580
    78e0:	00000580 	.word	0x00000580
    78e4:	00000580 	.word	0x00000580
    78e8:	00000580 	.word	0x00000580
    78ec:	0000031a 	.word	0x0000031a
    78f0:	00000580 	.word	0x00000580
    78f4:	00000580 	.word	0x00000580
    78f8:	00000580 	.word	0x00000580
    78fc:	00000580 	.word	0x00000580
    7900:	00000580 	.word	0x00000580
    7904:	00000580 	.word	0x00000580
    7908:	00000580 	.word	0x00000580
    790c:	00000580 	.word	0x00000580
    7910:	00000580 	.word	0x00000580
    7914:	00000580 	.word	0x00000580
    7918:	00000580 	.word	0x00000580
    791c:	00000580 	.word	0x00000580
    7920:	00000580 	.word	0x00000580
    7924:	00000580 	.word	0x00000580
    7928:	00000580 	.word	0x00000580
    792c:	00000330 	.word	0x00000330
    7930:	00000580 	.word	0x00000580
    7934:	00000580 	.word	0x00000580
    7938:	00000580 	.word	0x00000580
    793c:	00000580 	.word	0x00000580
    7940:	00000580 	.word	0x00000580
    7944:	00000580 	.word	0x00000580
    7948:	00000580 	.word	0x00000580
    794c:	00000580 	.word	0x00000580
    7950:	00000580 	.word	0x00000580
    7954:	00000580 	.word	0x00000580
    7958:	00000580 	.word	0x00000580
    795c:	00000580 	.word	0x00000580
    7960:	00000580 	.word	0x00000580
    7964:	00000580 	.word	0x00000580
    7968:	00000580 	.word	0x00000580
    796c:	00000328 	.word	0x00000328
    7970:	000002fc 	.word	0x000002fc
    7974:	00000340 	.word	0x00000340
    7978:	0000030c 	.word	0x0000030c
    797c:	00000304 	.word	0x00000304
    7980:	00000002 	.word	0x00000002
    7984:	00000003 	.word	0x00000003
    7988:	00000028 	.word	0x00000028
    798c:	00000029 	.word	0x00000029
    7990:	00000004 	.word	0x00000004
    7994:	00000005 	.word	0x00000005
    7998:	00000006 	.word	0x00000006
    799c:	00000007 	.word	0x00000007
    79a0:	00000020 	.word	0x00000020
    79a4:	00000021 	.word	0x00000021
    79a8:	00000022 	.word	0x00000022
    79ac:	00000023 	.word	0x00000023
    79b0:	00000024 	.word	0x00000024
    79b4:	00000025 	.word	0x00000025
    79b8:	00000026 	.word	0x00000026
    79bc:	00000027 	.word	0x00000027
    79c0:	00000008 	.word	0x00000008
    79c4:	00000009 	.word	0x00000009
    79c8:	0000000a 	.word	0x0000000a
    79cc:	0000000b 	.word	0x0000000b
    79d0:	42000800 	.word	0x42000800
    79d4:	42000c00 	.word	0x42000c00
    79d8:	42001000 	.word	0x42001000
    79dc:	42001400 	.word	0x42001400
    79e0:	42001800 	.word	0x42001800
    79e4:	42001c00 	.word	0x42001c00
    79e8:	0a090807 	.word	0x0a090807
    79ec:	00000c0b 	.word	0x00000c0b
    79f0:	00000f80 	.word	0x00000f80
    79f4:	00000fca 	.word	0x00000fca
    79f8:	00000fca 	.word	0x00000fca
    79fc:	00000f7a 	.word	0x00000f7a
    7a00:	00000f7a 	.word	0x00000f7a
    7a04:	00000f96 	.word	0x00000f96
    7a08:	00000f86 	.word	0x00000f86
    7a0c:	00000f9c 	.word	0x00000f9c
    7a10:	00001054 	.word	0x00001054
    7a14:	000010a8 	.word	0x000010a8
    7a18:	000010a8 	.word	0x000010a8
    7a1c:	00001034 	.word	0x00001034
    7a20:	00001046 	.word	0x00001046
    7a24:	00001064 	.word	0x00001064
    7a28:	00001038 	.word	0x00001038
    7a2c:	00001074 	.word	0x00001074
    7a30:	20434441 	.word	0x20434441
    7a34:	64616552 	.word	0x64616552
    7a38:	20676e69 	.word	0x20676e69
    7a3c:	7525203d 	.word	0x7525203d
    7a40:	00000a0d 	.word	0x00000a0d
    7a44:	73696854 	.word	0x73696854
    7a48:	20736920 	.word	0x20736920
    7a4c:	20656874 	.word	0x20656874
    7a50:	444d4153 	.word	0x444d4153
    7a54:	77203032 	.word	0x77203032
    7a58:	20687469 	.word	0x20687469
    7a5c:	72756f79 	.word	0x72756f79
    7a60:	43444120 	.word	0x43444120
    7a64:	61657220 	.word	0x61657220
    7a68:	676e6964 	.word	0x676e6964
    7a6c:	0a0d2173 	.word	0x0a0d2173
    7a70:	00000000 	.word	0x00000000

00007a74 <_global_impure_ptr>:
    7a74:	20000010 20200043                                ... C.

00007a7a <blanks.6743>:
    7a7a:	20202020 20202020 20202020 20202020                     

00007a8a <zeroes.6744>:
    7a8a:	30303030 30303030 30303030 30303030     0000000000000000
    7a9a:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
    7aaa:	33323130 37363534 42413938 46454443     0123456789ABCDEF
    7aba:	32313000 36353433 61393837 65646362     .0123456789abcde
    7aca:	00300066 69666e49 7974696e 4e614e00     f.0.Infinity.NaN
    7ada:	534f5000 2e005849 00000000 00050000              .POSIX........

00007ae8 <p05.5289>:
    7ae8:	00000005 00000019 0000007d 00000000     ........}.......

00007af8 <__mprec_tens>:
    7af8:	00000000 3ff00000 00000000 40240000     .......?......$@
    7b08:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
    7b18:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
    7b28:	00000000 412e8480 00000000 416312d0     .......A......cA
    7b38:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
    7b48:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
    7b58:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
    7b68:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
    7b78:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
    7b88:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
    7b98:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
    7ba8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
    7bb8:	79d99db4 44ea7843                       ...yCx.D

00007bc0 <__mprec_tinytens>:
    7bc0:	97d889bc 3c9cd2b2 d5a8a733 3949f623     .......<3...#.I9
    7bd0:	44f4a73d 32a50ffd cf8c979d 255bba08     =..D...2......[%
    7be0:	64ac6f43 0ac80628                       Co.d(...

00007be8 <__mprec_bigtens>:
    7be8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
    7bf8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
    7c08:	7f73bf3c 75154fdd                       <.s..O.u

00007c10 <blanks.6687>:
    7c10:	20202020 20202020 20202020 20202020                     

00007c20 <zeroes.6688>:
    7c20:	30303030 30303030 30303030 30303030     0000000000000000
    7c30:	000064e0 00006474 000064be 000063a2     .d..td...d...c..
    7c40:	000064be 000064b0 000064be 000063a2     .d...d...d...c..
    7c50:	00006474 00006474 000064b0 000063a2     td..td...d...c..
    7c60:	00006398 00006398 00006398 00006704     .c...c...c...g..
    7c70:	00006db8 00006fa6 00006fa6 00006d96     .m...o...o...m..
    7c80:	00006c7e 00006c7e 00006d86 00006d96     ~l..~l...m...m..
    7c90:	00006c7e 00006d86 00006c7e 00006d96     ~l...m..~l...m..
    7ca0:	00006c7c 00006c7c 00006c7c 00006fae     |l..|l..|l...o..

00007cb0 <_init>:
    7cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7cb2:	46c0      	nop			; (mov r8, r8)
    7cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7cb6:	bc08      	pop	{r3}
    7cb8:	469e      	mov	lr, r3
    7cba:	4770      	bx	lr

00007cbc <__init_array_start>:
    7cbc:	00003285 	.word	0x00003285

00007cc0 <__frame_dummy_init_array_entry>:
    7cc0:	00000125                                %...

00007cc4 <_fini>:
    7cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7cc6:	46c0      	nop			; (mov r8, r8)
    7cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    7cca:	bc08      	pop	{r3}
    7ccc:	469e      	mov	lr, r3
    7cce:	4770      	bx	lr

00007cd0 <__fini_array_start>:
    7cd0:	000000f9 	.word	0x000000f9
